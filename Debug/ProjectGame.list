
ProjectGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08009750  08009750  00019750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800992c  0800992c  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800992c  0800992c  0001992c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009934  08009934  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009934  08009934  00019934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009938  08009938  00019938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800993c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ca8  200000b8  080099f4  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d60  080099f4  00021d60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024ff0  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004281  00000000  00000000  000450d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001eb8  00000000  00000000  00049360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cb8  00000000  00000000  0004b218  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b94d  00000000  00000000  0004ced0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017e9c  00000000  00000000  0007881d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010592a  00000000  00000000  000906b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00195fe3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008734  00000000  00000000  00196060  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009738 	.word	0x08009738

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	08009738 	.word	0x08009738

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000eb6:	f000 faa9 	bl	800140c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000ec0:	f107 030f 	add.w	r3, r7, #15
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fb3f 	bl	800154c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000ed8:	f107 030f 	add.w	r3, r7, #15
 8000edc:	2201      	movs	r2, #1
 8000ede:	2123      	movs	r1, #35	; 0x23
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fb33 	bl	800154c <GYRO_IO_Write>
}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000f02:	f000 fa83 	bl	800140c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	2201      	movs	r2, #1
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fb59 	bl	80015c4 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	2201      	movs	r2, #1
 8000f26:	2124      	movs	r1, #36	; 0x24
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fb4b 	bl	80015c4 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000f38:	1dfb      	adds	r3, r7, #7
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2124      	movs	r1, #36	; 0x24
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fb04 	bl	800154c <GYRO_IO_Write>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000f60:	f107 030f 	add.w	r3, r7, #15
 8000f64:	2201      	movs	r2, #1
 8000f66:	2120      	movs	r1, #32
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 faef 	bl	800154c <GYRO_IO_Write>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000f88:	f107 030f 	add.w	r3, r7, #15
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2130      	movs	r1, #48	; 0x30
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fb17 	bl	80015c4 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000f96:	f107 030e 	add.w	r3, r7, #14
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2122      	movs	r1, #34	; 0x22
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fb10 	bl	80015c4 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	121b      	asrs	r3, r3, #8
 8000fb4:	b25a      	sxtb	r2, r3
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	b25b      	sxtb	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	f023 0320 	bic.w	r3, r3, #32
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000fd8:	f107 030f 	add.w	r3, r7, #15
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2130      	movs	r1, #48	; 0x30
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fab3 	bl	800154c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000fe6:	f107 030e 	add.w	r3, r7, #14
 8000fea:	2201      	movs	r2, #1
 8000fec:	2122      	movs	r1, #34	; 0x22
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 faac 	bl	800154c <GYRO_IO_Write>
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001006:	f107 030f 	add.w	r3, r7, #15
 800100a:	2201      	movs	r2, #1
 800100c:	2122      	movs	r1, #34	; 0x22
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fad8 	bl	80015c4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10a      	bne.n	8001030 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001020:	b2db      	uxtb	r3, r3
 8001022:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800102a:	b2db      	uxtb	r3, r3
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e00c      	b.n	800104a <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d109      	bne.n	800104a <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	f023 0308 	bic.w	r3, r3, #8
 800103c:	b2db      	uxtb	r3, r3
 800103e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	b2db      	uxtb	r3, r3
 8001048:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800104a:	f107 030f 	add.w	r3, r7, #15
 800104e:	2201      	movs	r2, #1
 8001050:	2122      	movs	r1, #34	; 0x22
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fa7a 	bl	800154c <GYRO_IO_Write>
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800106a:	f107 030f 	add.w	r3, r7, #15
 800106e:	2201      	movs	r2, #1
 8001070:	2122      	movs	r1, #34	; 0x22
 8001072:	4618      	mov	r0, r3
 8001074:	f000 faa6 	bl	80015c4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d107      	bne.n	800108e <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001084:	b2db      	uxtb	r3, r3
 8001086:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e009      	b.n	80010a2 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d106      	bne.n	80010a2 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	f023 0308 	bic.w	r3, r3, #8
 800109a:	b2db      	uxtb	r3, r3
 800109c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80010a2:	f107 030f 	add.w	r3, r7, #15
 80010a6:	2201      	movs	r2, #1
 80010a8:	2122      	movs	r1, #34	; 0x22
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fa4e 	bl	800154c <GYRO_IO_Write>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80010c2:	f107 030f 	add.w	r3, r7, #15
 80010c6:	2201      	movs	r2, #1
 80010c8:	2121      	movs	r1, #33	; 0x21
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 fa7a 	bl	80015c4 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	4313      	orrs	r3, r2
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80010e4:	f107 030f 	add.w	r3, r7, #15
 80010e8:	2201      	movs	r2, #1
 80010ea:	2121      	movs	r1, #33	; 0x21
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fa2d 	bl	800154c <GYRO_IO_Write>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001104:	f107 030f 	add.w	r3, r7, #15
 8001108:	2201      	movs	r2, #1
 800110a:	2124      	movs	r1, #36	; 0x24
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fa59 	bl	80015c4 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	f023 0310 	bic.w	r3, r3, #16
 8001118:	b2db      	uxtb	r3, r3
 800111a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	4313      	orrs	r3, r2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001126:	f107 030f 	add.w	r3, r7, #15
 800112a:	2201      	movs	r2, #1
 800112c:	2124      	movs	r1, #36	; 0x24
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fa0c 	bl	800154c <GYRO_IO_Write>
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001166:	f107 030f 	add.w	r3, r7, #15
 800116a:	2201      	movs	r2, #1
 800116c:	2123      	movs	r1, #35	; 0x23
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fa28 	bl	80015c4 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001174:	f107 0318 	add.w	r3, r7, #24
 8001178:	2206      	movs	r2, #6
 800117a:	2128      	movs	r1, #40	; 0x28
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fa21 	bl	80015c4 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001188:	2b00      	cmp	r3, #0
 800118a:	d126      	bne.n	80011da <L3GD20_ReadXYZAngRate+0x9e>
  {
    for(i=0; i<3; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	e01f      	b.n	80011d2 <L3GD20_ReadXYZAngRate+0x96>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	3301      	adds	r3, #1
 8001198:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800119c:	4413      	add	r3, r2
 800119e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011b0:	440b      	add	r3, r1
 80011b2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4413      	add	r3, r2
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b21a      	sxth	r2, r3
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011c6:	440b      	add	r3, r1
 80011c8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	3301      	adds	r3, #1
 80011d0:	623b      	str	r3, [r7, #32]
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	dddc      	ble.n	8001192 <L3GD20_ReadXYZAngRate+0x56>
 80011d8:	e025      	b.n	8001226 <L3GD20_ReadXYZAngRate+0xea>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80011da:	2300      	movs	r3, #0
 80011dc:	623b      	str	r3, [r7, #32]
 80011de:	e01f      	b.n	8001220 <L3GD20_ReadXYZAngRate+0xe4>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011e8:	4413      	add	r3, r2
 80011ea:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	3301      	adds	r3, #1
 80011fa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011fe:	440b      	add	r3, r1
 8001200:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001204:	b29b      	uxth	r3, r3
 8001206:	4413      	add	r3, r2
 8001208:	b29b      	uxth	r3, r3
 800120a:	b21a      	sxth	r2, r3
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001214:	440b      	add	r3, r1
 8001216:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	3301      	adds	r3, #1
 800121e:	623b      	str	r3, [r7, #32]
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	2b02      	cmp	r3, #2
 8001224:	dddc      	ble.n	80011e0 <L3GD20_ReadXYZAngRate+0xa4>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800122c:	2b10      	cmp	r3, #16
 800122e:	d006      	beq.n	800123e <L3GD20_ReadXYZAngRate+0x102>
 8001230:	2b20      	cmp	r3, #32
 8001232:	d007      	beq.n	8001244 <L3GD20_ReadXYZAngRate+0x108>
 8001234:	2b00      	cmp	r3, #0
 8001236:	d108      	bne.n	800124a <L3GD20_ReadXYZAngRate+0x10e>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <L3GD20_ReadXYZAngRate+0x154>)
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800123c:	e005      	b.n	800124a <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <L3GD20_ReadXYZAngRate+0x158>)
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001242:	e002      	b.n	800124a <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <L3GD20_ReadXYZAngRate+0x15c>)
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001248:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
 800124e:	e017      	b.n	8001280 <L3GD20_ReadXYZAngRate+0x144>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001258:	4413      	add	r3, r2
 800125a:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001276:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	3301      	adds	r3, #1
 800127e:	623b      	str	r3, [r7, #32]
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	2b02      	cmp	r3, #2
 8001284:	dde4      	ble.n	8001250 <L3GD20_ReadXYZAngRate+0x114>
  }
}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	410c0000 	.word	0x410c0000
 8001294:	418c0000 	.word	0x418c0000
 8001298:	428c0000 	.word	0x428c0000

0800129c <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80012a0:	481a      	ldr	r0, [pc, #104]	; (800130c <SPIx_Init+0x70>)
 80012a2:	f003 fdbe 	bl	8004e22 <HAL_SPI_GetState>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d12c      	bne.n	8001306 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <SPIx_Init+0x70>)
 80012ae:	4a18      	ldr	r2, [pc, #96]	; (8001310 <SPIx_Init+0x74>)
 80012b0:	601a      	str	r2, [r3, #0]
    /* SPI baudrate is set to 10 MHz (PCLK1/SPI_BaudRatePrescaler = 80/8 = 10 MHz)
      to verify these constraints:
      lsm303c SPI interface max baudrate is 10MHz for write/read
      PCLK1 max frequency is set to 80 MHz
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <SPIx_Init+0x70>)
 80012b4:	2210      	movs	r2, #16
 80012b6:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <SPIx_Init+0x70>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <SPIx_Init+0x70>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <SPIx_Init+0x70>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <SPIx_Init+0x70>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <SPIx_Init+0x70>)
 80012d2:	2207      	movs	r2, #7
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <SPIx_Init+0x70>)
 80012d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012dc:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <SPIx_Init+0x70>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <SPIx_Init+0x70>)
 80012e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ea:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <SPIx_Init+0x70>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <SPIx_Init+0x70>)
 80012f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f8:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80012fa:	4804      	ldr	r0, [pc, #16]	; (800130c <SPIx_Init+0x70>)
 80012fc:	f000 f80a 	bl	8001314 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <SPIx_Init+0x70>)
 8001302:	f003 fd04 	bl	8004d0e <HAL_SPI_Init>
  }
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200000d4 	.word	0x200000d4
 8001310:	40003800 	.word	0x40003800

08001314 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <SPIx_MspInit+0x60>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001320:	4a14      	ldr	r2, [pc, #80]	; (8001374 <SPIx_MspInit+0x60>)
 8001322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001326:	6593      	str	r3, [r2, #88]	; 0x58
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <SPIx_MspInit+0x60>)
 800132a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]

  /* enable SPIx gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <SPIx_MspInit+0x60>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <SPIx_MspInit+0x60>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <SPIx_MspInit+0x60>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800134c:	231a      	movs	r3, #26
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; // GPIO_PULLDOWN;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001358:	2302      	movs	r3, #2
 800135a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800135c:	2305      	movs	r3, #5
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4804      	ldr	r0, [pc, #16]	; (8001378 <SPIx_MspInit+0x64>)
 8001368:	f001 fdfc 	bl	8002f64 <HAL_GPIO_Init>
}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	48000c00 	.word	0x48000c00

0800137c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval none.
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte;

  /* Enable the SPI */
  __HAL_SPI_ENABLE(&SpiHandle);
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <SPIx_WriteRead+0x8c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <SPIx_WriteRead+0x8c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001394:	601a      	str	r2, [r3, #0]
  /* check TXE flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8001396:	bf00      	nop
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <SPIx_WriteRead+0x8c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d1f8      	bne.n	8001398 <SPIx_WriteRead+0x1c>

  /* Write the data */
  *((__IO uint8_t *)&SpiHandle.Instance->DR) = Byte;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <SPIx_WriteRead+0x8c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	330c      	adds	r3, #12
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	701a      	strb	r2, [r3, #0]

  while ((SpiHandle.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 80013b0:	bf00      	nop
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <SPIx_WriteRead+0x8c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d1f8      	bne.n	80013b2 <SPIx_WriteRead+0x36>
  receivedbyte = *((__IO uint8_t *)&SpiHandle.Instance->DR);
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <SPIx_WriteRead+0x8c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	330c      	adds	r3, #12
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	73fb      	strb	r3, [r7, #15]

  /* Wait BSY flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 80013ca:	bf00      	nop
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <SPIx_WriteRead+0x8c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f8      	bne.n	80013cc <SPIx_WriteRead+0x50>
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 80013da:	bf00      	nop
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <SPIx_WriteRead+0x8c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e6:	2b80      	cmp	r3, #128	; 0x80
 80013e8:	d0f8      	beq.n	80013dc <SPIx_WriteRead+0x60>

  /* disable the SPI */
  __HAL_SPI_DISABLE(&SpiHandle);
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <SPIx_WriteRead+0x8c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SPIx_WriteRead+0x8c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013f8:	601a      	str	r2, [r3, #0]

  return receivedbyte;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	200000d4 	.word	0x200000d4

0800140c <GYRO_IO_Init>:
/**
  * @brief  Configures the GYRO SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0

  /* Case GYRO not used in the demonstration software except being set in
     low power mode.
     To avoid access conflicts with accelerometer and magnetometer,
     initialize  XL_CS and MAG_CS pins then deselect these I/O */
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8001412:	4b49      	ldr	r3, [pc, #292]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a48      	ldr	r2, [pc, #288]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b46      	ldr	r3, [pc, #280]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 800142a:	2301      	movs	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	483e      	ldr	r0, [pc, #248]	; (800153c <GYRO_IO_Init+0x130>)
 8001442:	f001 fd8f 	bl	8002f64 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  ACCELERO_CS_HIGH();
 8001446:	2201      	movs	r2, #1
 8001448:	2101      	movs	r1, #1
 800144a:	483c      	ldr	r0, [pc, #240]	; (800153c <GYRO_IO_Init+0x130>)
 800144c:	f001 ff32 	bl	80032b4 <HAL_GPIO_WritePin>

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  MAGNETO_CS_GPIO_CLK_ENABLE();
 8001450:	4b39      	ldr	r3, [pc, #228]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001454:	4a38      	ldr	r2, [pc, #224]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145c:	4b36      	ldr	r3, [pc, #216]	; (8001538 <GYRO_IO_Init+0x12c>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStructure.Pin = MAGNETO_CS_PIN;
 8001468:	2301      	movs	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAGNETO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4830      	ldr	r0, [pc, #192]	; (8001540 <GYRO_IO_Init+0x134>)
 8001480:	f001 fd70 	bl	8002f64 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  MAGNETO_CS_HIGH();
 8001484:	2201      	movs	r2, #1
 8001486:	2101      	movs	r1, #1
 8001488:	482d      	ldr	r0, [pc, #180]	; (8001540 <GYRO_IO_Init+0x134>)
 800148a:	f001 ff13 	bl	80032b4 <HAL_GPIO_WritePin>


  /* Configure the Gyroscope Control pins ---------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 800148e:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a29      	ldr	r2, [pc, #164]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <GYRO_IO_Init+0x12c>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4821      	ldr	r0, [pc, #132]	; (8001544 <GYRO_IO_Init+0x138>)
 80014be:	f001 fd51 	bl	8002f64 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80014c2:	2201      	movs	r2, #1
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	481f      	ldr	r0, [pc, #124]	; (8001544 <GYRO_IO_Init+0x138>)
 80014c8:	f001 fef4 	bl	80032b4 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT1_GPIO_CLK_ENABLE();
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <GYRO_IO_Init+0x12c>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <GYRO_IO_Init+0x12c>)
 80014d2:	f043 0308 	orr.w	r3, r3, #8
 80014d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <GYRO_IO_Init+0x12c>)
 80014da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN;
 80014e4:	2304      	movs	r3, #4
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT1_GPIO_PORT, &GPIO_InitStructure);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4812      	ldr	r0, [pc, #72]	; (8001544 <GYRO_IO_Init+0x138>)
 80014fc:	f001 fd32 	bl	8002f64 <HAL_GPIO_Init>

  GYRO_INT2_GPIO_CLK_ENABLE();
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <GYRO_IO_Init+0x12c>)
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <GYRO_IO_Init+0x12c>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = GYRO_INT2_PIN;
 8001518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT2_GPIO_PORT, &GPIO_InitStructure);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4808      	ldr	r0, [pc, #32]	; (8001548 <GYRO_IO_Init+0x13c>)
 8001526:	f001 fd1d 	bl	8002f64 <HAL_GPIO_Init>

  SPIx_Init();
 800152a:	f7ff feb7 	bl	800129c <SPIx_Init>

}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	48001000 	.word	0x48001000
 8001540:	48000800 	.word	0x48000800
 8001544:	48000c00 	.word	0x48000c00
 8001548:	48000400 	.word	0x48000400

0800154c <GYRO_IO_Write>:
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
 8001558:	4613      	mov	r3, r2
 800155a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 800155c:	883b      	ldrh	r3, [r7, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d903      	bls.n	800156a <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001568:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800156a:	2200      	movs	r2, #0
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	4813      	ldr	r0, [pc, #76]	; (80015bc <GYRO_IO_Write+0x70>)
 8001570:	f001 fea0 	bl	80032b4 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <GYRO_IO_Write+0x74>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <GYRO_IO_Write+0x74>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8001582:	601a      	str	r2, [r3, #0]

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fef8 	bl	800137c <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 800158c:	e00a      	b.n	80015a4 <GYRO_IO_Write+0x58>
  {
    SPIx_WriteRead(*pBuffer);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fef2 	bl	800137c <SPIx_WriteRead>
    NumByteToWrite--;
 8001598:	883b      	ldrh	r3, [r7, #0]
 800159a:	3b01      	subs	r3, #1
 800159c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3301      	adds	r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 80015a4:	883b      	ldrh	r3, [r7, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f1      	bne.n	800158e <GYRO_IO_Write+0x42>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 80015aa:	2201      	movs	r2, #1
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	4803      	ldr	r0, [pc, #12]	; (80015bc <GYRO_IO_Write+0x70>)
 80015b0:	f001 fe80 	bl	80032b4 <HAL_GPIO_WritePin>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	48000c00 	.word	0x48000c00
 80015c0:	200000d4 	.word	0x200000d4

080015c4 <GYRO_IO_Read>:
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
 80015d0:	4613      	mov	r3, r2
 80015d2:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 80015d4:	883b      	ldrh	r3, [r7, #0]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d904      	bls.n	80015e4 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80015e0:	70fb      	strb	r3, [r7, #3]
 80015e2:	e003      	b.n	80015ec <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ea:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80015ec:	2200      	movs	r2, #0
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	4814      	ldr	r0, [pc, #80]	; (8001644 <GYRO_IO_Read+0x80>)
 80015f2:	f001 fe5f 	bl	80032b4 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <GYRO_IO_Read+0x84>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <GYRO_IO_Read+0x84>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8001604:	601a      	str	r2, [r3, #0]
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff feb7 	bl	800137c <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 800160e:	e00c      	b.n	800162a <GYRO_IO_Read+0x66>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(0x00);
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff feb3 	bl	800137c <SPIx_WriteRead>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800161e:	883b      	ldrh	r3, [r7, #0]
 8001620:	3b01      	subs	r3, #1
 8001622:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3301      	adds	r3, #1
 8001628:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 800162a:	883b      	ldrh	r3, [r7, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1ef      	bne.n	8001610 <GYRO_IO_Read+0x4c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001630:	2201      	movs	r2, #1
 8001632:	2180      	movs	r1, #128	; 0x80
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <GYRO_IO_Read+0x80>)
 8001636:	f001 fe3d 	bl	80032b4 <HAL_GPIO_WritePin>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	48000c00 	.word	0x48000c00
 8001648:	200000d4 	.word	0x200000d4

0800164c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001656:	2300      	movs	r3, #0
 8001658:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure = {0, 0};
 800165a:	2300      	movs	r3, #0
 800165c:	703b      	strb	r3, [r7, #0]
 800165e:	2300      	movs	r3, #0
 8001660:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <BSP_GYRO_Init+0xcc>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4798      	blx	r3
 8001668:	4603      	mov	r3, r0
 800166a:	2bd4      	cmp	r3, #212	; 0xd4
 800166c:	d005      	beq.n	800167a <BSP_GYRO_Init+0x2e>
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <BSP_GYRO_Init+0xcc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4798      	blx	r3
 8001674:	4603      	mov	r3, r0
 8001676:	2bd5      	cmp	r3, #213	; 0xd5
 8001678:	d146      	bne.n	8001708 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800167a:	4b28      	ldr	r3, [pc, #160]	; (800171c <BSP_GYRO_Init+0xd0>)
 800167c:	4a26      	ldr	r2, [pc, #152]	; (8001718 <BSP_GYRO_Init+0xcc>)
 800167e:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8001680:	2308      	movs	r3, #8
 8001682:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8001684:	2300      	movs	r3, #0
 8001686:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8001688:	2307      	movs	r3, #7
 800168a:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 800168c:	2330      	movs	r3, #48	; 0x30
 800168e:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001690:	2300      	movs	r3, #0
 8001692:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8001694:	2300      	movs	r3, #0
 8001696:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500;
 8001698:	2310      	movs	r3, #16
 800169a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 800169c:	793a      	ldrb	r2, [r7, #4]
 800169e:	797b      	ldrb	r3, [r7, #5]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 80016a4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 80016b2:	7a3a      	ldrb	r2, [r7, #8]
 80016b4:	7a7b      	ldrb	r3, [r7, #9]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b2da      	uxtb	r2, r3
                        L3GD20_InitStructure.Full_Scale) << 8);
 80016ba:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 80016bc:	4313      	orrs	r3, r2
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	89bb      	ldrh	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <BSP_GYRO_Init+0xd0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	89ba      	ldrh	r2, [r7, #12]
 80016d4:	4610      	mov	r0, r2
 80016d6:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 80016d8:	2300      	movs	r3, #0
 80016da:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80016dc:	2300      	movs	r3, #0
 80016de:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 80016e0:	783a      	ldrb	r2, [r7, #0]
                      L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 80016e2:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	81bb      	strh	r3, [r7, #12]

    /* Configure component filter */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <BSP_GYRO_Init+0xd0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	89ba      	ldrh	r2, [r7, #12]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	4610      	mov	r0, r2
 80016f6:	4798      	blx	r3

    /* Enable component filter */
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <BSP_GYRO_Init+0xd0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	2010      	movs	r0, #16
 8001700:	4798      	blx	r3

    ret = GYRO_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e001      	b.n	800170c <BSP_GYRO_Init+0xc0>
  }
  else
  {
    ret = GYRO_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000000 	.word	0x20000000
 800171c:	20000138 	.word	0x20000138

08001720 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <BSP_GYRO_GetXYZ+0x24>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	2b00      	cmp	r3, #0
 8001730:	d004      	beq.n	800173c <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <BSP_GYRO_GetXYZ+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	4798      	blx	r3
  }
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000138 	.word	0x20000138

08001748 <noiseFilter>:
	if (num1 > num2){
		return num1;
	} else return num2;
}

int noiseFilter(int rawValue, int noiseLevel){
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	if (abs(rawValue) >= noiseLevel){
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	bfb8      	it	lt
 8001758:	425b      	neglt	r3, r3
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	dc01      	bgt.n	8001764 <noiseFilter+0x1c>
		return rawValue;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	e000      	b.n	8001766 <noiseFilter+0x1e>
	} else return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <returnPosChar>:

char* returnPosChar(int index){
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

	pos_char_string[1] = '\0';
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <returnPosChar+0x28>)
 800177e:	2200      	movs	r2, #0
 8001780:	705a      	strb	r2, [r3, #1]

	pos_char_string[0] = pos_chars[index];
 8001782:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <returnPosChar+0x2c>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4413      	add	r3, r2
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <returnPosChar+0x28>)
 800178c:	701a      	strb	r2, [r3, #0]
	return pos_char_string;
 800178e:	4b03      	ldr	r3, [pc, #12]	; (800179c <returnPosChar+0x28>)

}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	20001a28 	.word	0x20001a28
 80017a0:	080098a4 	.word	0x080098a4

080017a4 <isXPositionOccupied>:

int isXPositionOccupied(int index){
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < TRAIL_LENGTH; i++){
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e00d      	b.n	80017ce <isXPositionOccupied+0x2a>
		if(index == (ROWS_DISPLAY - positions[i].x + 1)){
 80017b2:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <isXPositionOccupied+0x40>)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80017ba:	f1c3 0316 	rsb	r3, r3, #22
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d101      	bne.n	80017c8 <isXPositionOccupied+0x24>
			return i;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	e007      	b.n	80017d8 <isXPositionOccupied+0x34>
	for(int i = 0; i < TRAIL_LENGTH; i++){
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3301      	adds	r3, #1
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	ddee      	ble.n	80017b2 <isXPositionOccupied+0xe>
		}
	}

	return -1;
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	20001be8 	.word	0x20001be8

080017e8 <isXZPositionOccupied>:

int isXZPositionOccupied(int x, int z){
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]

	for(int i = 0; i < TRAIL_LENGTH; i++){
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	e015      	b.n	8001824 <isXZPositionOccupied+0x3c>
		if((ROWS_DISPLAY - positions[i].x + 1) == x && positions[i].z == z){
 80017f8:	4a10      	ldr	r2, [pc, #64]	; (800183c <isXZPositionOccupied+0x54>)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001800:	f1c3 0316 	rsb	r3, r3, #22
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	d109      	bne.n	800181e <isXZPositionOccupied+0x36>
 800180a:	4a0c      	ldr	r2, [pc, #48]	; (800183c <isXZPositionOccupied+0x54>)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4413      	add	r3, r2
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d101      	bne.n	800181e <isXZPositionOccupied+0x36>
			return i;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	e007      	b.n	800182e <isXZPositionOccupied+0x46>
	for(int i = 0; i < TRAIL_LENGTH; i++){
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3301      	adds	r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b03      	cmp	r3, #3
 8001828:	dde6      	ble.n	80017f8 <isXZPositionOccupied+0x10>
		}
	}

	return -1;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20001be8 	.word	0x20001be8

08001840 <calcDistance>:

double calcDistance(struct Position p1, struct Position p2){
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	f107 0408 	add.w	r4, r7, #8
 800184a:	e884 0003 	stmia.w	r4, {r0, r1}
 800184e:	4639      	mov	r1, r7
 8001850:	e881 000c 	stmia.w	r1, {r2, r3}
	return sqrt((p1.x - p2.x)*(p1.x - p2.x) + (p1.z - p2.z)*(p1.z - p2.z));
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68b9      	ldr	r1, [r7, #8]
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	1a8a      	subs	r2, r1, r2
 8001860:	fb02 f203 	mul.w	r2, r2, r3
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	1acb      	subs	r3, r1, r3
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	1a41      	subs	r1, r0, r1
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	4413      	add	r3, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe54 	bl	8000524 <__aeabi_i2d>
 800187c:	4603      	mov	r3, r0
 800187e:	460c      	mov	r4, r1
 8001880:	ec44 3b10 	vmov	d0, r3, r4
 8001884:	f007 fe4c 	bl	8009520 <sqrt>
 8001888:	eeb0 7a40 	vmov.f32	s14, s0
 800188c:	eef0 7a60 	vmov.f32	s15, s1
}
 8001890:	eeb0 0a47 	vmov.f32	s0, s14
 8001894:	eef0 0a67 	vmov.f32	s1, s15
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bd90      	pop	{r4, r7, pc}
	...

080018a0 <generateTargetPosition>:

void generateTargetPosition(void){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
	//int x_rand, z_rand;
	//generate random position
	struct Position rand;

	HAL_RNG_GenerateRandomNumber(&hrng, &rand.x);
 80018a6:	463b      	mov	r3, r7
 80018a8:	4619      	mov	r1, r3
 80018aa:	486e      	ldr	r0, [pc, #440]	; (8001a64 <generateTargetPosition+0x1c4>)
 80018ac:	f003 f9e0 	bl	8004c70 <HAL_RNG_GenerateRandomNumber>
	HAL_RNG_GenerateRandomNumber(&hrng, &rand.z);
 80018b0:	463b      	mov	r3, r7
 80018b2:	3304      	adds	r3, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	486b      	ldr	r0, [pc, #428]	; (8001a64 <generateTargetPosition+0x1c4>)
 80018b8:	f003 f9da 	bl	8004c70 <HAL_RNG_GenerateRandomNumber>

	rand.x = (abs(rand.x) % ROWS_DISPLAY) + 1;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80018c2:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80018c6:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <generateTargetPosition+0x1c8>)
 80018c8:	fb83 2301 	smull	r2, r3, r3, r1
 80018cc:	109a      	asrs	r2, r3, #2
 80018ce:	17cb      	asrs	r3, r1, #31
 80018d0:	1ad2      	subs	r2, r2, r3
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	00da      	lsls	r2, r3, #3
 80018da:	1ad2      	subs	r2, r2, r3
 80018dc:	1a8a      	subs	r2, r1, r2
 80018de:	1c53      	adds	r3, r2, #1
 80018e0:	603b      	str	r3, [r7, #0]
	rand.z = (abs(rand.z) % COLS_DISPLAY) + 1;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80018e8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80018ec:	4b5f      	ldr	r3, [pc, #380]	; (8001a6c <generateTargetPosition+0x1cc>)
 80018ee:	fb83 2301 	smull	r2, r3, r3, r1
 80018f2:	111a      	asrs	r2, r3, #4
 80018f4:	17cb      	asrs	r3, r1, #31
 80018f6:	1ad2      	subs	r2, r2, r3
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4413      	add	r3, r2
 8001902:	1aca      	subs	r2, r1, r3
 8001904:	1c53      	adds	r3, r2, #1
 8001906:	607b      	str	r3, [r7, #4]

	//first time generating?
	if(targetNotGenerated){
 8001908:	4b59      	ldr	r3, [pc, #356]	; (8001a70 <generateTargetPosition+0x1d0>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d053      	beq.n	80019b8 <generateTargetPosition+0x118>
		while(calcDistance(rand, positions[0]) <= 10.0){
 8001910:	e030      	b.n	8001974 <generateTargetPosition+0xd4>
			HAL_RNG_GenerateRandomNumber(&hrng, &rand.x);
 8001912:	463b      	mov	r3, r7
 8001914:	4619      	mov	r1, r3
 8001916:	4853      	ldr	r0, [pc, #332]	; (8001a64 <generateTargetPosition+0x1c4>)
 8001918:	f003 f9aa 	bl	8004c70 <HAL_RNG_GenerateRandomNumber>
			HAL_RNG_GenerateRandomNumber(&hrng, &rand.z);
 800191c:	463b      	mov	r3, r7
 800191e:	3304      	adds	r3, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4850      	ldr	r0, [pc, #320]	; (8001a64 <generateTargetPosition+0x1c4>)
 8001924:	f003 f9a4 	bl	8004c70 <HAL_RNG_GenerateRandomNumber>

			rand.x = (abs(rand.x) % ROWS_DISPLAY) + 1;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800192e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001932:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <generateTargetPosition+0x1c8>)
 8001934:	fb83 2301 	smull	r2, r3, r3, r1
 8001938:	109a      	asrs	r2, r3, #2
 800193a:	17cb      	asrs	r3, r1, #31
 800193c:	1ad2      	subs	r2, r2, r3
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	00da      	lsls	r2, r3, #3
 8001946:	1ad2      	subs	r2, r2, r3
 8001948:	1a8a      	subs	r2, r1, r2
 800194a:	1c53      	adds	r3, r2, #1
 800194c:	603b      	str	r3, [r7, #0]
			rand.z = (abs(rand.z) % COLS_DISPLAY) + 1;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001954:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001958:	4b44      	ldr	r3, [pc, #272]	; (8001a6c <generateTargetPosition+0x1cc>)
 800195a:	fb83 2301 	smull	r2, r3, r3, r1
 800195e:	111a      	asrs	r2, r3, #4
 8001960:	17cb      	asrs	r3, r1, #31
 8001962:	1ad2      	subs	r2, r2, r3
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	1aca      	subs	r2, r1, r3
 8001970:	1c53      	adds	r3, r2, #1
 8001972:	607b      	str	r3, [r7, #4]
		while(calcDistance(rand, positions[0]) <= 10.0){
 8001974:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <generateTargetPosition+0x1d4>)
 8001976:	cb0c      	ldmia	r3, {r2, r3}
 8001978:	4639      	mov	r1, r7
 800197a:	c903      	ldmia	r1, {r0, r1}
 800197c:	f7ff ff60 	bl	8001840 <calcDistance>
 8001980:	ec51 0b10 	vmov	r0, r1, d0
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <generateTargetPosition+0x1d8>)
 800198a:	f7ff f8b1 	bl	8000af0 <__aeabi_dcmple>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1be      	bne.n	8001912 <generateTargetPosition+0x72>
		}

		targetPositions[1] = rand;
 8001994:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <generateTargetPosition+0x1dc>)
 8001996:	3308      	adds	r3, #8
 8001998:	463a      	mov	r2, r7
 800199a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800199e:	e883 0003 	stmia.w	r3, {r0, r1}
		targetPositions[0] = targetPositions[1];
 80019a2:	4a36      	ldr	r2, [pc, #216]	; (8001a7c <generateTargetPosition+0x1dc>)
 80019a4:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <generateTargetPosition+0x1dc>)
 80019a6:	3308      	adds	r3, #8
 80019a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019ac:	e882 0003 	stmia.w	r2, {r0, r1}
		targetNotGenerated = false;
 80019b0:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <generateTargetPosition+0x1d0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]

		}

		targetPositions[0] = rand;
	}
}
 80019b6:	e050      	b.n	8001a5a <generateTargetPosition+0x1ba>
		targetPositions[1] = targetPositions[0];
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <generateTargetPosition+0x1dc>)
 80019ba:	4a30      	ldr	r2, [pc, #192]	; (8001a7c <generateTargetPosition+0x1dc>)
 80019bc:	3308      	adds	r3, #8
 80019be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019c2:	e883 0003 	stmia.w	r3, {r0, r1}
		while(calcDistance(rand, targetPositions[1]) <= 10.0){
 80019c6:	e030      	b.n	8001a2a <generateTargetPosition+0x18a>
			HAL_RNG_GenerateRandomNumber(&hrng, &rand.x);
 80019c8:	463b      	mov	r3, r7
 80019ca:	4619      	mov	r1, r3
 80019cc:	4825      	ldr	r0, [pc, #148]	; (8001a64 <generateTargetPosition+0x1c4>)
 80019ce:	f003 f94f 	bl	8004c70 <HAL_RNG_GenerateRandomNumber>
			HAL_RNG_GenerateRandomNumber(&hrng, &rand.z);
 80019d2:	463b      	mov	r3, r7
 80019d4:	3304      	adds	r3, #4
 80019d6:	4619      	mov	r1, r3
 80019d8:	4822      	ldr	r0, [pc, #136]	; (8001a64 <generateTargetPosition+0x1c4>)
 80019da:	f003 f949 	bl	8004c70 <HAL_RNG_GenerateRandomNumber>
			rand.x = (abs(rand.x) % ROWS_DISPLAY) + 1;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80019e4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <generateTargetPosition+0x1c8>)
 80019ea:	fb83 2301 	smull	r2, r3, r3, r1
 80019ee:	109a      	asrs	r2, r3, #2
 80019f0:	17cb      	asrs	r3, r1, #31
 80019f2:	1ad2      	subs	r2, r2, r3
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	00da      	lsls	r2, r3, #3
 80019fc:	1ad2      	subs	r2, r2, r3
 80019fe:	1a8a      	subs	r2, r1, r2
 8001a00:	1c53      	adds	r3, r2, #1
 8001a02:	603b      	str	r3, [r7, #0]
			rand.z = (abs(rand.z) % COLS_DISPLAY) + 1;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001a0a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <generateTargetPosition+0x1cc>)
 8001a10:	fb83 2301 	smull	r2, r3, r3, r1
 8001a14:	111a      	asrs	r2, r3, #4
 8001a16:	17cb      	asrs	r3, r1, #31
 8001a18:	1ad2      	subs	r2, r2, r3
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	1aca      	subs	r2, r1, r3
 8001a26:	1c53      	adds	r3, r2, #1
 8001a28:	607b      	str	r3, [r7, #4]
		while(calcDistance(rand, targetPositions[1]) <= 10.0){
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <generateTargetPosition+0x1dc>)
 8001a2c:	3308      	adds	r3, #8
 8001a2e:	cb0c      	ldmia	r3, {r2, r3}
 8001a30:	4639      	mov	r1, r7
 8001a32:	c903      	ldmia	r1, {r0, r1}
 8001a34:	f7ff ff04 	bl	8001840 <calcDistance>
 8001a38:	ec51 0b10 	vmov	r0, r1, d0
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <generateTargetPosition+0x1d8>)
 8001a42:	f7ff f855 	bl	8000af0 <__aeabi_dcmple>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1bd      	bne.n	80019c8 <generateTargetPosition+0x128>
		targetPositions[0] = rand;
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <generateTargetPosition+0x1dc>)
 8001a4e:	461a      	mov	r2, r3
 8001a50:	463b      	mov	r3, r7
 8001a52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a56:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20001b88 	.word	0x20001b88
 8001a68:	30c30c31 	.word	0x30c30c31
 8001a6c:	63e7063f 	.word	0x63e7063f
 8001a70:	20000034 	.word	0x20000034
 8001a74:	20001be8 	.word	0x20001be8
 8001a78:	40240000 	.word	0x40240000
 8001a7c:	20001c48 	.word	0x20001c48

08001a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a80:	b5b0      	push	{r4, r5, r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	center.x = (ROWS_DISPLAY / 2) + 1;
 8001a86:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <main+0x10c>)
 8001a88:	220b      	movs	r2, #11
 8001a8a:	601a      	str	r2, [r3, #0]
	center.z = (COLS_DISPLAY / 2) + 1;
 8001a8c:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <main+0x10c>)
 8001a8e:	2215      	movs	r2, #21
 8001a90:	605a      	str	r2, [r3, #4]


	for(int i = 0; i < TRAIL_LENGTH; i++){
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	e00c      	b.n	8001ab2 <main+0x32>
		positions[i] = center;
 8001a98:	4a3d      	ldr	r2, [pc, #244]	; (8001b90 <main+0x110>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	493b      	ldr	r1, [pc, #236]	; (8001b8c <main+0x10c>)
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	460a      	mov	r2, r1
 8001aa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa8:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i = 0; i < TRAIL_LENGTH; i++){
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	ddef      	ble.n	8001a98 <main+0x18>
	}

	timer = time_start;
 8001ab8:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <main+0x114>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a36      	ldr	r2, [pc, #216]	; (8001b98 <main+0x118>)
 8001abe:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac0:	f001 f930 	bl	8002d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac4:	f000 f882 	bl	8001bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ac8:	f000 fa70 	bl	8001fac <MX_GPIO_Init>
  MX_I2C1_Init();
 8001acc:	f000 f91e 	bl	8001d0c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001ad0:	f000 f95c 	bl	8001d8c <MX_I2C2_Init>
  MX_RNG_Init();
 8001ad4:	f000 f99a 	bl	8001e0c <MX_RNG_Init>
  MX_SPI2_Init();
 8001ad8:	f000 f9ac 	bl	8001e34 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001adc:	f000 fa36 	bl	8001f4c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001ae0:	f000 f9e6 	bl	8001eb0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001ae4:	482d      	ldr	r0, [pc, #180]	; (8001b9c <main+0x11c>)
 8001ae6:	f003 f9d5 	bl	8004e94 <HAL_TIM_Base_Start_IT>

  generateTargetPosition();
 8001aea:	f7ff fed9 	bl	80018a0 <generateTargetPosition>
	/* Init the uart Buffers */
	for (unsigned char i = 0; i < UART_BUFFER_SIZE; i++)  {
 8001aee:	2300      	movs	r3, #0
 8001af0:	70fb      	strb	r3, [r7, #3]
 8001af2:	e00c      	b.n	8001b0e <main+0x8e>
       gbl_uart2_transmitBuffer[i] = '0' + i;
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	78fa      	ldrb	r2, [r7, #3]
 8001af8:	3230      	adds	r2, #48	; 0x30
 8001afa:	b2d1      	uxtb	r1, r2
 8001afc:	4a28      	ldr	r2, [pc, #160]	; (8001ba0 <main+0x120>)
 8001afe:	54d1      	strb	r1, [r2, r3]
       gbl_uart2_receiveBuffer[i] = 0;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	4a28      	ldr	r2, [pc, #160]	; (8001ba4 <main+0x124>)
 8001b04:	2100      	movs	r1, #0
 8001b06:	54d1      	strb	r1, [r2, r3]
	for (unsigned char i = 0; i < UART_BUFFER_SIZE; i++)  {
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	70fb      	strb	r3, [r7, #3]
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	2b4f      	cmp	r3, #79	; 0x4f
 8001b12:	d9ef      	bls.n	8001af4 <main+0x74>
    }
	sprintf((char*)gbl_uart2_transmitBuffer,"Project Game Startup\a\n\r");
 8001b14:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <main+0x120>)
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <main+0x128>)
 8001b18:	4615      	mov	r5, r2
 8001b1a:	461c      	mov	r4, r3
 8001b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1e:	6028      	str	r0, [r5, #0]
 8001b20:	6069      	str	r1, [r5, #4]
 8001b22:	60aa      	str	r2, [r5, #8]
 8001b24:	60eb      	str	r3, [r5, #12]
 8001b26:	cc03      	ldmia	r4!, {r0, r1}
 8001b28:	6128      	str	r0, [r5, #16]
 8001b2a:	6169      	str	r1, [r5, #20]
	HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8001b2c:	481c      	ldr	r0, [pc, #112]	; (8001ba0 <main+0x120>)
 8001b2e:	f7fe fb4f 	bl	80001d0 <strlen>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	2364      	movs	r3, #100	; 0x64
 8001b38:	4919      	ldr	r1, [pc, #100]	; (8001ba0 <main+0x120>)
 8001b3a:	481c      	ldr	r0, [pc, #112]	; (8001bac <main+0x12c>)
 8001b3c:	f003 fdfc 	bl	8005738 <HAL_UART_Transmit>

	sprintf((char*)gbl_uart2_transmitBuffer,"\x1b[2J");
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <main+0x120>)
 8001b42:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <main+0x130>)
 8001b44:	6810      	ldr	r0, [r2, #0]
 8001b46:	6018      	str	r0, [r3, #0]
 8001b48:	7912      	ldrb	r2, [r2, #4]
 8001b4a:	711a      	strb	r2, [r3, #4]
	    HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8001b4c:	4814      	ldr	r0, [pc, #80]	; (8001ba0 <main+0x120>)
 8001b4e:	f7fe fb3f 	bl	80001d0 <strlen>
 8001b52:	4603      	mov	r3, r0
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	2364      	movs	r3, #100	; 0x64
 8001b58:	4911      	ldr	r1, [pc, #68]	; (8001ba0 <main+0x120>)
 8001b5a:	4814      	ldr	r0, [pc, #80]	; (8001bac <main+0x12c>)
 8001b5c:	f003 fdec 	bl	8005738 <HAL_UART_Transmit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b60:	f004 fb5a 	bl	8006218 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b64:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <main+0x134>)
 8001b66:	2100      	movs	r1, #0
 8001b68:	4813      	ldr	r0, [pc, #76]	; (8001bb8 <main+0x138>)
 8001b6a:	f004 fbbf 	bl	80062ec <osThreadNew>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <main+0x13c>)
 8001b72:	601a      	str	r2, [r3, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartTask02, NULL, &displayTask_attributes);
 8001b74:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <main+0x140>)
 8001b76:	2100      	movs	r1, #0
 8001b78:	4812      	ldr	r0, [pc, #72]	; (8001bc4 <main+0x144>)
 8001b7a:	f004 fbb7 	bl	80062ec <osThreadNew>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <main+0x148>)
 8001b82:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001b84:	f004 fb7c 	bl	8006280 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <main+0x108>
 8001b8a:	bf00      	nop
 8001b8c:	20001b80 	.word	0x20001b80
 8001b90:	20001be8 	.word	0x20001be8
 8001b94:	2000003c 	.word	0x2000003c
 8001b98:	20001a24 	.word	0x20001a24
 8001b9c:	20001c08 	.word	0x20001c08
 8001ba0:	20001b98 	.word	0x20001b98
 8001ba4:	20001b30 	.word	0x20001b30
 8001ba8:	08009768 	.word	0x08009768
 8001bac:	20001c58 	.word	0x20001c58
 8001bb0:	08009780 	.word	0x08009780
 8001bb4:	0800985c 	.word	0x0800985c
 8001bb8:	08002349 	.word	0x08002349
 8001bbc:	20001a2c 	.word	0x20001a2c
 8001bc0:	08009880 	.word	0x08009880
 8001bc4:	080023f5 	.word	0x080023f5
 8001bc8:	20001b2c 	.word	0x20001b2c

08001bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b0b8      	sub	sp, #224	; 0xe0
 8001bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bd6:	2244      	movs	r2, #68	; 0x44
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f007 f88b 	bl	8008cf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	2288      	movs	r2, #136	; 0x88
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f007 f87d 	bl	8008cf6 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001bfc:	f001 fc98 	bl	8003530 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c00:	4b40      	ldr	r3, [pc, #256]	; (8001d04 <SystemClock_Config+0x138>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c06:	4a3f      	ldr	r2, [pc, #252]	; (8001d04 <SystemClock_Config+0x138>)
 8001c08:	f023 0318 	bic.w	r3, r3, #24
 8001c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001c10:	2314      	movs	r3, #20
 8001c12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c16:	2301      	movs	r3, #1
 8001c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c28:	2360      	movs	r3, #96	; 0x60
 8001c2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c34:	2301      	movs	r3, #1
 8001c36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001c40:	2328      	movs	r3, #40	; 0x28
 8001c42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c46:	2307      	movs	r3, #7
 8001c48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c52:	2302      	movs	r3, #2
 8001c54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 fcdb 	bl	8003618 <HAL_RCC_OscConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001c68:	f000 fdd6 	bl	8002818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c72:	2303      	movs	r3, #3
 8001c74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c8a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001c8e:	2104      	movs	r1, #4
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 f8a7 	bl	8003de4 <HAL_RCC_ClockConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001c9c:	f000 fdbc 	bl	8002818 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <SystemClock_Config+0x13c>)
 8001ca2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_RNG;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001cac:	2300      	movs	r3, #0
 8001cae:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001cb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001cb4:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001cbe:	2310      	movs	r3, #16
 8001cc0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001cc2:	2307      	movs	r3, #7
 8001cc4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001cce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cd2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 faba 	bl	8004250 <HAL_RCCEx_PeriphCLKConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8001ce2:	f000 fd99 	bl	8002818 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ce6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cea:	f001 fc3f 	bl	800356c <HAL_PWREx_ControlVoltageScaling>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001cf4:	f000 fd90 	bl	8002818 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001cf8:	f002 fd90 	bl	800481c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001cfc:	bf00      	nop
 8001cfe:	37e0      	adds	r7, #224	; 0xe0
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	000400c2 	.word	0x000400c2

08001d0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d12:	4a1c      	ldr	r2, [pc, #112]	; (8001d84 <MX_I2C1_Init+0x78>)
 8001d14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d18:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <MX_I2C1_Init+0x7c>)
 8001d1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d46:	480e      	ldr	r0, [pc, #56]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d48:	f001 facc 	bl	80032e4 <HAL_I2C_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d52:	f000 fd61 	bl	8002818 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d56:	2100      	movs	r1, #0
 8001d58:	4809      	ldr	r0, [pc, #36]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d5a:	f001 fb52 	bl	8003402 <HAL_I2CEx_ConfigAnalogFilter>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d64:	f000 fd58 	bl	8002818 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d6c:	f001 fb94 	bl	8003498 <HAL_I2CEx_ConfigDigitalFilter>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d76:	f000 fd4f 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20001a94 	.word	0x20001a94
 8001d84:	40005400 	.word	0x40005400
 8001d88:	10909cec 	.word	0x10909cec

08001d8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001d92:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <MX_I2C2_Init+0x78>)
 8001d94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001d98:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <MX_I2C2_Init+0x7c>)
 8001d9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dc6:	480e      	ldr	r0, [pc, #56]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001dc8:	f001 fa8c 	bl	80032e4 <HAL_I2C_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001dd2:	f000 fd21 	bl	8002818 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4809      	ldr	r0, [pc, #36]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001dda:	f001 fb12 	bl	8003402 <HAL_I2CEx_ConfigAnalogFilter>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001de4:	f000 fd18 	bl	8002818 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001de8:	2100      	movs	r1, #0
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001dec:	f001 fb54 	bl	8003498 <HAL_I2CEx_ConfigDigitalFilter>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001df6:	f000 fd0f 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20001ae0 	.word	0x20001ae0
 8001e04:	40005800 	.word	0x40005800
 8001e08:	10909cec 	.word	0x10909cec

08001e0c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <MX_RNG_Init+0x20>)
 8001e12:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <MX_RNG_Init+0x24>)
 8001e14:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_RNG_Init+0x20>)
 8001e18:	f002 feda 	bl	8004bd0 <HAL_RNG_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001e22:	f000 fcf9 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20001b88 	.word	0x20001b88
 8001e30:	50060800 	.word	0x50060800

08001e34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <MX_SPI2_Init+0x78>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e4e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e52:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e66:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e82:	2207      	movs	r2, #7
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e8e:	2208      	movs	r2, #8
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e94:	f002 ff3b 	bl	8004d0e <HAL_SPI_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e9e:	f000 fcbb 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20001a30 	.word	0x20001a30
 8001eac:	40003800 	.word	0x40003800

08001eb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <MX_TIM2_Init+0x98>)
 8001ed0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ed4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <MX_TIM2_Init+0x98>)
 8001ed8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001edc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <MX_TIM2_Init+0x98>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <MX_TIM2_Init+0x98>)
 8001ee6:	2264      	movs	r2, #100	; 0x64
 8001ee8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <MX_TIM2_Init+0x98>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <MX_TIM2_Init+0x98>)
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ef6:	4814      	ldr	r0, [pc, #80]	; (8001f48 <MX_TIM2_Init+0x98>)
 8001ef8:	f002 ffa1 	bl	8004e3e <HAL_TIM_Base_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f02:	f000 fc89 	bl	8002818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	4619      	mov	r1, r3
 8001f12:	480d      	ldr	r0, [pc, #52]	; (8001f48 <MX_TIM2_Init+0x98>)
 8001f14:	f003 f907 	bl	8005126 <HAL_TIM_ConfigClockSource>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f1e:	f000 fc7b 	bl	8002818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4806      	ldr	r0, [pc, #24]	; (8001f48 <MX_TIM2_Init+0x98>)
 8001f30:	f003 fb0e 	bl	8005550 <HAL_TIMEx_MasterConfigSynchronization>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f3a:	f000 fc6d 	bl	8002818 <Error_Handler>
  /* USER CODE BEGIN TIM2_Init 2 */
  //HAL_NVIC_SetPriority(TIM2_IRQn,0,0);
  //HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE END TIM2_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	3720      	adds	r7, #32
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20001c08 	.word	0x20001c08

08001f4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <MX_USART2_UART_Init+0x58>)
 8001f52:	4a15      	ldr	r2, [pc, #84]	; (8001fa8 <MX_USART2_UART_Init+0x5c>)
 8001f54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <MX_USART2_UART_Init+0x58>)
 8001f58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <MX_USART2_UART_Init+0x58>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <MX_USART2_UART_Init+0x58>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <MX_USART2_UART_Init+0x58>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_USART2_UART_Init+0x58>)
 8001f72:	220c      	movs	r2, #12
 8001f74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <MX_USART2_UART_Init+0x58>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MX_USART2_UART_Init+0x58>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <MX_USART2_UART_Init+0x58>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <MX_USART2_UART_Init+0x58>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f8e:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <MX_USART2_UART_Init+0x58>)
 8001f90:	f003 fb84 	bl	800569c <HAL_UART_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f9a:	f000 fc3d 	bl	8002818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20001c58 	.word	0x20001c58
 8001fa8:	40004400 	.word	0x40004400

08001fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08c      	sub	sp, #48	; 0x30
 8001fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb2:	f107 031c 	add.w	r3, r7, #28
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
 8001fc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc2:	4bb7      	ldr	r3, [pc, #732]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	4ab6      	ldr	r2, [pc, #728]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8001fc8:	f043 0310 	orr.w	r3, r3, #16
 8001fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fce:	4bb4      	ldr	r3, [pc, #720]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fda:	4bb1      	ldr	r3, [pc, #708]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	4ab0      	ldr	r2, [pc, #704]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe6:	4bae      	ldr	r3, [pc, #696]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ff2:	4bab      	ldr	r3, [pc, #684]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	4aaa      	ldr	r2, [pc, #680]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8001ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ffe:	4ba8      	ldr	r3, [pc, #672]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800200a:	4ba5      	ldr	r3, [pc, #660]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	4aa4      	ldr	r2, [pc, #656]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002016:	4ba2      	ldr	r3, [pc, #648]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002022:	4b9f      	ldr	r3, [pc, #636]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	4a9e      	ldr	r2, [pc, #632]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202e:	4b9c      	ldr	r3, [pc, #624]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800203a:	4b99      	ldr	r3, [pc, #612]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	4a98      	ldr	r2, [pc, #608]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8002040:	f043 0308 	orr.w	r3, r3, #8
 8002044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002046:	4b96      	ldr	r3, [pc, #600]	; (80022a0 <MX_GPIO_Init+0x2f4>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	f240 1109 	movw	r1, #265	; 0x109
 8002058:	4892      	ldr	r0, [pc, #584]	; (80022a4 <MX_GPIO_Init+0x2f8>)
 800205a:	f001 f92b 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800205e:	2200      	movs	r2, #0
 8002060:	210c      	movs	r1, #12
 8002062:	4891      	ldr	r0, [pc, #580]	; (80022a8 <MX_GPIO_Init+0x2fc>)
 8002064:	f001 f926 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002068:	2201      	movs	r2, #1
 800206a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800206e:	488f      	ldr	r0, [pc, #572]	; (80022ac <MX_GPIO_Init+0x300>)
 8002070:	f001 f920 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800207a:	488c      	ldr	r0, [pc, #560]	; (80022ac <MX_GPIO_Init+0x300>)
 800207c:	f001 f91a 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8002080:	2200      	movs	r2, #0
 8002082:	2180      	movs	r1, #128	; 0x80
 8002084:	488a      	ldr	r0, [pc, #552]	; (80022b0 <MX_GPIO_Init+0x304>)
 8002086:	f001 f915 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_MCK_Pin SAI1_FS_Pin SAI1_SCK_Pin SAI1_SD_Pin 
                           AUDIO_DIN_Pin */
  GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin 
 800208a:	23f4      	movs	r3, #244	; 0xf4
 800208c:	61fb      	str	r3, [r7, #28]
                          |AUDIO_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800209a:	230d      	movs	r3, #13
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800209e:	f107 031c 	add.w	r3, r7, #28
 80020a2:	4619      	mov	r1, r3
 80020a4:	487f      	ldr	r0, [pc, #508]	; (80022a4 <MX_GPIO_Init+0x2f8>)
 80020a6:	f000 ff5d 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 80020aa:	2308      	movs	r3, #8
 80020ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b6:	2302      	movs	r3, #2
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 80020ba:	f107 031c 	add.w	r3, r7, #28
 80020be:	4619      	mov	r1, r3
 80020c0:	4878      	ldr	r0, [pc, #480]	; (80022a4 <MX_GPIO_Init+0x2f8>)
 80020c2:	f000 ff4f 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 80020c6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80020ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020cc:	4b79      	ldr	r3, [pc, #484]	; (80022b4 <MX_GPIO_Init+0x308>)
 80020ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	4619      	mov	r1, r3
 80020da:	4874      	ldr	r0, [pc, #464]	; (80022ac <MX_GPIO_Init+0x300>)
 80020dc:	f000 ff42 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 80020e0:	2307      	movs	r3, #7
 80020e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e4:	2300      	movs	r3, #0
 80020e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	4619      	mov	r1, r3
 80020f2:	486e      	ldr	r0, [pc, #440]	; (80022ac <MX_GPIO_Init+0x300>)
 80020f4:	f000 ff36 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : VLCD_Pin SEG22_Pin SEG1_Pin SEG14_Pin 
                           SEG9_Pin SEG13_Pin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 80020f8:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80020fc:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800210a:	230b      	movs	r3, #11
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	4619      	mov	r1, r3
 8002114:	4865      	ldr	r0, [pc, #404]	; (80022ac <MX_GPIO_Init+0x300>)
 8002116:	f000 ff25 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin 
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 800211a:	232f      	movs	r3, #47	; 0x2f
 800211c:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002122:	2302      	movs	r3, #2
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	f107 031c 	add.w	r3, r7, #28
 800212a:	4619      	mov	r1, r3
 800212c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002130:	f000 ff18 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8002134:	2310      	movs	r3, #16
 8002136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002138:	4b5e      	ldr	r3, [pc, #376]	; (80022b4 <MX_GPIO_Init+0x308>)
 800213a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4619      	mov	r1, r3
 8002146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214a:	f000 ff0b 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG23_Pin SEG0_Pin COM0_Pin COM1_Pin 
                           COM2_Pin SEG10_Pin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 800214e:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8002152:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002160:	230b      	movs	r3, #11
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800216e:	f000 fef9 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG21_Pin SEG2_Pin SEG20_Pin SEG3_Pin 
                           SEG19_Pin SEG4_Pin SEG11_Pin SEG12_Pin 
                           COM3_Pin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8002172:	f24f 2333 	movw	r3, #62003	; 0xf233
 8002176:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002184:	230b      	movs	r3, #11
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4619      	mov	r1, r3
 800218e:	4846      	ldr	r0, [pc, #280]	; (80022a8 <MX_GPIO_Init+0x2fc>)
 8002190:	f000 fee8 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8002194:	2304      	movs	r3, #4
 8002196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002198:	2301      	movs	r3, #1
 800219a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800219c:	2301      	movs	r3, #1
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	4619      	mov	r1, r3
 80021aa:	483f      	ldr	r0, [pc, #252]	; (80022a8 <MX_GPIO_Init+0x2fc>)
 80021ac:	f000 feda 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 80021b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b6:	2301      	movs	r3, #1
 80021b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4619      	mov	r1, r3
 80021c8:	4836      	ldr	r0, [pc, #216]	; (80022a4 <MX_GPIO_Init+0x2f8>)
 80021ca:	f000 fecb 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_CLK_Pin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 80021ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80021e0:	230d      	movs	r3, #13
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	4619      	mov	r1, r3
 80021ea:	482e      	ldr	r0, [pc, #184]	; (80022a4 <MX_GPIO_Init+0x2f8>)
 80021ec:	f000 feba 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CLK_Pin QSPI_CS_Pin QSPI_D0_Pin QSPI_D1_Pin 
                           QSPI_D2_Pin QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 80021f0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80021f4:	61fb      	str	r3, [r7, #28]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002202:	230a      	movs	r3, #10
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	4619      	mov	r1, r3
 800220c:	4825      	ldr	r0, [pc, #148]	; (80022a4 <MX_GPIO_Init+0x2f8>)
 800220e:	f000 fea9 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG18_Pin SEG5_Pin SEG17_Pin SEG6_Pin 
                           SEG16_Pin SEG7_Pin SEG15_Pin SEG8_Pin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8002212:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002216:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002220:	2300      	movs	r3, #0
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8002224:	230b      	movs	r3, #11
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002228:	f107 031c 	add.w	r3, r7, #28
 800222c:	4619      	mov	r1, r3
 800222e:	4820      	ldr	r0, [pc, #128]	; (80022b0 <MX_GPIO_Init+0x304>)
 8002230:	f000 fe98 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8002234:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223a:	2301      	movs	r3, #1
 800223c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	4619      	mov	r1, r3
 800224c:	4817      	ldr	r0, [pc, #92]	; (80022ac <MX_GPIO_Init+0x300>)
 800224e:	f000 fe89 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002252:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002264:	230a      	movs	r3, #10
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4619      	mov	r1, r3
 800226e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002272:	f000 fe77 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8002276:	2305      	movs	r3, #5
 8002278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <MX_GPIO_Init+0x308>)
 800227c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002282:	f107 031c 	add.w	r3, r7, #28
 8002286:	4619      	mov	r1, r3
 8002288:	4809      	ldr	r0, [pc, #36]	; (80022b0 <MX_GPIO_Init+0x304>)
 800228a:	f000 fe6b 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	2301      	movs	r3, #1
 8002294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229a:	2303      	movs	r3, #3
 800229c:	e00c      	b.n	80022b8 <MX_GPIO_Init+0x30c>
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	48001000 	.word	0x48001000
 80022a8:	48000400 	.word	0x48000400
 80022ac:	48000800 	.word	0x48000800
 80022b0:	48000c00 	.word	0x48000c00
 80022b4:	10120000 	.word	0x10120000
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	481d      	ldr	r0, [pc, #116]	; (8002338 <MX_GPIO_Init+0x38c>)
 80022c2:	f000 fe4f 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 80022c6:	2308      	movs	r3, #8
 80022c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ca:	2301      	movs	r3, #1
 80022cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	4817      	ldr	r0, [pc, #92]	; (800233c <MX_GPIO_Init+0x390>)
 80022de:	f000 fe41 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80022e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022e8:	4b15      	ldr	r3, [pc, #84]	; (8002340 <MX_GPIO_Init+0x394>)
 80022ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	4619      	mov	r1, r3
 80022f6:	4811      	ldr	r0, [pc, #68]	; (800233c <MX_GPIO_Init+0x390>)
 80022f8:	f000 fe34 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 80022fc:	2301      	movs	r3, #1
 80022fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002300:	2301      	movs	r3, #1
 8002302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4619      	mov	r1, r3
 8002312:	480c      	ldr	r0, [pc, #48]	; (8002344 <MX_GPIO_Init+0x398>)
 8002314:	f000 fe26 	bl	8002f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8002318:	2302      	movs	r3, #2
 800231a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <MX_GPIO_Init+0x394>)
 800231e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 031c 	add.w	r3, r7, #28
 8002328:	4619      	mov	r1, r3
 800232a:	4806      	ldr	r0, [pc, #24]	; (8002344 <MX_GPIO_Init+0x398>)
 800232c:	f000 fe1a 	bl	8002f64 <HAL_GPIO_Init>

}
 8002330:	bf00      	nop
 8002332:	3730      	adds	r7, #48	; 0x30
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	48000c00 	.word	0x48000c00
 800233c:	48000400 	.word	0x48000400
 8002340:	10120000 	.word	0x10120000
 8002344:	48001000 	.word	0x48001000

08002348 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	if(BSP_GYRO_Init() != HAL_OK)  {
 8002350:	f7ff f97c 	bl	800164c <BSP_GYRO_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <StartDefaultTask+0x16>
		    /* Initialization Error */
		Error_Handler();
 800235a:	f000 fa5d 	bl	8002818 <Error_Handler>
	}
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800235e:	2001      	movs	r0, #1
 8002360:	f004 f86a 	bl	8006438 <osDelay>

    /* Get Raw values */
    BSP_GYRO_GetXYZ(gbl_buffer);
 8002364:	481f      	ldr	r0, [pc, #124]	; (80023e4 <StartDefaultTask+0x9c>)
 8002366:	f7ff f9db 	bl	8001720 <BSP_GYRO_GetXYZ>

    //processing of data with offset and noise filter
    x_accum += noiseFilter((int32_t)gbl_buffer[0] - X_RAW_OFFSET, X_NOISE_LEVEL);
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <StartDefaultTask+0x9c>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002374:	ee17 3a90 	vmov	r3, s15
 8002378:	f2a3 7319 	subw	r3, r3, #1817	; 0x719
 800237c:	f241 2198 	movw	r1, #4760	; 0x1298
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff f9e1 	bl	8001748 <noiseFilter>
 8002386:	4602      	mov	r2, r0
 8002388:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <StartDefaultTask+0xa0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4413      	add	r3, r2
 800238e:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <StartDefaultTask+0xa0>)
 8002390:	6013      	str	r3, [r2, #0]
    y_accum += noiseFilter((int32_t)gbl_buffer[1] - Y_RAW_OFFSET, Y_NOISE_LEVEL);
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <StartDefaultTask+0x9c>)
 8002394:	edd3 7a01 	vldr	s15, [r3, #4]
 8002398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800239c:	ee17 3a90 	vmov	r3, s15
 80023a0:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80023a4:	f241 415a 	movw	r1, #5210	; 0x145a
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff f9cd 	bl	8001748 <noiseFilter>
 80023ae:	4602      	mov	r2, r0
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <StartDefaultTask+0xa4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <StartDefaultTask+0xa4>)
 80023b8:	6013      	str	r3, [r2, #0]
    z_accum += noiseFilter((int32_t)gbl_buffer[2] - Z_RAW_OFFSET, Z_NOISE_LEVEL);
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <StartDefaultTask+0x9c>)
 80023bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80023c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c4:	ee17 3a90 	vmov	r3, s15
 80023c8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80023cc:	f640 713c 	movw	r1, #3900	; 0xf3c
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff f9b9 	bl	8001748 <noiseFilter>
 80023d6:	4602      	mov	r2, r0
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <StartDefaultTask+0xa8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <StartDefaultTask+0xa8>)
 80023e0:	6013      	str	r3, [r2, #0]
    osDelay(1);
 80023e2:	e7bc      	b.n	800235e <StartDefaultTask+0x16>
 80023e4:	2000013c 	.word	0x2000013c
 80023e8:	20000148 	.word	0x20000148
 80023ec:	2000014c 	.word	0x2000014c
 80023f0:	20000150 	.word	0x20000150

080023f4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80023f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023f8:	b08c      	sub	sp, #48	; 0x30
 80023fa:	af02      	add	r7, sp, #8
 80023fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(67); //67 for 15FPS
 80023fe:	2043      	movs	r0, #67	; 0x43
 8002400:	f004 f81a 	bl	8006438 <osDelay>
    HAL_GPIO_WritePin(GPIOE, LD_G_Pin, GPIO_PIN_RESET);
 8002404:	2200      	movs	r2, #0
 8002406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800240a:	48a5      	ldr	r0, [pc, #660]	; (80026a0 <StartTask02+0x2ac>)
 800240c:	f000 ff52 	bl	80032b4 <HAL_GPIO_WritePin>
    int disp_accum_y = (int) round(((float) y_accum) / num_points);
    int disp_accum_z = (int) round(((float) z_accum) / num_points);
	*/


    if(timer > 0){
 8002410:	4ba4      	ldr	r3, [pc, #656]	; (80026a4 <StartTask02+0x2b0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f340 81af 	ble.w	8002778 <StartTask02+0x384>
		sprintf((char*)gbl_uart2_transmitBuffer,"\x1b[0;0H");
 800241a:	4ba3      	ldr	r3, [pc, #652]	; (80026a8 <StartTask02+0x2b4>)
 800241c:	4aa3      	ldr	r2, [pc, #652]	; (80026ac <StartTask02+0x2b8>)
 800241e:	6810      	ldr	r0, [r2, #0]
 8002420:	6018      	str	r0, [r3, #0]
 8002422:	8891      	ldrh	r1, [r2, #4]
 8002424:	7992      	ldrb	r2, [r2, #6]
 8002426:	8099      	strh	r1, [r3, #4]
 8002428:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 800242a:	489f      	ldr	r0, [pc, #636]	; (80026a8 <StartTask02+0x2b4>)
 800242c:	f7fd fed0 	bl	80001d0 <strlen>
 8002430:	4603      	mov	r3, r0
 8002432:	b29a      	uxth	r2, r3
 8002434:	2364      	movs	r3, #100	; 0x64
 8002436:	499c      	ldr	r1, [pc, #624]	; (80026a8 <StartTask02+0x2b4>)
 8002438:	489d      	ldr	r0, [pc, #628]	; (80026b0 <StartTask02+0x2bc>)
 800243a:	f003 f97d 	bl	8005738 <HAL_UART_Transmit>
		//ascii display

		int x_char_index;
		int z_char_index;

		int disp_accum_x = x_accum / X_ANGLE_CONV;
 800243e:	4b9d      	ldr	r3, [pc, #628]	; (80026b4 <StartTask02+0x2c0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a9d      	ldr	r2, [pc, #628]	; (80026b8 <StartTask02+0x2c4>)
 8002444:	fb82 1203 	smull	r1, r2, r2, r3
 8002448:	1492      	asrs	r2, r2, #18
 800244a:	17db      	asrs	r3, r3, #31
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
		int disp_accum_y = y_accum / Y_ANGLE_CONV;
 8002450:	4b9a      	ldr	r3, [pc, #616]	; (80026bc <StartTask02+0x2c8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a9a      	ldr	r2, [pc, #616]	; (80026c0 <StartTask02+0x2cc>)
 8002456:	fb82 1203 	smull	r1, r2, r2, r3
 800245a:	13d2      	asrs	r2, r2, #15
 800245c:	17db      	asrs	r3, r3, #31
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	617b      	str	r3, [r7, #20]
		int disp_accum_z = z_accum / Z_ANGLE_CONV;
 8002462:	4b98      	ldr	r3, [pc, #608]	; (80026c4 <StartTask02+0x2d0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a96      	ldr	r2, [pc, #600]	; (80026c0 <StartTask02+0x2cc>)
 8002468:	fb82 1203 	smull	r1, r2, r2, r3
 800246c:	13d2      	asrs	r2, r2, #15
 800246e:	17db      	asrs	r3, r3, #31
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	613b      	str	r3, [r7, #16]

		positions[0].x = center.x + (disp_accum_x * x_dot_step);
 8002474:	4b94      	ldr	r3, [pc, #592]	; (80026c8 <StartTask02+0x2d4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	ee07 3a90 	vmov	s15, r3
 800247c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	ee07 3a90 	vmov	s15, r3
 8002486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248a:	eddf 6a90 	vldr	s13, [pc, #576]	; 80026cc <StartTask02+0x2d8>
 800248e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800249a:	ee17 2a90 	vmov	r2, s15
 800249e:	4b8c      	ldr	r3, [pc, #560]	; (80026d0 <StartTask02+0x2dc>)
 80024a0:	601a      	str	r2, [r3, #0]
		positions[0].z = center.z + (disp_accum_z * z_dot_step);
 80024a2:	4b89      	ldr	r3, [pc, #548]	; (80026c8 <StartTask02+0x2d4>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	ee07 3a90 	vmov	s15, r3
 80024b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b8:	eddf 6a86 	vldr	s13, [pc, #536]	; 80026d4 <StartTask02+0x2e0>
 80024bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80024c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024c8:	ee17 2a90 	vmov	r2, s15
 80024cc:	4b80      	ldr	r3, [pc, #512]	; (80026d0 <StartTask02+0x2dc>)
 80024ce:	605a      	str	r2, [r3, #4]
		//}

		//generateTargetPosition();

		//insert level up code here
		if(calcDistance(targetPositions[0], positions[0]) < 2){
 80024d0:	4b7f      	ldr	r3, [pc, #508]	; (80026d0 <StartTask02+0x2dc>)
 80024d2:	4981      	ldr	r1, [pc, #516]	; (80026d8 <StartTask02+0x2e4>)
 80024d4:	cb0c      	ldmia	r3, {r2, r3}
 80024d6:	c903      	ldmia	r1, {r0, r1}
 80024d8:	f7ff f9b2 	bl	8001840 <calcDistance>
 80024dc:	ec51 0b10 	vmov	r0, r1, d0
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024e8:	f7fe faf8 	bl	8000adc <__aeabi_dcmplt>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d055      	beq.n	800259e <StartTask02+0x1aa>
			generateTargetPosition();
 80024f2:	f7ff f9d5 	bl	80018a0 <generateTargetPosition>

			score += level*(((double) timer)/time_start);
 80024f6:	4b79      	ldr	r3, [pc, #484]	; (80026dc <StartTask02+0x2e8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe f812 	bl	8000524 <__aeabi_i2d>
 8002500:	4604      	mov	r4, r0
 8002502:	460d      	mov	r5, r1
 8002504:	4b67      	ldr	r3, [pc, #412]	; (80026a4 <StartTask02+0x2b0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe f80b 	bl	8000524 <__aeabi_i2d>
 800250e:	4680      	mov	r8, r0
 8002510:	4689      	mov	r9, r1
 8002512:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <StartTask02+0x2ec>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe f804 	bl	8000524 <__aeabi_i2d>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4640      	mov	r0, r8
 8002522:	4649      	mov	r1, r9
 8002524:	f7fe f992 	bl	800084c <__aeabi_ddiv>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4620      	mov	r0, r4
 800252e:	4629      	mov	r1, r5
 8002530:	f7fe f862 	bl	80005f8 <__aeabi_dmul>
 8002534:	4603      	mov	r3, r0
 8002536:	460c      	mov	r4, r1
 8002538:	4625      	mov	r5, r4
 800253a:	461c      	mov	r4, r3
 800253c:	4b69      	ldr	r3, [pc, #420]	; (80026e4 <StartTask02+0x2f0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fd ffef 	bl	8000524 <__aeabi_i2d>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4620      	mov	r0, r4
 800254c:	4629      	mov	r1, r5
 800254e:	f7fd fe9d 	bl	800028c <__adddf3>
 8002552:	4603      	mov	r3, r0
 8002554:	460c      	mov	r4, r1
 8002556:	4618      	mov	r0, r3
 8002558:	4621      	mov	r1, r4
 800255a:	f7fe fafd 	bl	8000b58 <__aeabi_d2iz>
 800255e:	4602      	mov	r2, r0
 8002560:	4b60      	ldr	r3, [pc, #384]	; (80026e4 <StartTask02+0x2f0>)
 8002562:	601a      	str	r2, [r3, #0]
			if (level < 6){
 8002564:	4b5d      	ldr	r3, [pc, #372]	; (80026dc <StartTask02+0x2e8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b05      	cmp	r3, #5
 800256a:	dc0e      	bgt.n	800258a <StartTask02+0x196>
				level++;
 800256c:	4b5b      	ldr	r3, [pc, #364]	; (80026dc <StartTask02+0x2e8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	4a5a      	ldr	r2, [pc, #360]	; (80026dc <StartTask02+0x2e8>)
 8002574:	6013      	str	r3, [r2, #0]
				time_start = (time_start * 2) / 3;
 8002576:	4b5a      	ldr	r3, [pc, #360]	; (80026e0 <StartTask02+0x2ec>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4a5a      	ldr	r2, [pc, #360]	; (80026e8 <StartTask02+0x2f4>)
 800257e:	fb82 1203 	smull	r1, r2, r2, r3
 8002582:	17db      	asrs	r3, r3, #31
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	4a56      	ldr	r2, [pc, #344]	; (80026e0 <StartTask02+0x2ec>)
 8002588:	6013      	str	r3, [r2, #0]
			}

			timer = time_start;
 800258a:	4b55      	ldr	r3, [pc, #340]	; (80026e0 <StartTask02+0x2ec>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a45      	ldr	r2, [pc, #276]	; (80026a4 <StartTask02+0x2b0>)
 8002590:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOE, LD_G_Pin, GPIO_PIN_SET);
 8002592:	2201      	movs	r2, #1
 8002594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002598:	4841      	ldr	r0, [pc, #260]	; (80026a0 <StartTask02+0x2ac>)
 800259a:	f000 fe8b 	bl	80032b4 <HAL_GPIO_WritePin>
		}

			for(int i = 1; i <= ROWS_DISPLAY; i++){
 800259e:	2301      	movs	r3, #1
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
 80025a2:	e077      	b.n	8002694 <StartTask02+0x2a0>

				if((x_char_index = isXPositionOccupied(i)) != -1 || (ROWS_DISPLAY - targetPositions[0].x + 1) == i){
 80025a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025a6:	f7ff f8fd 	bl	80017a4 <isXPositionOccupied>
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b2:	d106      	bne.n	80025c2 <StartTask02+0x1ce>
 80025b4:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <StartTask02+0x2e4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1c3 0316 	rsb	r3, r3, #22
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	429a      	cmp	r2, r3
 80025c0:	d155      	bne.n	800266e <StartTask02+0x27a>

						sprintf((char*)gbl_uart2_transmitBuffer,"\0");
 80025c2:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <StartTask02+0x2b4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
						for (int j = 1; j <= COLS_DISPLAY; j++){
 80025c8:	2301      	movs	r3, #1
 80025ca:	623b      	str	r3, [r7, #32]
 80025cc:	e035      	b.n	800263a <StartTask02+0x246>
							if((z_char_index = isXZPositionOccupied(i,j)) != -1){
 80025ce:	6a39      	ldr	r1, [r7, #32]
 80025d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025d2:	f7ff f909 	bl	80017e8 <isXZPositionOccupied>
 80025d6:	60b8      	str	r0, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025de:	d008      	beq.n	80025f2 <StartTask02+0x1fe>
								strcat((char*)gbl_uart2_transmitBuffer,returnPosChar(z_char_index));
 80025e0:	68b8      	ldr	r0, [r7, #8]
 80025e2:	f7ff f8c7 	bl	8001774 <returnPosChar>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4619      	mov	r1, r3
 80025ea:	482f      	ldr	r0, [pc, #188]	; (80026a8 <StartTask02+0x2b4>)
 80025ec:	f006 fbac 	bl	8008d48 <strcat>
 80025f0:	e020      	b.n	8002634 <StartTask02+0x240>
								//z_char_index_tick = z_char_index;
							} else if(targetPositions[0].z == j && (ROWS_DISPLAY - targetPositions[0].x + 1) == i){
 80025f2:	4b39      	ldr	r3, [pc, #228]	; (80026d8 <StartTask02+0x2e4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	6a3a      	ldr	r2, [r7, #32]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d10f      	bne.n	800261c <StartTask02+0x228>
 80025fc:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <StartTask02+0x2e4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f1c3 0316 	rsb	r3, r3, #22
 8002604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002606:	429a      	cmp	r2, r3
 8002608:	d108      	bne.n	800261c <StartTask02+0x228>
								strcat((char*)gbl_uart2_transmitBuffer,returnPosChar(4));
 800260a:	2004      	movs	r0, #4
 800260c:	f7ff f8b2 	bl	8001774 <returnPosChar>
 8002610:	4603      	mov	r3, r0
 8002612:	4619      	mov	r1, r3
 8002614:	4824      	ldr	r0, [pc, #144]	; (80026a8 <StartTask02+0x2b4>)
 8002616:	f006 fb97 	bl	8008d48 <strcat>
 800261a:	e00b      	b.n	8002634 <StartTask02+0x240>
							} else {
								strcat((char*)gbl_uart2_transmitBuffer,"-");
 800261c:	4822      	ldr	r0, [pc, #136]	; (80026a8 <StartTask02+0x2b4>)
 800261e:	f7fd fdd7 	bl	80001d0 <strlen>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <StartTask02+0x2b4>)
 8002628:	4413      	add	r3, r2
 800262a:	4930      	ldr	r1, [pc, #192]	; (80026ec <StartTask02+0x2f8>)
 800262c:	461a      	mov	r2, r3
 800262e:	460b      	mov	r3, r1
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	8013      	strh	r3, [r2, #0]
						for (int j = 1; j <= COLS_DISPLAY; j++){
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	3301      	adds	r3, #1
 8002638:	623b      	str	r3, [r7, #32]
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	2b29      	cmp	r3, #41	; 0x29
 800263e:	ddc6      	ble.n	80025ce <StartTask02+0x1da>
							}
						}

					strcat((char*)gbl_uart2_transmitBuffer,"\r\n");
 8002640:	4819      	ldr	r0, [pc, #100]	; (80026a8 <StartTask02+0x2b4>)
 8002642:	f7fd fdc5 	bl	80001d0 <strlen>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <StartTask02+0x2b4>)
 800264c:	4413      	add	r3, r2
 800264e:	4a28      	ldr	r2, [pc, #160]	; (80026f0 <StartTask02+0x2fc>)
 8002650:	8811      	ldrh	r1, [r2, #0]
 8002652:	7892      	ldrb	r2, [r2, #2]
 8002654:	8019      	strh	r1, [r3, #0]
 8002656:	709a      	strb	r2, [r3, #2]
					HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8002658:	4813      	ldr	r0, [pc, #76]	; (80026a8 <StartTask02+0x2b4>)
 800265a:	f7fd fdb9 	bl	80001d0 <strlen>
 800265e:	4603      	mov	r3, r0
 8002660:	b29a      	uxth	r2, r3
 8002662:	2364      	movs	r3, #100	; 0x64
 8002664:	4910      	ldr	r1, [pc, #64]	; (80026a8 <StartTask02+0x2b4>)
 8002666:	4812      	ldr	r0, [pc, #72]	; (80026b0 <StartTask02+0x2bc>)
 8002668:	f003 f866 	bl	8005738 <HAL_UART_Transmit>
 800266c:	e00f      	b.n	800268e <StartTask02+0x29a>
				} else {

						sprintf((char*)gbl_uart2_transmitBuffer,"%.*s\r\n", COLS_DISPLAY, "--------------------------------------------------------------------------");
 800266e:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <StartTask02+0x300>)
 8002670:	2229      	movs	r2, #41	; 0x29
 8002672:	4921      	ldr	r1, [pc, #132]	; (80026f8 <StartTask02+0x304>)
 8002674:	480c      	ldr	r0, [pc, #48]	; (80026a8 <StartTask02+0x2b4>)
 8002676:	f006 fb47 	bl	8008d08 <siprintf>
						HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 800267a:	480b      	ldr	r0, [pc, #44]	; (80026a8 <StartTask02+0x2b4>)
 800267c:	f7fd fda8 	bl	80001d0 <strlen>
 8002680:	4603      	mov	r3, r0
 8002682:	b29a      	uxth	r2, r3
 8002684:	2364      	movs	r3, #100	; 0x64
 8002686:	4908      	ldr	r1, [pc, #32]	; (80026a8 <StartTask02+0x2b4>)
 8002688:	4809      	ldr	r0, [pc, #36]	; (80026b0 <StartTask02+0x2bc>)
 800268a:	f003 f855 	bl	8005738 <HAL_UART_Transmit>
			for(int i = 1; i <= ROWS_DISPLAY; i++){
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	3301      	adds	r3, #1
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	2b15      	cmp	r3, #21
 8002698:	dd84      	ble.n	80025a4 <StartTask02+0x1b0>
				}

			}

			for(int i = TRAIL_LENGTH - 1; i > 0; i--){
 800269a:	2303      	movs	r3, #3
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e03d      	b.n	800271c <StartTask02+0x328>
 80026a0:	48001000 	.word	0x48001000
 80026a4:	20001a24 	.word	0x20001a24
 80026a8:	20001b98 	.word	0x20001b98
 80026ac:	08009788 	.word	0x08009788
 80026b0:	20001c58 	.word	0x20001c58
 80026b4:	20000148 	.word	0x20000148
 80026b8:	425f14cf 	.word	0x425f14cf
 80026bc:	2000014c 	.word	0x2000014c
 80026c0:	08ad88b7 	.word	0x08ad88b7
 80026c4:	20000150 	.word	0x20000150
 80026c8:	20001b80 	.word	0x20001b80
 80026cc:	3e6eeeef 	.word	0x3e6eeeef
 80026d0:	20001be8 	.word	0x20001be8
 80026d4:	3ee93e94 	.word	0x3ee93e94
 80026d8:	20001c48 	.word	0x20001c48
 80026dc:	20000038 	.word	0x20000038
 80026e0:	2000003c 	.word	0x2000003c
 80026e4:	20000154 	.word	0x20000154
 80026e8:	55555556 	.word	0x55555556
 80026ec:	08009790 	.word	0x08009790
 80026f0:	08009794 	.word	0x08009794
 80026f4:	08009798 	.word	0x08009798
 80026f8:	080097e4 	.word	0x080097e4
				positions[i] = positions[i - 1];
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	1e5a      	subs	r2, r3, #1
 8002700:	4831      	ldr	r0, [pc, #196]	; (80027c8 <StartTask02+0x3d4>)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	4930      	ldr	r1, [pc, #192]	; (80027c8 <StartTask02+0x3d4>)
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4403      	add	r3, r0
 800270a:	00d2      	lsls	r2, r2, #3
 800270c:	440a      	add	r2, r1
 800270e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002712:	e883 0003 	stmia.w	r3, {r0, r1}
			for(int i = TRAIL_LENGTH - 1; i > 0; i--){
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3b01      	subs	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	dcec      	bgt.n	80026fc <StartTask02+0x308>
			}

		sprintf((char*)gbl_uart2_transmitBuffer,"Level:%d   \r\nScore:%d   \r\nTime Left: %d.%02d   \r\n", level, score,timer / 100, timer % 100);
 8002722:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <StartTask02+0x3d8>)
 8002724:	681c      	ldr	r4, [r3, #0]
 8002726:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <StartTask02+0x3dc>)
 8002728:	681d      	ldr	r5, [r3, #0]
 800272a:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <StartTask02+0x3e0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a2a      	ldr	r2, [pc, #168]	; (80027d8 <StartTask02+0x3e4>)
 8002730:	fb82 1203 	smull	r1, r2, r2, r3
 8002734:	1152      	asrs	r2, r2, #5
 8002736:	17db      	asrs	r3, r3, #31
 8002738:	1ad1      	subs	r1, r2, r3
 800273a:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <StartTask02+0x3e0>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <StartTask02+0x3e4>)
 8002740:	fb83 0302 	smull	r0, r3, r3, r2
 8002744:	1158      	asrs	r0, r3, #5
 8002746:	17d3      	asrs	r3, r2, #31
 8002748:	1ac3      	subs	r3, r0, r3
 800274a:	2064      	movs	r0, #100	; 0x64
 800274c:	fb00 f303 	mul.w	r3, r0, r3
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	9100      	str	r1, [sp, #0]
 8002756:	462b      	mov	r3, r5
 8002758:	4622      	mov	r2, r4
 800275a:	4920      	ldr	r1, [pc, #128]	; (80027dc <StartTask02+0x3e8>)
 800275c:	4820      	ldr	r0, [pc, #128]	; (80027e0 <StartTask02+0x3ec>)
 800275e:	f006 fad3 	bl	8008d08 <siprintf>
		HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8002762:	481f      	ldr	r0, [pc, #124]	; (80027e0 <StartTask02+0x3ec>)
 8002764:	f7fd fd34 	bl	80001d0 <strlen>
 8002768:	4603      	mov	r3, r0
 800276a:	b29a      	uxth	r2, r3
 800276c:	2364      	movs	r3, #100	; 0x64
 800276e:	491c      	ldr	r1, [pc, #112]	; (80027e0 <StartTask02+0x3ec>)
 8002770:	481c      	ldr	r0, [pc, #112]	; (80027e4 <StartTask02+0x3f0>)
 8002772:	f002 ffe1 	bl	8005738 <HAL_UART_Transmit>
 8002776:	e642      	b.n	80023fe <StartTask02+0xa>
    } else {
    	HAL_GPIO_WritePin(GPIOB, LD_R_Pin, GPIO_PIN_SET);
 8002778:	2201      	movs	r2, #1
 800277a:	2104      	movs	r1, #4
 800277c:	481a      	ldr	r0, [pc, #104]	; (80027e8 <StartTask02+0x3f4>)
 800277e:	f000 fd99 	bl	80032b4 <HAL_GPIO_WritePin>

    	sprintf((char*)gbl_uart2_transmitBuffer,"\x1b[2J");
 8002782:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <StartTask02+0x3ec>)
 8002784:	4a19      	ldr	r2, [pc, #100]	; (80027ec <StartTask02+0x3f8>)
 8002786:	6810      	ldr	r0, [r2, #0]
 8002788:	6018      	str	r0, [r3, #0]
 800278a:	7912      	ldrb	r2, [r2, #4]
 800278c:	711a      	strb	r2, [r3, #4]
    	HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 800278e:	4814      	ldr	r0, [pc, #80]	; (80027e0 <StartTask02+0x3ec>)
 8002790:	f7fd fd1e 	bl	80001d0 <strlen>
 8002794:	4603      	mov	r3, r0
 8002796:	b29a      	uxth	r2, r3
 8002798:	2364      	movs	r3, #100	; 0x64
 800279a:	4911      	ldr	r1, [pc, #68]	; (80027e0 <StartTask02+0x3ec>)
 800279c:	4811      	ldr	r0, [pc, #68]	; (80027e4 <StartTask02+0x3f0>)
 800279e:	f002 ffcb 	bl	8005738 <HAL_UART_Transmit>

    	sprintf((char*)gbl_uart2_transmitBuffer,"\r\nGame Over\r\n\r\nLevel:%d\r\nScore:%d",level,score);
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <StartTask02+0x3d8>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <StartTask02+0x3dc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4911      	ldr	r1, [pc, #68]	; (80027f0 <StartTask02+0x3fc>)
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <StartTask02+0x3ec>)
 80027ae:	f006 faab 	bl	8008d08 <siprintf>
    	HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 80027b2:	480b      	ldr	r0, [pc, #44]	; (80027e0 <StartTask02+0x3ec>)
 80027b4:	f7fd fd0c 	bl	80001d0 <strlen>
 80027b8:	4603      	mov	r3, r0
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	2364      	movs	r3, #100	; 0x64
 80027be:	4908      	ldr	r1, [pc, #32]	; (80027e0 <StartTask02+0x3ec>)
 80027c0:	4808      	ldr	r0, [pc, #32]	; (80027e4 <StartTask02+0x3f0>)
 80027c2:	f002 ffb9 	bl	8005738 <HAL_UART_Transmit>
    osDelay(67); //67 for 15FPS
 80027c6:	e61a      	b.n	80023fe <StartTask02+0xa>
 80027c8:	20001be8 	.word	0x20001be8
 80027cc:	20000038 	.word	0x20000038
 80027d0:	20000154 	.word	0x20000154
 80027d4:	20001a24 	.word	0x20001a24
 80027d8:	51eb851f 	.word	0x51eb851f
 80027dc:	080097ec 	.word	0x080097ec
 80027e0:	20001b98 	.word	0x20001b98
 80027e4:	20001c58 	.word	0x20001c58
 80027e8:	48000400 	.word	0x48000400
 80027ec:	08009780 	.word	0x08009780
 80027f0:	08009820 	.word	0x08009820

080027f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002806:	f000 faad 	bl	8002d64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40012c00 	.word	0x40012c00

08002818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <HAL_MspInit+0x4c>)
 8002830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002832:	4a10      	ldr	r2, [pc, #64]	; (8002874 <HAL_MspInit+0x4c>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6613      	str	r3, [r2, #96]	; 0x60
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <HAL_MspInit+0x4c>)
 800283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_MspInit+0x4c>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <HAL_MspInit+0x4c>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002850:	6593      	str	r3, [r2, #88]	; 0x58
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_MspInit+0x4c>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	210f      	movs	r1, #15
 8002862:	f06f 0001 	mvn.w	r0, #1
 8002866:	f000 fb53 	bl	8002f10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000

08002878 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08c      	sub	sp, #48	; 0x30
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 031c 	add.w	r3, r7, #28
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a2e      	ldr	r2, [pc, #184]	; (8002950 <HAL_I2C_MspInit+0xd8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d128      	bne.n	80028ec <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800289a:	4b2e      	ldr	r3, [pc, #184]	; (8002954 <HAL_I2C_MspInit+0xdc>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	4a2d      	ldr	r2, [pc, #180]	; (8002954 <HAL_I2C_MspInit+0xdc>)
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028a6:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <HAL_I2C_MspInit+0xdc>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80028b2:	23c0      	movs	r3, #192	; 0xc0
 80028b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028b6:	2312      	movs	r3, #18
 80028b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ba:	2301      	movs	r3, #1
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028be:	2303      	movs	r3, #3
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028c2:	2304      	movs	r3, #4
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c6:	f107 031c 	add.w	r3, r7, #28
 80028ca:	4619      	mov	r1, r3
 80028cc:	4822      	ldr	r0, [pc, #136]	; (8002958 <HAL_I2C_MspInit+0xe0>)
 80028ce:	f000 fb49 	bl	8002f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028d2:	4b20      	ldr	r3, [pc, #128]	; (8002954 <HAL_I2C_MspInit+0xdc>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <HAL_I2C_MspInit+0xdc>)
 80028d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028dc:	6593      	str	r3, [r2, #88]	; 0x58
 80028de:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <HAL_I2C_MspInit+0xdc>)
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80028ea:	e02d      	b.n	8002948 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1a      	ldr	r2, [pc, #104]	; (800295c <HAL_I2C_MspInit+0xe4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d128      	bne.n	8002948 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	4b17      	ldr	r3, [pc, #92]	; (8002954 <HAL_I2C_MspInit+0xdc>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fa:	4a16      	ldr	r2, [pc, #88]	; (8002954 <HAL_I2C_MspInit+0xdc>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <HAL_I2C_MspInit+0xdc>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 800290e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002914:	2312      	movs	r3, #18
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002918:	2301      	movs	r3, #1
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002920:	2304      	movs	r3, #4
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4619      	mov	r1, r3
 800292a:	480b      	ldr	r0, [pc, #44]	; (8002958 <HAL_I2C_MspInit+0xe0>)
 800292c:	f000 fb1a 	bl	8002f64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_I2C_MspInit+0xdc>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <HAL_I2C_MspInit+0xdc>)
 8002936:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800293a:	6593      	str	r3, [r2, #88]	; 0x58
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_I2C_MspInit+0xdc>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
}
 8002948:	bf00      	nop
 800294a:	3730      	adds	r7, #48	; 0x30
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40005400 	.word	0x40005400
 8002954:	40021000 	.word	0x40021000
 8002958:	48000400 	.word	0x48000400
 800295c:	40005800 	.word	0x40005800

08002960 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <HAL_RNG_MspInit+0x38>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d10b      	bne.n	800298a <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_RNG_MspInit+0x3c>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	4a09      	ldr	r2, [pc, #36]	; (800299c <HAL_RNG_MspInit+0x3c>)
 8002978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800297c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800297e:	4b07      	ldr	r3, [pc, #28]	; (800299c <HAL_RNG_MspInit+0x3c>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	50060800 	.word	0x50060800
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a17      	ldr	r2, [pc, #92]	; (8002a1c <HAL_SPI_MspInit+0x7c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d127      	bne.n	8002a12 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029c2:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <HAL_SPI_MspInit+0x80>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	4a16      	ldr	r2, [pc, #88]	; (8002a20 <HAL_SPI_MspInit+0x80>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029cc:	6593      	str	r3, [r2, #88]	; 0x58
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <HAL_SPI_MspInit+0x80>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_SPI_MspInit+0x80>)
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <HAL_SPI_MspInit+0x80>)
 80029e0:	f043 0308 	orr.w	r3, r3, #8
 80029e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029e6:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <HAL_SPI_MspInit+0x80>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 80029f2:	231a      	movs	r3, #26
 80029f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	2302      	movs	r3, #2
 80029f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fe:	2303      	movs	r3, #3
 8002a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a02:	2305      	movs	r3, #5
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4805      	ldr	r0, [pc, #20]	; (8002a24 <HAL_SPI_MspInit+0x84>)
 8002a0e:	f000 faa9 	bl	8002f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a12:	bf00      	nop
 8002a14:	3728      	adds	r7, #40	; 0x28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40003800 	.word	0x40003800
 8002a20:	40021000 	.word	0x40021000
 8002a24:	48000c00 	.word	0x48000c00

08002a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a38:	d113      	bne.n	8002a62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <HAL_TIM_Base_MspInit+0x44>)
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <HAL_TIM_Base_MspInit+0x44>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6593      	str	r3, [r2, #88]	; 0x58
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_TIM_Base_MspInit+0x44>)
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2105      	movs	r1, #5
 8002a56:	201c      	movs	r0, #28
 8002a58:	f000 fa5a 	bl	8002f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a5c:	201c      	movs	r0, #28
 8002a5e:	f000 fa73 	bl	8002f48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000

08002a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a17      	ldr	r2, [pc, #92]	; (8002aec <HAL_UART_MspInit+0x7c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d127      	bne.n	8002ae2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <HAL_UART_MspInit+0x80>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <HAL_UART_MspInit+0x80>)
 8002a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <HAL_UART_MspInit+0x80>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_UART_MspInit+0x80>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <HAL_UART_MspInit+0x80>)
 8002ab0:	f043 0308 	orr.w	r3, r3, #8
 8002ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_UART_MspInit+0x80>)
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ac2:	2360      	movs	r3, #96	; 0x60
 8002ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aca:	2301      	movs	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ad2:	2307      	movs	r3, #7
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad6:	f107 0314 	add.w	r3, r7, #20
 8002ada:	4619      	mov	r1, r3
 8002adc:	4805      	ldr	r0, [pc, #20]	; (8002af4 <HAL_UART_MspInit+0x84>)
 8002ade:	f000 fa41 	bl	8002f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ae2:	bf00      	nop
 8002ae4:	3728      	adds	r7, #40	; 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40004400 	.word	0x40004400
 8002af0:	40021000 	.word	0x40021000
 8002af4:	48000c00 	.word	0x48000c00

08002af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08c      	sub	sp, #48	; 0x30
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8002b08:	2200      	movs	r2, #0
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	2019      	movs	r0, #25
 8002b0e:	f000 f9ff 	bl	8002f10 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8002b12:	2019      	movs	r0, #25
 8002b14:	f000 fa18 	bl	8002f48 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002b18:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <HAL_InitTick+0x9c>)
 8002b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1c:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <HAL_InitTick+0x9c>)
 8002b1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b22:	6613      	str	r3, [r2, #96]	; 0x60
 8002b24:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <HAL_InitTick+0x9c>)
 8002b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b30:	f107 0210 	add.w	r2, r7, #16
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 faf6 	bl	800412c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002b40:	f001 fade 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8002b44:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <HAL_InitTick+0xa0>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	0c9b      	lsrs	r3, r3, #18
 8002b50:	3b01      	subs	r3, #1
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <HAL_InitTick+0xa4>)
 8002b56:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <HAL_InitTick+0xa8>)
 8002b58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <HAL_InitTick+0xa4>)
 8002b5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b60:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002b62:	4a0e      	ldr	r2, [pc, #56]	; (8002b9c <HAL_InitTick+0xa4>)
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <HAL_InitTick+0xa4>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_InitTick+0xa4>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002b74:	4809      	ldr	r0, [pc, #36]	; (8002b9c <HAL_InitTick+0xa4>)
 8002b76:	f002 f962 	bl	8004e3e <HAL_TIM_Base_Init>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d104      	bne.n	8002b8a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002b80:	4806      	ldr	r0, [pc, #24]	; (8002b9c <HAL_InitTick+0xa4>)
 8002b82:	f002 f987 	bl	8004e94 <HAL_TIM_Base_Start_IT>
 8002b86:	4603      	mov	r3, r0
 8002b88:	e000      	b.n	8002b8c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3730      	adds	r7, #48	; 0x30
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40021000 	.word	0x40021000
 8002b98:	431bde83 	.word	0x431bde83
 8002b9c:	20001cd8 	.word	0x20001cd8
 8002ba0:	40012c00 	.word	0x40012c00

08002ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb6:	e7fe      	b.n	8002bb6 <HardFault_Handler+0x4>

08002bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <MemManage_Handler+0x4>

08002bbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bc2:	e7fe      	b.n	8002bc2 <BusFault_Handler+0x4>

08002bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc8:	e7fe      	b.n	8002bc8 <UsageFault_Handler+0x4>

08002bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bdc:	4802      	ldr	r0, [pc, #8]	; (8002be8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002bde:	f002 f983 	bl	8004ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20001cd8 	.word	0x20001cd8

08002bec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	timer--;
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <TIM2_IRQHandler+0x18>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	4a03      	ldr	r2, [pc, #12]	; (8002c04 <TIM2_IRQHandler+0x18>)
 8002bf8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bfa:	4803      	ldr	r0, [pc, #12]	; (8002c08 <TIM2_IRQHandler+0x1c>)
 8002bfc:	f002 f974 	bl	8004ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20001a24 	.word	0x20001a24
 8002c08:	20001c08 	.word	0x20001c08

08002c0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <_sbrk+0x50>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d102      	bne.n	8002c22 <_sbrk+0x16>
		heap_end = &end;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <_sbrk+0x50>)
 8002c1e:	4a10      	ldr	r2, [pc, #64]	; (8002c60 <_sbrk+0x54>)
 8002c20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <_sbrk+0x50>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <_sbrk+0x50>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4413      	add	r3, r2
 8002c30:	466a      	mov	r2, sp
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d907      	bls.n	8002c46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c36:	f006 f829 	bl	8008c8c <__errno>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	230c      	movs	r3, #12
 8002c3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002c40:	f04f 33ff 	mov.w	r3, #4294967295
 8002c44:	e006      	b.n	8002c54 <_sbrk+0x48>
	}

	heap_end += incr;
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <_sbrk+0x50>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	4a03      	ldr	r2, [pc, #12]	; (8002c5c <_sbrk+0x50>)
 8002c50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002c52:	68fb      	ldr	r3, [r7, #12]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000158 	.word	0x20000158
 8002c60:	20001d60 	.word	0x20001d60

08002c64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c68:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <SystemInit+0x64>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	4a16      	ldr	r2, [pc, #88]	; (8002cc8 <SystemInit+0x64>)
 8002c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <SystemInit+0x68>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a13      	ldr	r2, [pc, #76]	; (8002ccc <SystemInit+0x68>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <SystemInit+0x68>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <SystemInit+0x68>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ccc <SystemInit+0x68>)
 8002c90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002c94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002c98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <SystemInit+0x68>)
 8002c9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ca0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <SystemInit+0x68>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <SystemInit+0x68>)
 8002ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <SystemInit+0x68>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <SystemInit+0x64>)
 8002cb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cba:	609a      	str	r2, [r3, #8]
#endif
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000ed00 	.word	0xe000ed00
 8002ccc:	40021000 	.word	0x40021000

08002cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002cd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002cd6:	e003      	b.n	8002ce0 <LoopCopyDataInit>

08002cd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002cda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002cdc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002cde:	3104      	adds	r1, #4

08002ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ce0:	480b      	ldr	r0, [pc, #44]	; (8002d10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002ce4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002ce6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ce8:	d3f6      	bcc.n	8002cd8 <CopyDataInit>
	ldr	r2, =_sbss
 8002cea:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002cec:	e002      	b.n	8002cf4 <LoopFillZerobss>

08002cee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002cee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002cf0:	f842 3b04 	str.w	r3, [r2], #4

08002cf4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002cf4:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <LoopForever+0x16>)
	cmp	r2, r3
 8002cf6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002cf8:	d3f9      	bcc.n	8002cee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cfa:	f7ff ffb3 	bl	8002c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cfe:	f005 ffcb 	bl	8008c98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d02:	f7fe febd 	bl	8001a80 <main>

08002d06 <LoopForever>:

LoopForever:
    b LoopForever
 8002d06:	e7fe      	b.n	8002d06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d08:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002d0c:	0800993c 	.word	0x0800993c
	ldr	r0, =_sdata
 8002d10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d14:	200000b8 	.word	0x200000b8
	ldr	r2, =_sbss
 8002d18:	200000b8 	.word	0x200000b8
	ldr	r3, = _ebss
 8002d1c:	20001d60 	.word	0x20001d60

08002d20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d20:	e7fe      	b.n	8002d20 <ADC1_2_IRQHandler>
	...

08002d24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <HAL_Init+0x3c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a0b      	ldr	r2, [pc, #44]	; (8002d60 <HAL_Init+0x3c>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d3a:	2003      	movs	r0, #3
 8002d3c:	f000 f8dd 	bl	8002efa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d40:	2000      	movs	r0, #0
 8002d42:	f7ff fed9 	bl	8002af8 <HAL_InitTick>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	71fb      	strb	r3, [r7, #7]
 8002d50:	e001      	b.n	8002d56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d52:	f7ff fd69 	bl	8002828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d56:	79fb      	ldrb	r3, [r7, #7]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40022000 	.word	0x40022000

08002d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_IncTick+0x1c>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_IncTick+0x20>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	4a03      	ldr	r2, [pc, #12]	; (8002d80 <HAL_IncTick+0x1c>)
 8002d74:	6013      	str	r3, [r2, #0]
}
 8002d76:	bf00      	nop
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	20001d18 	.word	0x20001d18
 8002d84:	20000048 	.word	0x20000048

08002d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_GetTick+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20001d18 	.word	0x20001d18

08002da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <__NVIC_SetPriorityGrouping+0x44>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd2:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	60d3      	str	r3, [r2, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <__NVIC_GetPriorityGrouping+0x18>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	f003 0307 	and.w	r3, r3, #7
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	db0b      	blt.n	8002e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	4907      	ldr	r1, [pc, #28]	; (8002e3c <__NVIC_EnableIRQ+0x38>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2001      	movs	r0, #1
 8002e26:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000e100 	.word	0xe000e100

08002e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	6039      	str	r1, [r7, #0]
 8002e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	db0a      	blt.n	8002e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	490c      	ldr	r1, [pc, #48]	; (8002e8c <__NVIC_SetPriority+0x4c>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	0112      	lsls	r2, r2, #4
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	440b      	add	r3, r1
 8002e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e68:	e00a      	b.n	8002e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4908      	ldr	r1, [pc, #32]	; (8002e90 <__NVIC_SetPriority+0x50>)
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	3b04      	subs	r3, #4
 8002e78:	0112      	lsls	r2, r2, #4
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	761a      	strb	r2, [r3, #24]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000e100 	.word	0xe000e100
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b089      	sub	sp, #36	; 0x24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f1c3 0307 	rsb	r3, r3, #7
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	bf28      	it	cs
 8002eb2:	2304      	movcs	r3, #4
 8002eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	2b06      	cmp	r3, #6
 8002ebc:	d902      	bls.n	8002ec4 <NVIC_EncodePriority+0x30>
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3b03      	subs	r3, #3
 8002ec2:	e000      	b.n	8002ec6 <NVIC_EncodePriority+0x32>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002edc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	43d9      	mvns	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	4313      	orrs	r3, r2
         );
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3724      	adds	r7, #36	; 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ff4c 	bl	8002da0 <__NVIC_SetPriorityGrouping>
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f22:	f7ff ff61 	bl	8002de8 <__NVIC_GetPriorityGrouping>
 8002f26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	6978      	ldr	r0, [r7, #20]
 8002f2e:	f7ff ffb1 	bl	8002e94 <NVIC_EncodePriority>
 8002f32:	4602      	mov	r2, r0
 8002f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff ff80 	bl	8002e40 <__NVIC_SetPriority>
}
 8002f40:	bf00      	nop
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff ff54 	bl	8002e04 <__NVIC_EnableIRQ>
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f72:	e17f      	b.n	8003274 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	4013      	ands	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 8171 	beq.w	800326e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d00b      	beq.n	8002fac <HAL_GPIO_Init+0x48>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d007      	beq.n	8002fac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fa0:	2b11      	cmp	r3, #17
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b12      	cmp	r3, #18
 8002faa:	d130      	bne.n	800300e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	f003 0201 	and.w	r2, r3, #1
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b03      	cmp	r3, #3
 8003018:	d118      	bne.n	800304c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003020:	2201      	movs	r2, #1
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	08db      	lsrs	r3, r3, #3
 8003036:	f003 0201 	and.w	r2, r3, #1
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	2203      	movs	r2, #3
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4013      	ands	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d003      	beq.n	800308c <HAL_GPIO_Init+0x128>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b12      	cmp	r3, #18
 800308a:	d123      	bne.n	80030d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	08da      	lsrs	r2, r3, #3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3208      	adds	r2, #8
 8003094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	220f      	movs	r2, #15
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	08da      	lsrs	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3208      	adds	r2, #8
 80030ce:	6939      	ldr	r1, [r7, #16]
 80030d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0203 	and.w	r2, r3, #3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80ac 	beq.w	800326e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003116:	4b5e      	ldr	r3, [pc, #376]	; (8003290 <HAL_GPIO_Init+0x32c>)
 8003118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311a:	4a5d      	ldr	r2, [pc, #372]	; (8003290 <HAL_GPIO_Init+0x32c>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6613      	str	r3, [r2, #96]	; 0x60
 8003122:	4b5b      	ldr	r3, [pc, #364]	; (8003290 <HAL_GPIO_Init+0x32c>)
 8003124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800312e:	4a59      	ldr	r2, [pc, #356]	; (8003294 <HAL_GPIO_Init+0x330>)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	089b      	lsrs	r3, r3, #2
 8003134:	3302      	adds	r3, #2
 8003136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	220f      	movs	r2, #15
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4013      	ands	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003158:	d025      	beq.n	80031a6 <HAL_GPIO_Init+0x242>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4e      	ldr	r2, [pc, #312]	; (8003298 <HAL_GPIO_Init+0x334>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01f      	beq.n	80031a2 <HAL_GPIO_Init+0x23e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4d      	ldr	r2, [pc, #308]	; (800329c <HAL_GPIO_Init+0x338>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d019      	beq.n	800319e <HAL_GPIO_Init+0x23a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a4c      	ldr	r2, [pc, #304]	; (80032a0 <HAL_GPIO_Init+0x33c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d013      	beq.n	800319a <HAL_GPIO_Init+0x236>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a4b      	ldr	r2, [pc, #300]	; (80032a4 <HAL_GPIO_Init+0x340>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00d      	beq.n	8003196 <HAL_GPIO_Init+0x232>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a4a      	ldr	r2, [pc, #296]	; (80032a8 <HAL_GPIO_Init+0x344>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d007      	beq.n	8003192 <HAL_GPIO_Init+0x22e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a49      	ldr	r2, [pc, #292]	; (80032ac <HAL_GPIO_Init+0x348>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d101      	bne.n	800318e <HAL_GPIO_Init+0x22a>
 800318a:	2306      	movs	r3, #6
 800318c:	e00c      	b.n	80031a8 <HAL_GPIO_Init+0x244>
 800318e:	2307      	movs	r3, #7
 8003190:	e00a      	b.n	80031a8 <HAL_GPIO_Init+0x244>
 8003192:	2305      	movs	r3, #5
 8003194:	e008      	b.n	80031a8 <HAL_GPIO_Init+0x244>
 8003196:	2304      	movs	r3, #4
 8003198:	e006      	b.n	80031a8 <HAL_GPIO_Init+0x244>
 800319a:	2303      	movs	r3, #3
 800319c:	e004      	b.n	80031a8 <HAL_GPIO_Init+0x244>
 800319e:	2302      	movs	r3, #2
 80031a0:	e002      	b.n	80031a8 <HAL_GPIO_Init+0x244>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_GPIO_Init+0x244>
 80031a6:	2300      	movs	r3, #0
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	f002 0203 	and.w	r2, r2, #3
 80031ae:	0092      	lsls	r2, r2, #2
 80031b0:	4093      	lsls	r3, r2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031b8:	4936      	ldr	r1, [pc, #216]	; (8003294 <HAL_GPIO_Init+0x330>)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	3302      	adds	r3, #2
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80031c6:	4b3a      	ldr	r3, [pc, #232]	; (80032b0 <HAL_GPIO_Init+0x34c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031ea:	4a31      	ldr	r2, [pc, #196]	; (80032b0 <HAL_GPIO_Init+0x34c>)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80031f0:	4b2f      	ldr	r3, [pc, #188]	; (80032b0 <HAL_GPIO_Init+0x34c>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4013      	ands	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003214:	4a26      	ldr	r2, [pc, #152]	; (80032b0 <HAL_GPIO_Init+0x34c>)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800321a:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <HAL_GPIO_Init+0x34c>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	43db      	mvns	r3, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800323e:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <HAL_GPIO_Init+0x34c>)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003244:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <HAL_GPIO_Init+0x34c>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	43db      	mvns	r3, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003268:	4a11      	ldr	r2, [pc, #68]	; (80032b0 <HAL_GPIO_Init+0x34c>)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	3301      	adds	r3, #1
 8003272:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa22 f303 	lsr.w	r3, r2, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	f47f ae78 	bne.w	8002f74 <HAL_GPIO_Init+0x10>
  }
}
 8003284:	bf00      	nop
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40021000 	.word	0x40021000
 8003294:	40010000 	.word	0x40010000
 8003298:	48000400 	.word	0x48000400
 800329c:	48000800 	.word	0x48000800
 80032a0:	48000c00 	.word	0x48000c00
 80032a4:	48001000 	.word	0x48001000
 80032a8:	48001400 	.word	0x48001400
 80032ac:	48001800 	.word	0x48001800
 80032b0:	40010400 	.word	0x40010400

080032b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
 80032c0:	4613      	mov	r3, r2
 80032c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c4:	787b      	ldrb	r3, [r7, #1]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032d0:	e002      	b.n	80032d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032d2:	887a      	ldrh	r2, [r7, #2]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e081      	b.n	80033fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff fab4 	bl	8002878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2224      	movs	r2, #36	; 0x24
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003334:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003344:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d107      	bne.n	800335e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	e006      	b.n	800336c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800336a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d104      	bne.n	800337e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800337c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800338c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003390:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	ea42 0103 	orr.w	r1, r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	021a      	lsls	r2, r3, #8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69d9      	ldr	r1, [r3, #28]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b20      	cmp	r3, #32
 8003416:	d138      	bne.n	800348a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003422:	2302      	movs	r3, #2
 8003424:	e032      	b.n	800348c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2224      	movs	r2, #36	; 0x24
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0201 	bic.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003454:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6819      	ldr	r1, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0201 	orr.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e000      	b.n	800348c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800348a:	2302      	movs	r3, #2
  }
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d139      	bne.n	8003522 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e033      	b.n	8003524 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2224      	movs	r2, #36	; 0x24
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0201 	bic.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0201 	orr.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	e000      	b.n	8003524 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
  }
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a04      	ldr	r2, [pc, #16]	; (800354c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800353a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353e:	6013      	str	r3, [r2, #0]
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40007000 	.word	0x40007000

08003550 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <HAL_PWREx_GetVoltageRange+0x18>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800355c:	4618      	mov	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40007000 	.word	0x40007000

0800356c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357a:	d130      	bne.n	80035de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800357c:	4b23      	ldr	r3, [pc, #140]	; (800360c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003588:	d038      	beq.n	80035fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003592:	4a1e      	ldr	r2, [pc, #120]	; (800360c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003594:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003598:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800359a:	4b1d      	ldr	r3, [pc, #116]	; (8003610 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2232      	movs	r2, #50	; 0x32
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	4a1b      	ldr	r2, [pc, #108]	; (8003614 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	0c9b      	lsrs	r3, r3, #18
 80035ac:	3301      	adds	r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035b0:	e002      	b.n	80035b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035b8:	4b14      	ldr	r3, [pc, #80]	; (800360c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c4:	d102      	bne.n	80035cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f2      	bne.n	80035b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d8:	d110      	bne.n	80035fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e00f      	b.n	80035fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035de:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ea:	d007      	beq.n	80035fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035ec:	4b07      	ldr	r3, [pc, #28]	; (800360c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035f4:	4a05      	ldr	r2, [pc, #20]	; (800360c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40007000 	.word	0x40007000
 8003610:	20000040 	.word	0x20000040
 8003614:	431bde83 	.word	0x431bde83

08003618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e3d4      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800362a:	4ba1      	ldr	r3, [pc, #644]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003634:	4b9e      	ldr	r3, [pc, #632]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80e4 	beq.w	8003814 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <HAL_RCC_OscConfig+0x4a>
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b0c      	cmp	r3, #12
 8003656:	f040 808b 	bne.w	8003770 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b01      	cmp	r3, #1
 800365e:	f040 8087 	bne.w	8003770 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003662:	4b93      	ldr	r3, [pc, #588]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_RCC_OscConfig+0x62>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e3ac      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1a      	ldr	r2, [r3, #32]
 800367e:	4b8c      	ldr	r3, [pc, #560]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <HAL_RCC_OscConfig+0x7c>
 800368a:	4b89      	ldr	r3, [pc, #548]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003692:	e005      	b.n	80036a0 <HAL_RCC_OscConfig+0x88>
 8003694:	4b86      	ldr	r3, [pc, #536]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 8003696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d223      	bcs.n	80036ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fd71 	bl	8004190 <RCC_SetFlashLatencyFromMSIRange>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e38d      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036b8:	4b7d      	ldr	r3, [pc, #500]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a7c      	ldr	r2, [pc, #496]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80036be:	f043 0308 	orr.w	r3, r3, #8
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b7a      	ldr	r3, [pc, #488]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	4977      	ldr	r1, [pc, #476]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036d6:	4b76      	ldr	r3, [pc, #472]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	4972      	ldr	r1, [pc, #456]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
 80036ea:	e025      	b.n	8003738 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ec:	4b70      	ldr	r3, [pc, #448]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6f      	ldr	r2, [pc, #444]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80036f2:	f043 0308 	orr.w	r3, r3, #8
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b6d      	ldr	r3, [pc, #436]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	496a      	ldr	r1, [pc, #424]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800370a:	4b69      	ldr	r3, [pc, #420]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	4965      	ldr	r1, [pc, #404]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fd31 	bl	8004190 <RCC_SetFlashLatencyFromMSIRange>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e34d      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003738:	f000 fc36 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 800373c:	4601      	mov	r1, r0
 800373e:	4b5c      	ldr	r3, [pc, #368]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	091b      	lsrs	r3, r3, #4
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	4a5a      	ldr	r2, [pc, #360]	; (80038b4 <HAL_RCC_OscConfig+0x29c>)
 800374a:	5cd3      	ldrb	r3, [r2, r3]
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	fa21 f303 	lsr.w	r3, r1, r3
 8003754:	4a58      	ldr	r2, [pc, #352]	; (80038b8 <HAL_RCC_OscConfig+0x2a0>)
 8003756:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003758:	4b58      	ldr	r3, [pc, #352]	; (80038bc <HAL_RCC_OscConfig+0x2a4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff f9cb 	bl	8002af8 <HAL_InitTick>
 8003762:	4603      	mov	r3, r0
 8003764:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d052      	beq.n	8003812 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	e331      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d032      	beq.n	80037de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003778:	4b4d      	ldr	r3, [pc, #308]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a4c      	ldr	r2, [pc, #304]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003784:	f7ff fb00 	bl	8002d88 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800378c:	f7ff fafc 	bl	8002d88 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e31a      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800379e:	4b44      	ldr	r3, [pc, #272]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037aa:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a40      	ldr	r2, [pc, #256]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80037b0:	f043 0308 	orr.w	r3, r3, #8
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b3e      	ldr	r3, [pc, #248]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	493b      	ldr	r1, [pc, #236]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c8:	4b39      	ldr	r3, [pc, #228]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	4936      	ldr	r1, [pc, #216]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
 80037dc:	e01a      	b.n	8003814 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037de:	4b34      	ldr	r3, [pc, #208]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a33      	ldr	r2, [pc, #204]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037ea:	f7ff facd 	bl	8002d88 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037f2:	f7ff fac9 	bl	8002d88 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e2e7      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003804:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f0      	bne.n	80037f2 <HAL_RCC_OscConfig+0x1da>
 8003810:	e000      	b.n	8003814 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003812:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d074      	beq.n	800390a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b08      	cmp	r3, #8
 8003824:	d005      	beq.n	8003832 <HAL_RCC_OscConfig+0x21a>
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	2b0c      	cmp	r3, #12
 800382a:	d10e      	bne.n	800384a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d10b      	bne.n	800384a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003832:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d064      	beq.n	8003908 <HAL_RCC_OscConfig+0x2f0>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d160      	bne.n	8003908 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e2c4      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003852:	d106      	bne.n	8003862 <HAL_RCC_OscConfig+0x24a>
 8003854:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a15      	ldr	r2, [pc, #84]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 800385a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	e01d      	b.n	800389e <HAL_RCC_OscConfig+0x286>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800386a:	d10c      	bne.n	8003886 <HAL_RCC_OscConfig+0x26e>
 800386c:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0f      	ldr	r2, [pc, #60]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 8003872:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a0c      	ldr	r2, [pc, #48]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 800387e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	e00b      	b.n	800389e <HAL_RCC_OscConfig+0x286>
 8003886:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 800388c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a06      	ldr	r2, [pc, #24]	; (80038b0 <HAL_RCC_OscConfig+0x298>)
 8003898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01c      	beq.n	80038e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a6:	f7ff fa6f 	bl	8002d88 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ac:	e011      	b.n	80038d2 <HAL_RCC_OscConfig+0x2ba>
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	080098ac 	.word	0x080098ac
 80038b8:	20000040 	.word	0x20000040
 80038bc:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c0:	f7ff fa62 	bl	8002d88 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e280      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038d2:	4baf      	ldr	r3, [pc, #700]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x2a8>
 80038de:	e014      	b.n	800390a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7ff fa52 	bl	8002d88 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e8:	f7ff fa4e 	bl	8002d88 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	; 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e26c      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038fa:	4ba5      	ldr	r3, [pc, #660]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x2d0>
 8003906:	e000      	b.n	800390a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d060      	beq.n	80039d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	2b04      	cmp	r3, #4
 800391a:	d005      	beq.n	8003928 <HAL_RCC_OscConfig+0x310>
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2b0c      	cmp	r3, #12
 8003920:	d119      	bne.n	8003956 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b02      	cmp	r3, #2
 8003926:	d116      	bne.n	8003956 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003928:	4b99      	ldr	r3, [pc, #612]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_OscConfig+0x328>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e249      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003940:	4b93      	ldr	r3, [pc, #588]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	061b      	lsls	r3, r3, #24
 800394e:	4990      	ldr	r1, [pc, #576]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003954:	e040      	b.n	80039d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d023      	beq.n	80039a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800395e:	4b8c      	ldr	r3, [pc, #560]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a8b      	ldr	r2, [pc, #556]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396a:	f7ff fa0d 	bl	8002d88 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003972:	f7ff fa09 	bl	8002d88 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e227      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003984:	4b82      	ldr	r3, [pc, #520]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003990:	4b7f      	ldr	r3, [pc, #508]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	061b      	lsls	r3, r3, #24
 800399e:	497c      	ldr	r1, [pc, #496]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
 80039a4:	e018      	b.n	80039d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039a6:	4b7a      	ldr	r3, [pc, #488]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a79      	ldr	r2, [pc, #484]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 80039ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7ff f9e9 	bl	8002d88 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ba:	f7ff f9e5 	bl	8002d88 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e203      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039cc:	4b70      	ldr	r3, [pc, #448]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f0      	bne.n	80039ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d03c      	beq.n	8003a5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01c      	beq.n	8003a26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ec:	4b68      	ldr	r3, [pc, #416]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 80039ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f2:	4a67      	ldr	r2, [pc, #412]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fc:	f7ff f9c4 	bl	8002d88 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a04:	f7ff f9c0 	bl	8002d88 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e1de      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a16:	4b5e      	ldr	r3, [pc, #376]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0ef      	beq.n	8003a04 <HAL_RCC_OscConfig+0x3ec>
 8003a24:	e01b      	b.n	8003a5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a26:	4b5a      	ldr	r3, [pc, #360]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2c:	4a58      	ldr	r2, [pc, #352]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a36:	f7ff f9a7 	bl	8002d88 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3e:	f7ff f9a3 	bl	8002d88 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e1c1      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a50:	4b4f      	ldr	r3, [pc, #316]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ef      	bne.n	8003a3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 80a6 	beq.w	8003bb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a70:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10d      	bne.n	8003a98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7c:	4b44      	ldr	r3, [pc, #272]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a80:	4a43      	ldr	r2, [pc, #268]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a86:	6593      	str	r3, [r2, #88]	; 0x58
 8003a88:	4b41      	ldr	r3, [pc, #260]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a94:	2301      	movs	r3, #1
 8003a96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a98:	4b3e      	ldr	r3, [pc, #248]	; (8003b94 <HAL_RCC_OscConfig+0x57c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d118      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa4:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <HAL_RCC_OscConfig+0x57c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a3a      	ldr	r2, [pc, #232]	; (8003b94 <HAL_RCC_OscConfig+0x57c>)
 8003aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab0:	f7ff f96a 	bl	8002d88 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab8:	f7ff f966 	bl	8002d88 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e184      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aca:	4b32      	ldr	r3, [pc, #200]	; (8003b94 <HAL_RCC_OscConfig+0x57c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d108      	bne.n	8003af0 <HAL_RCC_OscConfig+0x4d8>
 8003ade:	4b2c      	ldr	r3, [pc, #176]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	4a2a      	ldr	r2, [pc, #168]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aee:	e024      	b.n	8003b3a <HAL_RCC_OscConfig+0x522>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	d110      	bne.n	8003b1a <HAL_RCC_OscConfig+0x502>
 8003af8:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	4a24      	ldr	r2, [pc, #144]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003b00:	f043 0304 	orr.w	r3, r3, #4
 8003b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b08:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b18:	e00f      	b.n	8003b3a <HAL_RCC_OscConfig+0x522>
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	4a1b      	ldr	r2, [pc, #108]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b2a:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b30:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003b32:	f023 0304 	bic.w	r3, r3, #4
 8003b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d016      	beq.n	8003b70 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b42:	f7ff f921 	bl	8002d88 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b48:	e00a      	b.n	8003b60 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b4a:	f7ff f91d 	bl	8002d88 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e139      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_OscConfig+0x578>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0ed      	beq.n	8003b4a <HAL_RCC_OscConfig+0x532>
 8003b6e:	e01a      	b.n	8003ba6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7ff f90a 	bl	8002d88 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b76:	e00f      	b.n	8003b98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b78:	f7ff f906 	bl	8002d88 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d906      	bls.n	8003b98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e122      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b98:	4b90      	ldr	r3, [pc, #576]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e8      	bne.n	8003b78 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ba6:	7ffb      	ldrb	r3, [r7, #31]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d105      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bac:	4b8b      	ldr	r3, [pc, #556]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	4a8a      	ldr	r2, [pc, #552]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8108 	beq.w	8003dd2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	f040 80d0 	bne.w	8003d6c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bcc:	4b83      	ldr	r3, [pc, #524]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f003 0203 	and.w	r2, r3, #3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d130      	bne.n	8003c42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	3b01      	subs	r3, #1
 8003bec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d127      	bne.n	8003c42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d11f      	bne.n	8003c42 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c0c:	2a07      	cmp	r2, #7
 8003c0e:	bf14      	ite	ne
 8003c10:	2201      	movne	r2, #1
 8003c12:	2200      	moveq	r2, #0
 8003c14:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d113      	bne.n	8003c42 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	3b01      	subs	r3, #1
 8003c28:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d109      	bne.n	8003c42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	085b      	lsrs	r3, r3, #1
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d06e      	beq.n	8003d20 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b0c      	cmp	r3, #12
 8003c46:	d069      	beq.n	8003d1c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c48:	4b64      	ldr	r3, [pc, #400]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c54:	4b61      	ldr	r3, [pc, #388]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0b7      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c64:	4b5d      	ldr	r3, [pc, #372]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a5c      	ldr	r2, [pc, #368]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c70:	f7ff f88a 	bl	8002d88 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c78:	f7ff f886 	bl	8002d88 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e0a4      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c8a:	4b54      	ldr	r3, [pc, #336]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c96:	4b51      	ldr	r3, [pc, #324]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	4b51      	ldr	r3, [pc, #324]	; (8003de0 <HAL_RCC_OscConfig+0x7c8>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	0112      	lsls	r2, r2, #4
 8003caa:	4311      	orrs	r1, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cb0:	0212      	lsls	r2, r2, #8
 8003cb2:	4311      	orrs	r1, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cb8:	0852      	lsrs	r2, r2, #1
 8003cba:	3a01      	subs	r2, #1
 8003cbc:	0552      	lsls	r2, r2, #21
 8003cbe:	4311      	orrs	r1, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cc4:	0852      	lsrs	r2, r2, #1
 8003cc6:	3a01      	subs	r2, #1
 8003cc8:	0652      	lsls	r2, r2, #25
 8003cca:	4311      	orrs	r1, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cd0:	0912      	lsrs	r2, r2, #4
 8003cd2:	0452      	lsls	r2, r2, #17
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	4941      	ldr	r1, [pc, #260]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cdc:	4b3f      	ldr	r3, [pc, #252]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a3e      	ldr	r2, [pc, #248]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ce8:	4b3c      	ldr	r3, [pc, #240]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4a3b      	ldr	r2, [pc, #236]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cf4:	f7ff f848 	bl	8002d88 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7ff f844 	bl	8002d88 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e062      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0e:	4b33      	ldr	r3, [pc, #204]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d1a:	e05a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e059      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d20:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d152      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a2a      	ldr	r2, [pc, #168]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d38:	4b28      	ldr	r3, [pc, #160]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4a27      	ldr	r2, [pc, #156]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d44:	f7ff f820 	bl	8002d88 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7ff f81c 	bl	8002d88 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e03a      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d5e:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0x734>
 8003d6a:	e032      	b.n	8003dd2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2b0c      	cmp	r3, #12
 8003d70:	d02d      	beq.n	8003dce <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d72:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003d78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d7c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d7e:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d8a:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003d90:	f023 0303 	bic.w	r3, r3, #3
 8003d94:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d96:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	4a10      	ldr	r2, [pc, #64]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003d9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fe ffef 	bl	8002d88 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dae:	f7fe ffeb 	bl	8002d88 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e009      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_RCC_OscConfig+0x7c4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f0      	bne.n	8003dae <HAL_RCC_OscConfig+0x796>
 8003dcc:	e001      	b.n	8003dd2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	f99d808c 	.word	0xf99d808c

08003de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0c8      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df8:	4b66      	ldr	r3, [pc, #408]	; (8003f94 <HAL_RCC_ClockConfig+0x1b0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d910      	bls.n	8003e28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e06:	4b63      	ldr	r3, [pc, #396]	; (8003f94 <HAL_RCC_ClockConfig+0x1b0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 0207 	bic.w	r2, r3, #7
 8003e0e:	4961      	ldr	r1, [pc, #388]	; (8003f94 <HAL_RCC_ClockConfig+0x1b0>)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e16:	4b5f      	ldr	r3, [pc, #380]	; (8003f94 <HAL_RCC_ClockConfig+0x1b0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0b0      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d04c      	beq.n	8003ece <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d107      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3c:	4b56      	ldr	r3, [pc, #344]	; (8003f98 <HAL_RCC_ClockConfig+0x1b4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d121      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e09e      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d107      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e54:	4b50      	ldr	r3, [pc, #320]	; (8003f98 <HAL_RCC_ClockConfig+0x1b4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d115      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e092      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e6c:	4b4a      	ldr	r3, [pc, #296]	; (8003f98 <HAL_RCC_ClockConfig+0x1b4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e086      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e7c:	4b46      	ldr	r3, [pc, #280]	; (8003f98 <HAL_RCC_ClockConfig+0x1b4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e07e      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e8c:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <HAL_RCC_ClockConfig+0x1b4>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f023 0203 	bic.w	r2, r3, #3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	493f      	ldr	r1, [pc, #252]	; (8003f98 <HAL_RCC_ClockConfig+0x1b4>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9e:	f7fe ff73 	bl	8002d88 <HAL_GetTick>
 8003ea2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea6:	f7fe ff6f 	bl	8002d88 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e066      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ebc:	4b36      	ldr	r3, [pc, #216]	; (8003f98 <HAL_RCC_ClockConfig+0x1b4>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 020c 	and.w	r2, r3, #12
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d1eb      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eda:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <HAL_RCC_ClockConfig+0x1b4>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	492c      	ldr	r1, [pc, #176]	; (8003f98 <HAL_RCC_ClockConfig+0x1b4>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eec:	4b29      	ldr	r3, [pc, #164]	; (8003f94 <HAL_RCC_ClockConfig+0x1b0>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d210      	bcs.n	8003f1c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efa:	4b26      	ldr	r3, [pc, #152]	; (8003f94 <HAL_RCC_ClockConfig+0x1b0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f023 0207 	bic.w	r2, r3, #7
 8003f02:	4924      	ldr	r1, [pc, #144]	; (8003f94 <HAL_RCC_ClockConfig+0x1b0>)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0a:	4b22      	ldr	r3, [pc, #136]	; (8003f94 <HAL_RCC_ClockConfig+0x1b0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e036      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_RCC_ClockConfig+0x1b4>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4918      	ldr	r1, [pc, #96]	; (8003f98 <HAL_RCC_ClockConfig+0x1b4>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f46:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <HAL_RCC_ClockConfig+0x1b4>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4910      	ldr	r1, [pc, #64]	; (8003f98 <HAL_RCC_ClockConfig+0x1b4>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f5a:	f000 f825 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8003f5e:	4601      	mov	r1, r0
 8003f60:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <HAL_RCC_ClockConfig+0x1b4>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	4a0c      	ldr	r2, [pc, #48]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f6c:	5cd3      	ldrb	r3, [r2, r3]
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	fa21 f303 	lsr.w	r3, r1, r3
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fdba 	bl	8002af8 <HAL_InitTick>
 8003f84:	4603      	mov	r3, r0
 8003f86:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f88:	7afb      	ldrb	r3, [r7, #11]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40022000 	.word	0x40022000
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	080098ac 	.word	0x080098ac
 8003fa0:	20000040 	.word	0x20000040
 8003fa4:	20000044 	.word	0x20000044

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b089      	sub	sp, #36	; 0x24
 8003fac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb6:	4b3d      	ldr	r3, [pc, #244]	; (80040ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fc0:	4b3a      	ldr	r3, [pc, #232]	; (80040ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_RCC_GetSysClockFreq+0x34>
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b0c      	cmp	r3, #12
 8003fd4:	d121      	bne.n	800401a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d11e      	bne.n	800401a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fdc:	4b33      	ldr	r3, [pc, #204]	; (80040ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fe8:	4b30      	ldr	r3, [pc, #192]	; (80040ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fee:	0a1b      	lsrs	r3, r3, #8
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	e005      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ff8:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004004:	4a2a      	ldr	r2, [pc, #168]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10d      	bne.n	8004030 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004018:	e00a      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b04      	cmp	r3, #4
 800401e:	d102      	bne.n	8004026 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004020:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	e004      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d101      	bne.n	8004030 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800402c:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800402e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b0c      	cmp	r3, #12
 8004034:	d133      	bne.n	800409e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <HAL_RCC_GetSysClockFreq+0x104>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d002      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0xa4>
 8004046:	2b03      	cmp	r3, #3
 8004048:	d003      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0xaa>
 800404a:	e005      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800404c:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800404e:	617b      	str	r3, [r7, #20]
      break;
 8004050:	e005      	b.n	800405e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004052:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004054:	617b      	str	r3, [r7, #20]
      break;
 8004056:	e002      	b.n	800405e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	617b      	str	r3, [r7, #20]
      break;
 800405c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800405e:	4b13      	ldr	r3, [pc, #76]	; (80040ac <HAL_RCC_GetSysClockFreq+0x104>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	3301      	adds	r3, #1
 800406a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <HAL_RCC_GetSysClockFreq+0x104>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	0a1b      	lsrs	r3, r3, #8
 8004072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	fb02 f203 	mul.w	r2, r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_RCC_GetSysClockFreq+0x104>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	0e5b      	lsrs	r3, r3, #25
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	3301      	adds	r3, #1
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800409e:	69bb      	ldr	r3, [r7, #24]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3724      	adds	r7, #36	; 0x24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	40021000 	.word	0x40021000
 80040b0:	080098c4 	.word	0x080098c4
 80040b4:	00f42400 	.word	0x00f42400
 80040b8:	007a1200 	.word	0x007a1200

080040bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c0:	4b03      	ldr	r3, [pc, #12]	; (80040d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040c2:	681b      	ldr	r3, [r3, #0]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000040 	.word	0x20000040

080040d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040d8:	f7ff fff0 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 80040dc:	4601      	mov	r1, r0
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	4a04      	ldr	r2, [pc, #16]	; (80040fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80040ea:	5cd3      	ldrb	r3, [r2, r3]
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000
 80040fc:	080098bc 	.word	0x080098bc

08004100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004104:	f7ff ffda 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 8004108:	4601      	mov	r1, r0
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	0adb      	lsrs	r3, r3, #11
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	4a04      	ldr	r2, [pc, #16]	; (8004128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004116:	5cd3      	ldrb	r3, [r2, r3]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004120:	4618      	mov	r0, r3
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000
 8004128:	080098bc 	.word	0x080098bc

0800412c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	220f      	movs	r2, #15
 800413a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800413c:	4b12      	ldr	r3, [pc, #72]	; (8004188 <HAL_RCC_GetClockConfig+0x5c>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0203 	and.w	r2, r3, #3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <HAL_RCC_GetClockConfig+0x5c>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <HAL_RCC_GetClockConfig+0x5c>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_RCC_GetClockConfig+0x5c>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	08db      	lsrs	r3, r3, #3
 8004166:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800416e:	4b07      	ldr	r3, [pc, #28]	; (800418c <HAL_RCC_GetClockConfig+0x60>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0207 	and.w	r2, r3, #7
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	601a      	str	r2, [r3, #0]
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
 800418c:	40022000 	.word	0x40022000

08004190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800419c:	4b2a      	ldr	r3, [pc, #168]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041a8:	f7ff f9d2 	bl	8003550 <HAL_PWREx_GetVoltageRange>
 80041ac:	6178      	str	r0, [r7, #20]
 80041ae:	e014      	b.n	80041da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041b0:	4b25      	ldr	r3, [pc, #148]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	4a24      	ldr	r2, [pc, #144]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ba:	6593      	str	r3, [r2, #88]	; 0x58
 80041bc:	4b22      	ldr	r3, [pc, #136]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041c8:	f7ff f9c2 	bl	8003550 <HAL_PWREx_GetVoltageRange>
 80041cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041ce:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	4a1d      	ldr	r2, [pc, #116]	; (8004248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e0:	d10b      	bne.n	80041fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b80      	cmp	r3, #128	; 0x80
 80041e6:	d919      	bls.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2ba0      	cmp	r3, #160	; 0xa0
 80041ec:	d902      	bls.n	80041f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041ee:	2302      	movs	r3, #2
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	e013      	b.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041f4:	2301      	movs	r3, #1
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	e010      	b.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b80      	cmp	r3, #128	; 0x80
 80041fe:	d902      	bls.n	8004206 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004200:	2303      	movs	r3, #3
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	e00a      	b.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b80      	cmp	r3, #128	; 0x80
 800420a:	d102      	bne.n	8004212 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800420c:	2302      	movs	r3, #2
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	e004      	b.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b70      	cmp	r3, #112	; 0x70
 8004216:	d101      	bne.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004218:	2301      	movs	r3, #1
 800421a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 0207 	bic.w	r2, r3, #7
 8004224:	4909      	ldr	r1, [pc, #36]	; (800424c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800422c:	4b07      	ldr	r3, [pc, #28]	; (800424c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	429a      	cmp	r2, r3
 8004238:	d001      	beq.n	800423e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000
 800424c:	40022000 	.word	0x40022000

08004250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004258:	2300      	movs	r3, #0
 800425a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800425c:	2300      	movs	r3, #0
 800425e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004268:	2b00      	cmp	r3, #0
 800426a:	d03f      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004274:	d01c      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800427a:	d802      	bhi.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00e      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004280:	e01f      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004282:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004286:	d003      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004288:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800428c:	d01c      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800428e:	e018      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004290:	4b85      	ldr	r3, [pc, #532]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4a84      	ldr	r2, [pc, #528]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800429c:	e015      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fac9 	bl	800483c <RCCEx_PLLSAI1_Config>
 80042aa:	4603      	mov	r3, r0
 80042ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042ae:	e00c      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3320      	adds	r3, #32
 80042b4:	2100      	movs	r1, #0
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fbb0 	bl	8004a1c <RCCEx_PLLSAI2_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042c0:	e003      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	74fb      	strb	r3, [r7, #19]
      break;
 80042c6:	e000      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80042c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042d0:	4b75      	ldr	r3, [pc, #468]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042de:	4972      	ldr	r1, [pc, #456]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042e6:	e001      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d03f      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004300:	d01c      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004302:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004306:	d802      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00e      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800430c:	e01f      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800430e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004312:	d003      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004314:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004318:	d01c      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800431a:	e018      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800431c:	4b62      	ldr	r3, [pc, #392]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a61      	ldr	r2, [pc, #388]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004326:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004328:	e015      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	2100      	movs	r1, #0
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fa83 	bl	800483c <RCCEx_PLLSAI1_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800433a:	e00c      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3320      	adds	r3, #32
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fb6a 	bl	8004a1c <RCCEx_PLLSAI2_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800434c:	e003      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	74fb      	strb	r3, [r7, #19]
      break;
 8004352:	e000      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10b      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800435c:	4b52      	ldr	r3, [pc, #328]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800436a:	494f      	ldr	r1, [pc, #316]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004372:	e001      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80a0 	beq.w	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004386:	2300      	movs	r3, #0
 8004388:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800438a:	4b47      	ldr	r3, [pc, #284]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800438c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800439a:	2300      	movs	r3, #0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00d      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a0:	4b41      	ldr	r3, [pc, #260]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a4:	4a40      	ldr	r2, [pc, #256]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043aa:	6593      	str	r3, [r2, #88]	; 0x58
 80043ac:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b8:	2301      	movs	r3, #1
 80043ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043bc:	4b3b      	ldr	r3, [pc, #236]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a3a      	ldr	r2, [pc, #232]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80043c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043c8:	f7fe fcde 	bl	8002d88 <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ce:	e009      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d0:	f7fe fcda 	bl	8002d88 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d902      	bls.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	74fb      	strb	r3, [r7, #19]
        break;
 80043e2:	e005      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043e4:	4b31      	ldr	r3, [pc, #196]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0ef      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d15c      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043f6:	4b2c      	ldr	r3, [pc, #176]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004400:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01f      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	429a      	cmp	r2, r3
 8004412:	d019      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004414:	4b24      	ldr	r3, [pc, #144]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004420:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004426:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004430:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	4a1c      	ldr	r2, [pc, #112]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004440:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d016      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7fe fc99 	bl	8002d88 <HAL_GetTick>
 8004456:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004458:	e00b      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445a:	f7fe fc95 	bl	8002d88 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	f241 3288 	movw	r2, #5000	; 0x1388
 8004468:	4293      	cmp	r3, r2
 800446a:	d902      	bls.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	74fb      	strb	r3, [r7, #19]
            break;
 8004470:	e006      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0ec      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004496:	4904      	ldr	r1, [pc, #16]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800449e:	e009      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044a0:	7cfb      	ldrb	r3, [r7, #19]
 80044a2:	74bb      	strb	r3, [r7, #18]
 80044a4:	e006      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b0:	7cfb      	ldrb	r3, [r7, #19]
 80044b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044b4:	7c7b      	ldrb	r3, [r7, #17]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d105      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ba:	4b9e      	ldr	r3, [pc, #632]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	4a9d      	ldr	r2, [pc, #628]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044d2:	4b98      	ldr	r3, [pc, #608]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f023 0203 	bic.w	r2, r3, #3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	4994      	ldr	r1, [pc, #592]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044f4:	4b8f      	ldr	r3, [pc, #572]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f023 020c 	bic.w	r2, r3, #12
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	498c      	ldr	r1, [pc, #560]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004516:	4b87      	ldr	r3, [pc, #540]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	4983      	ldr	r1, [pc, #524]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004538:	4b7e      	ldr	r3, [pc, #504]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004546:	497b      	ldr	r1, [pc, #492]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800455a:	4b76      	ldr	r3, [pc, #472]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004568:	4972      	ldr	r1, [pc, #456]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800457c:	4b6d      	ldr	r3, [pc, #436]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	496a      	ldr	r1, [pc, #424]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800459e:	4b65      	ldr	r3, [pc, #404]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ac:	4961      	ldr	r1, [pc, #388]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045c0:	4b5c      	ldr	r3, [pc, #368]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ce:	4959      	ldr	r1, [pc, #356]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045e2:	4b54      	ldr	r3, [pc, #336]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f0:	4950      	ldr	r1, [pc, #320]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004604:	4b4b      	ldr	r3, [pc, #300]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004612:	4948      	ldr	r1, [pc, #288]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004626:	4b43      	ldr	r3, [pc, #268]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	493f      	ldr	r1, [pc, #252]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d028      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004648:	4b3a      	ldr	r3, [pc, #232]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004656:	4937      	ldr	r1, [pc, #220]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004666:	d106      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004668:	4b32      	ldr	r3, [pc, #200]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4a31      	ldr	r2, [pc, #196]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800466e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004672:	60d3      	str	r3, [r2, #12]
 8004674:	e011      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800467a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800467e:	d10c      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	2101      	movs	r1, #1
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f8d8 	bl	800483c <RCCEx_PLLSAI1_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d028      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046a6:	4b23      	ldr	r3, [pc, #140]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	491f      	ldr	r1, [pc, #124]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046c4:	d106      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c6:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	4a1a      	ldr	r2, [pc, #104]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80046cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046d0:	60d3      	str	r3, [r2, #12]
 80046d2:	e011      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2101      	movs	r1, #1
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f8a9 	bl	800483c <RCCEx_PLLSAI1_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d02b      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004712:	4908      	ldr	r1, [pc, #32]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004722:	d109      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004724:	4b03      	ldr	r3, [pc, #12]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4a02      	ldr	r2, [pc, #8]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800472a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800472e:	60d3      	str	r3, [r2, #12]
 8004730:	e014      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004740:	d10c      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3304      	adds	r3, #4
 8004746:	2101      	movs	r1, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f000 f877 	bl	800483c <RCCEx_PLLSAI1_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004752:	7cfb      	ldrb	r3, [r7, #19]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004758:	7cfb      	ldrb	r3, [r7, #19]
 800475a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d02f      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004768:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004776:	4928      	ldr	r1, [pc, #160]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004786:	d10d      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3304      	adds	r3, #4
 800478c:	2102      	movs	r1, #2
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f854 	bl	800483c <RCCEx_PLLSAI1_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d014      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800479e:	7cfb      	ldrb	r3, [r7, #19]
 80047a0:	74bb      	strb	r3, [r7, #18]
 80047a2:	e011      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ac:	d10c      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3320      	adds	r3, #32
 80047b2:	2102      	movs	r1, #2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 f931 	bl	8004a1c <RCCEx_PLLSAI2_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047be:	7cfb      	ldrb	r3, [r7, #19]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047d4:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e2:	490d      	ldr	r1, [pc, #52]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047f6:	4b08      	ldr	r3, [pc, #32]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004806:	4904      	ldr	r1, [pc, #16]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800480e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000

0800481c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a04      	ldr	r2, [pc, #16]	; (8004838 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004826:	f043 0304 	orr.w	r3, r3, #4
 800482a:	6013      	str	r3, [r2, #0]
}
 800482c:	bf00      	nop
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000

0800483c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800484a:	4b73      	ldr	r3, [pc, #460]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d018      	beq.n	8004888 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004856:	4b70      	ldr	r3, [pc, #448]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f003 0203 	and.w	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d10d      	bne.n	8004882 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
       ||
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800486e:	4b6a      	ldr	r3, [pc, #424]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	091b      	lsrs	r3, r3, #4
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
       ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d044      	beq.n	800490c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	73fb      	strb	r3, [r7, #15]
 8004886:	e041      	b.n	800490c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d00c      	beq.n	80048aa <RCCEx_PLLSAI1_Config+0x6e>
 8004890:	2b03      	cmp	r3, #3
 8004892:	d013      	beq.n	80048bc <RCCEx_PLLSAI1_Config+0x80>
 8004894:	2b01      	cmp	r3, #1
 8004896:	d120      	bne.n	80048da <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004898:	4b5f      	ldr	r3, [pc, #380]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d11d      	bne.n	80048e0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a8:	e01a      	b.n	80048e0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048aa:	4b5b      	ldr	r3, [pc, #364]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d116      	bne.n	80048e4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ba:	e013      	b.n	80048e4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048bc:	4b56      	ldr	r3, [pc, #344]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10f      	bne.n	80048e8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048c8:	4b53      	ldr	r3, [pc, #332]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d109      	bne.n	80048e8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048d8:	e006      	b.n	80048e8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
      break;
 80048de:	e004      	b.n	80048ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80048e0:	bf00      	nop
 80048e2:	e002      	b.n	80048ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80048e4:	bf00      	nop
 80048e6:	e000      	b.n	80048ea <RCCEx_PLLSAI1_Config+0xae>
      break;
 80048e8:	bf00      	nop
    }

    if(status == HAL_OK)
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10d      	bne.n	800490c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048f0:	4b49      	ldr	r3, [pc, #292]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6819      	ldr	r1, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	3b01      	subs	r3, #1
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	430b      	orrs	r3, r1
 8004906:	4944      	ldr	r1, [pc, #272]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004908:	4313      	orrs	r3, r2
 800490a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d17d      	bne.n	8004a0e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004912:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a40      	ldr	r2, [pc, #256]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004918:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800491c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800491e:	f7fe fa33 	bl	8002d88 <HAL_GetTick>
 8004922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004924:	e009      	b.n	800493a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004926:	f7fe fa2f 	bl	8002d88 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d902      	bls.n	800493a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	73fb      	strb	r3, [r7, #15]
        break;
 8004938:	e005      	b.n	8004946 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800493a:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1ef      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d160      	bne.n	8004a0e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d111      	bne.n	8004976 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004952:	4b31      	ldr	r3, [pc, #196]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800495a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6892      	ldr	r2, [r2, #8]
 8004962:	0211      	lsls	r1, r2, #8
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68d2      	ldr	r2, [r2, #12]
 8004968:	0912      	lsrs	r2, r2, #4
 800496a:	0452      	lsls	r2, r2, #17
 800496c:	430a      	orrs	r2, r1
 800496e:	492a      	ldr	r1, [pc, #168]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004970:	4313      	orrs	r3, r2
 8004972:	610b      	str	r3, [r1, #16]
 8004974:	e027      	b.n	80049c6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d112      	bne.n	80049a2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800497c:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004984:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6892      	ldr	r2, [r2, #8]
 800498c:	0211      	lsls	r1, r2, #8
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6912      	ldr	r2, [r2, #16]
 8004992:	0852      	lsrs	r2, r2, #1
 8004994:	3a01      	subs	r2, #1
 8004996:	0552      	lsls	r2, r2, #21
 8004998:	430a      	orrs	r2, r1
 800499a:	491f      	ldr	r1, [pc, #124]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 800499c:	4313      	orrs	r3, r2
 800499e:	610b      	str	r3, [r1, #16]
 80049a0:	e011      	b.n	80049c6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049a2:	4b1d      	ldr	r3, [pc, #116]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80049aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6892      	ldr	r2, [r2, #8]
 80049b2:	0211      	lsls	r1, r2, #8
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6952      	ldr	r2, [r2, #20]
 80049b8:	0852      	lsrs	r2, r2, #1
 80049ba:	3a01      	subs	r2, #1
 80049bc:	0652      	lsls	r2, r2, #25
 80049be:	430a      	orrs	r2, r1
 80049c0:	4915      	ldr	r1, [pc, #84]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049c6:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a13      	ldr	r2, [pc, #76]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d2:	f7fe f9d9 	bl	8002d88 <HAL_GetTick>
 80049d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049d8:	e009      	b.n	80049ee <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049da:	f7fe f9d5 	bl	8002d88 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d902      	bls.n	80049ee <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	73fb      	strb	r3, [r7, #15]
          break;
 80049ec:	e005      	b.n	80049fa <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0ef      	beq.n	80049da <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	4903      	ldr	r1, [pc, #12]	; (8004a18 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000

08004a1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a2a:	4b68      	ldr	r3, [pc, #416]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d018      	beq.n	8004a68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a36:	4b65      	ldr	r3, [pc, #404]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0203 	and.w	r2, r3, #3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d10d      	bne.n	8004a62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
       ||
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a4e:	4b5f      	ldr	r3, [pc, #380]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
       ||
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d044      	beq.n	8004aec <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
 8004a66:	e041      	b.n	8004aec <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d00c      	beq.n	8004a8a <RCCEx_PLLSAI2_Config+0x6e>
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d013      	beq.n	8004a9c <RCCEx_PLLSAI2_Config+0x80>
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d120      	bne.n	8004aba <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a78:	4b54      	ldr	r3, [pc, #336]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d11d      	bne.n	8004ac0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a88:	e01a      	b.n	8004ac0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a8a:	4b50      	ldr	r3, [pc, #320]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d116      	bne.n	8004ac4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a9a:	e013      	b.n	8004ac4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a9c:	4b4b      	ldr	r3, [pc, #300]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10f      	bne.n	8004ac8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aa8:	4b48      	ldr	r3, [pc, #288]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d109      	bne.n	8004ac8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ab8:	e006      	b.n	8004ac8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
      break;
 8004abe:	e004      	b.n	8004aca <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004ac0:	bf00      	nop
 8004ac2:	e002      	b.n	8004aca <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004ac4:	bf00      	nop
 8004ac6:	e000      	b.n	8004aca <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004ac8:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10d      	bne.n	8004aec <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ad0:	4b3e      	ldr	r3, [pc, #248]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6819      	ldr	r1, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	4939      	ldr	r1, [pc, #228]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d167      	bne.n	8004bc2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004af2:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a35      	ldr	r2, [pc, #212]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004afe:	f7fe f943 	bl	8002d88 <HAL_GetTick>
 8004b02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b04:	e009      	b.n	8004b1a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b06:	f7fe f93f 	bl	8002d88 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d902      	bls.n	8004b1a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	73fb      	strb	r3, [r7, #15]
        break;
 8004b18:	e005      	b.n	8004b26 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b1a:	4b2c      	ldr	r3, [pc, #176]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1ef      	bne.n	8004b06 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d14a      	bne.n	8004bc2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d111      	bne.n	8004b56 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b32:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6892      	ldr	r2, [r2, #8]
 8004b42:	0211      	lsls	r1, r2, #8
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	68d2      	ldr	r2, [r2, #12]
 8004b48:	0912      	lsrs	r2, r2, #4
 8004b4a:	0452      	lsls	r2, r2, #17
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	491f      	ldr	r1, [pc, #124]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	614b      	str	r3, [r1, #20]
 8004b54:	e011      	b.n	8004b7a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b56:	4b1d      	ldr	r3, [pc, #116]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6892      	ldr	r2, [r2, #8]
 8004b66:	0211      	lsls	r1, r2, #8
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6912      	ldr	r2, [r2, #16]
 8004b6c:	0852      	lsrs	r2, r2, #1
 8004b6e:	3a01      	subs	r2, #1
 8004b70:	0652      	lsls	r2, r2, #25
 8004b72:	430a      	orrs	r2, r1
 8004b74:	4915      	ldr	r1, [pc, #84]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b7a:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a13      	ldr	r2, [pc, #76]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b86:	f7fe f8ff 	bl	8002d88 <HAL_GetTick>
 8004b8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b8c:	e009      	b.n	8004ba2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b8e:	f7fe f8fb 	bl	8002d88 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d902      	bls.n	8004ba2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	73fb      	strb	r3, [r7, #15]
          break;
 8004ba0:	e005      	b.n	8004bae <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ba2:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0ef      	beq.n	8004b8e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d106      	bne.n	8004bc2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	4903      	ldr	r1, [pc, #12]	; (8004bcc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40021000 	.word	0x40021000

08004bd0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e042      	b.n	8004c68 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	795b      	ldrb	r3, [r3, #5]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d105      	bne.n	8004bf8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fd feb4 	bl	8002960 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0204 	orr.w	r2, r2, #4
 8004c0c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c18:	2b40      	cmp	r3, #64	; 0x40
 8004c1a:	d104      	bne.n	8004c26 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2204      	movs	r2, #4
 8004c20:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e020      	b.n	8004c68 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004c26:	f7fe f8af 	bl	8002d88 <HAL_GetTick>
 8004c2a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004c2c:	e00e      	b.n	8004c4c <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004c2e:	f7fe f8ab 	bl	8002d88 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d907      	bls.n	8004c4c <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2204      	movs	r2, #4
 8004c40:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e00d      	b.n	8004c68 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d0e9      	beq.n	8004c2e <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	791b      	ldrb	r3, [r3, #4]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_RNG_GenerateRandomNumber+0x1a>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e03d      	b.n	8004d06 <HAL_RNG_GenerateRandomNumber+0x96>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	795b      	ldrb	r3, [r3, #5]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d12c      	bne.n	8004cf4 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ca0:	f7fe f872 	bl	8002d88 <HAL_GetTick>
 8004ca4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004ca6:	e011      	b.n	8004ccc <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004ca8:	f7fe f86e 	bl	8002d88 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d90a      	bls.n	8004ccc <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e01c      	b.n	8004d06 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d1e6      	bne.n	8004ca8 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	715a      	strb	r2, [r3, #5]
 8004cf2:	e004      	b.n	8004cfe <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	711a      	strb	r2, [r3, #4]

  return status;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e07c      	b.n	8004e1a <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fd fe30 	bl	80029a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d60:	d902      	bls.n	8004d68 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e002      	b.n	8004d6e <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d76:	d007      	beq.n	8004d88 <HAL_SPI_Init+0x7a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d80:	d002      	beq.n	8004d88 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d98:	d903      	bls.n	8004da2 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
 8004da0:	e002      	b.n	8004da8 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	ea42 0103 	orr.w	r1, r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	0c1b      	lsrs	r3, r3, #16
 8004de8:	f003 0204 	and.w	r2, r3, #4
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	ea42 0103 	orr.w	r1, r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e30:	b2db      	uxtb	r3, r3
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e01d      	b.n	8004e8c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fd fddf 	bl	8002a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	f000 fa33 	bl	80052e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <HAL_TIM_Base_Start_IT+0x50>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b06      	cmp	r3, #6
 8004ebc:	d00b      	beq.n	8004ed6 <HAL_TIM_Base_Start_IT+0x42>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec4:	d007      	beq.n	8004ed6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0201 	orr.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	00010007 	.word	0x00010007

08004ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d122      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d11b      	bne.n	8004f44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0202 	mvn.w	r2, #2
 8004f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f9be 	bl	80052ac <HAL_TIM_IC_CaptureCallback>
 8004f30:	e005      	b.n	8004f3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f9b0 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f9c1 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d122      	bne.n	8004f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d11b      	bne.n	8004f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0204 	mvn.w	r2, #4
 8004f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f994 	bl	80052ac <HAL_TIM_IC_CaptureCallback>
 8004f84:	e005      	b.n	8004f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f986 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f997 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d122      	bne.n	8004fec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d11b      	bne.n	8004fec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0208 	mvn.w	r2, #8
 8004fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2204      	movs	r2, #4
 8004fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f96a 	bl	80052ac <HAL_TIM_IC_CaptureCallback>
 8004fd8:	e005      	b.n	8004fe6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f95c 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f96d 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b10      	cmp	r3, #16
 8004ff8:	d122      	bne.n	8005040 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b10      	cmp	r3, #16
 8005006:	d11b      	bne.n	8005040 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0210 	mvn.w	r2, #16
 8005010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2208      	movs	r2, #8
 8005016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f940 	bl	80052ac <HAL_TIM_IC_CaptureCallback>
 800502c:	e005      	b.n	800503a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f932 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f943 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d10e      	bne.n	800506c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b01      	cmp	r3, #1
 800505a:	d107      	bne.n	800506c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0201 	mvn.w	r2, #1
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fd fbc4 	bl	80027f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005076:	2b80      	cmp	r3, #128	; 0x80
 8005078:	d10e      	bne.n	8005098 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005084:	2b80      	cmp	r3, #128	; 0x80
 8005086:	d107      	bne.n	8005098 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 faee 	bl	8005674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a6:	d10e      	bne.n	80050c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b2:	2b80      	cmp	r3, #128	; 0x80
 80050b4:	d107      	bne.n	80050c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fae1 	bl	8005688 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b40      	cmp	r3, #64	; 0x40
 80050d2:	d10e      	bne.n	80050f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050de:	2b40      	cmp	r3, #64	; 0x40
 80050e0:	d107      	bne.n	80050f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f8f1 	bl	80052d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d10e      	bne.n	800511e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b20      	cmp	r3, #32
 800510c:	d107      	bne.n	800511e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f06f 0220 	mvn.w	r2, #32
 8005116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 faa1 	bl	8005660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_TIM_ConfigClockSource+0x18>
 800513a:	2302      	movs	r3, #2
 800513c:	e0a8      	b.n	8005290 <HAL_TIM_ConfigClockSource+0x16a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800515c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005160:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005168:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d067      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x124>
 800517a:	2b40      	cmp	r3, #64	; 0x40
 800517c:	d80b      	bhi.n	8005196 <HAL_TIM_ConfigClockSource+0x70>
 800517e:	2b10      	cmp	r3, #16
 8005180:	d073      	beq.n	800526a <HAL_TIM_ConfigClockSource+0x144>
 8005182:	2b10      	cmp	r3, #16
 8005184:	d802      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x66>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d06f      	beq.n	800526a <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800518a:	e078      	b.n	800527e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800518c:	2b20      	cmp	r3, #32
 800518e:	d06c      	beq.n	800526a <HAL_TIM_ConfigClockSource+0x144>
 8005190:	2b30      	cmp	r3, #48	; 0x30
 8005192:	d06a      	beq.n	800526a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005194:	e073      	b.n	800527e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005196:	2b70      	cmp	r3, #112	; 0x70
 8005198:	d00d      	beq.n	80051b6 <HAL_TIM_ConfigClockSource+0x90>
 800519a:	2b70      	cmp	r3, #112	; 0x70
 800519c:	d804      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x82>
 800519e:	2b50      	cmp	r3, #80	; 0x50
 80051a0:	d033      	beq.n	800520a <HAL_TIM_ConfigClockSource+0xe4>
 80051a2:	2b60      	cmp	r3, #96	; 0x60
 80051a4:	d041      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x104>
      break;
 80051a6:	e06a      	b.n	800527e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ac:	d066      	beq.n	800527c <HAL_TIM_ConfigClockSource+0x156>
 80051ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b2:	d017      	beq.n	80051e4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80051b4:	e063      	b.n	800527e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	6899      	ldr	r1, [r3, #8]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f000 f9a3 	bl	8005510 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	609a      	str	r2, [r3, #8]
      break;
 80051e2:	e04c      	b.n	800527e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	6899      	ldr	r1, [r3, #8]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f000 f98c 	bl	8005510 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005206:	609a      	str	r2, [r3, #8]
      break;
 8005208:	e039      	b.n	800527e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6859      	ldr	r1, [r3, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	461a      	mov	r2, r3
 8005218:	f000 f900 	bl	800541c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2150      	movs	r1, #80	; 0x50
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f959 	bl	80054da <TIM_ITRx_SetConfig>
      break;
 8005228:	e029      	b.n	800527e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6859      	ldr	r1, [r3, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	461a      	mov	r2, r3
 8005238:	f000 f91f 	bl	800547a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2160      	movs	r1, #96	; 0x60
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f949 	bl	80054da <TIM_ITRx_SetConfig>
      break;
 8005248:	e019      	b.n	800527e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6859      	ldr	r1, [r3, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	461a      	mov	r2, r3
 8005258:	f000 f8e0 	bl	800541c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2140      	movs	r1, #64	; 0x40
 8005262:	4618      	mov	r0, r3
 8005264:	f000 f939 	bl	80054da <TIM_ITRx_SetConfig>
      break;
 8005268:	e009      	b.n	800527e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4619      	mov	r1, r3
 8005274:	4610      	mov	r0, r2
 8005276:	f000 f930 	bl	80054da <TIM_ITRx_SetConfig>
      break;
 800527a:	e000      	b.n	800527e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800527c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a40      	ldr	r2, [pc, #256]	; (80053fc <TIM_Base_SetConfig+0x114>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d013      	beq.n	8005328 <TIM_Base_SetConfig+0x40>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005306:	d00f      	beq.n	8005328 <TIM_Base_SetConfig+0x40>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a3d      	ldr	r2, [pc, #244]	; (8005400 <TIM_Base_SetConfig+0x118>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00b      	beq.n	8005328 <TIM_Base_SetConfig+0x40>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a3c      	ldr	r2, [pc, #240]	; (8005404 <TIM_Base_SetConfig+0x11c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d007      	beq.n	8005328 <TIM_Base_SetConfig+0x40>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a3b      	ldr	r2, [pc, #236]	; (8005408 <TIM_Base_SetConfig+0x120>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d003      	beq.n	8005328 <TIM_Base_SetConfig+0x40>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a3a      	ldr	r2, [pc, #232]	; (800540c <TIM_Base_SetConfig+0x124>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d108      	bne.n	800533a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a2f      	ldr	r2, [pc, #188]	; (80053fc <TIM_Base_SetConfig+0x114>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d01f      	beq.n	8005382 <TIM_Base_SetConfig+0x9a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005348:	d01b      	beq.n	8005382 <TIM_Base_SetConfig+0x9a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a2c      	ldr	r2, [pc, #176]	; (8005400 <TIM_Base_SetConfig+0x118>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d017      	beq.n	8005382 <TIM_Base_SetConfig+0x9a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a2b      	ldr	r2, [pc, #172]	; (8005404 <TIM_Base_SetConfig+0x11c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d013      	beq.n	8005382 <TIM_Base_SetConfig+0x9a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a2a      	ldr	r2, [pc, #168]	; (8005408 <TIM_Base_SetConfig+0x120>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00f      	beq.n	8005382 <TIM_Base_SetConfig+0x9a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a29      	ldr	r2, [pc, #164]	; (800540c <TIM_Base_SetConfig+0x124>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00b      	beq.n	8005382 <TIM_Base_SetConfig+0x9a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a28      	ldr	r2, [pc, #160]	; (8005410 <TIM_Base_SetConfig+0x128>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d007      	beq.n	8005382 <TIM_Base_SetConfig+0x9a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a27      	ldr	r2, [pc, #156]	; (8005414 <TIM_Base_SetConfig+0x12c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d003      	beq.n	8005382 <TIM_Base_SetConfig+0x9a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a26      	ldr	r2, [pc, #152]	; (8005418 <TIM_Base_SetConfig+0x130>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d108      	bne.n	8005394 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a10      	ldr	r2, [pc, #64]	; (80053fc <TIM_Base_SetConfig+0x114>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00f      	beq.n	80053e0 <TIM_Base_SetConfig+0xf8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a12      	ldr	r2, [pc, #72]	; (800540c <TIM_Base_SetConfig+0x124>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00b      	beq.n	80053e0 <TIM_Base_SetConfig+0xf8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a11      	ldr	r2, [pc, #68]	; (8005410 <TIM_Base_SetConfig+0x128>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d007      	beq.n	80053e0 <TIM_Base_SetConfig+0xf8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a10      	ldr	r2, [pc, #64]	; (8005414 <TIM_Base_SetConfig+0x12c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_Base_SetConfig+0xf8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a0f      	ldr	r2, [pc, #60]	; (8005418 <TIM_Base_SetConfig+0x130>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d103      	bne.n	80053e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	615a      	str	r2, [r3, #20]
}
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40012c00 	.word	0x40012c00
 8005400:	40000400 	.word	0x40000400
 8005404:	40000800 	.word	0x40000800
 8005408:	40000c00 	.word	0x40000c00
 800540c:	40013400 	.word	0x40013400
 8005410:	40014000 	.word	0x40014000
 8005414:	40014400 	.word	0x40014400
 8005418:	40014800 	.word	0x40014800

0800541c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f023 0201 	bic.w	r2, r3, #1
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f023 030a 	bic.w	r3, r3, #10
 8005458:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	bf00      	nop
 8005470:	371c      	adds	r7, #28
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800547a:	b480      	push	{r7}
 800547c:	b087      	sub	sp, #28
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f023 0210 	bic.w	r2, r3, #16
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	031b      	lsls	r3, r3, #12
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f043 0307 	orr.w	r3, r3, #7
 80054fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	609a      	str	r2, [r3, #8]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800552a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	021a      	lsls	r2, r3, #8
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	431a      	orrs	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4313      	orrs	r3, r2
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	609a      	str	r2, [r3, #8]
}
 8005544:	bf00      	nop
 8005546:	371c      	adds	r7, #28
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005564:	2302      	movs	r3, #2
 8005566:	e068      	b.n	800563a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a2e      	ldr	r2, [pc, #184]	; (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a2d      	ldr	r2, [pc, #180]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d108      	bne.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1e      	ldr	r2, [pc, #120]	; (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01d      	beq.n	800560e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055da:	d018      	beq.n	800560e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1b      	ldr	r2, [pc, #108]	; (8005650 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1a      	ldr	r2, [pc, #104]	; (8005654 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a18      	ldr	r2, [pc, #96]	; (8005658 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a13      	ldr	r2, [pc, #76]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a14      	ldr	r2, [pc, #80]	; (800565c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d10c      	bne.n	8005628 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	4313      	orrs	r3, r2
 800561e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40013400 	.word	0x40013400
 8005650:	40000400 	.word	0x40000400
 8005654:	40000800 	.word	0x40000800
 8005658:	40000c00 	.word	0x40000c00
 800565c:	40014000 	.word	0x40014000

08005660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e040      	b.n	8005730 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fd f9d6 	bl	8002a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2224      	movs	r2, #36	; 0x24
 80056c8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0201 	bic.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f8c0 	bl	8005860 <UART_SetConfig>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e022      	b.n	8005730 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fc26 	bl	8005f44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fcad 	bl	8006088 <UART_CheckIdleState>
 800572e:	4603      	mov	r3, r0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	4613      	mov	r3, r2
 8005746:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800574c:	2b20      	cmp	r3, #32
 800574e:	f040 8081 	bne.w	8005854 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <HAL_UART_Transmit+0x26>
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e079      	b.n	8005856 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_UART_Transmit+0x38>
 800576c:	2302      	movs	r3, #2
 800576e:	e072      	b.n	8005856 <HAL_UART_Transmit+0x11e>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2221      	movs	r2, #33	; 0x21
 8005782:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005784:	f7fd fb00 	bl	8002d88 <HAL_GetTick>
 8005788:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	88fa      	ldrh	r2, [r7, #6]
 800578e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	88fa      	ldrh	r2, [r7, #6]
 8005796:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a2:	d108      	bne.n	80057b6 <HAL_UART_Transmit+0x7e>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d104      	bne.n	80057b6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	e003      	b.n	80057be <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80057c6:	e02d      	b.n	8005824 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2200      	movs	r2, #0
 80057d0:	2180      	movs	r1, #128	; 0x80
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 fc9d 	bl	8006112 <UART_WaitOnFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e039      	b.n	8005856 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10b      	bne.n	8005800 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	881a      	ldrh	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057f4:	b292      	uxth	r2, r2
 80057f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	3302      	adds	r3, #2
 80057fc:	61bb      	str	r3, [r7, #24]
 80057fe:	e008      	b.n	8005812 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	781a      	ldrb	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	b292      	uxth	r2, r2
 800580a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	3301      	adds	r3, #1
 8005810:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1cb      	bne.n	80057c8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2200      	movs	r2, #0
 8005838:	2140      	movs	r1, #64	; 0x40
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fc69 	bl	8006112 <UART_WaitOnFlagUntilTimeout>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e005      	b.n	8005856 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	e000      	b.n	8005856 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005854:	2302      	movs	r3, #2
  }
}
 8005856:	4618      	mov	r0, r3
 8005858:	3720      	adds	r7, #32
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005860:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005864:	b08a      	sub	sp, #40	; 0x28
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800586a:	2300      	movs	r3, #0
 800586c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005872:	2300      	movs	r3, #0
 8005874:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	4313      	orrs	r3, r2
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	4bb8      	ldr	r3, [pc, #736]	; (8005b78 <UART_SetConfig+0x318>)
 8005896:	4013      	ands	r3, r2
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6812      	ldr	r2, [r2, #0]
 800589c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800589e:	430b      	orrs	r3, r1
 80058a0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4aae      	ldr	r2, [pc, #696]	; (8005b7c <UART_SetConfig+0x31c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d004      	beq.n	80058d2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ce:	4313      	orrs	r3, r2
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e2:	430a      	orrs	r2, r1
 80058e4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4aa5      	ldr	r2, [pc, #660]	; (8005b80 <UART_SetConfig+0x320>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d126      	bne.n	800593e <UART_SetConfig+0xde>
 80058f0:	4ba4      	ldr	r3, [pc, #656]	; (8005b84 <UART_SetConfig+0x324>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d81a      	bhi.n	8005934 <UART_SetConfig+0xd4>
 80058fe:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <UART_SetConfig+0xa4>)
 8005900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005904:	08005915 	.word	0x08005915
 8005908:	08005925 	.word	0x08005925
 800590c:	0800591d 	.word	0x0800591d
 8005910:	0800592d 	.word	0x0800592d
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800591a:	e105      	b.n	8005b28 <UART_SetConfig+0x2c8>
 800591c:	2302      	movs	r3, #2
 800591e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005922:	e101      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005924:	2304      	movs	r3, #4
 8005926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800592a:	e0fd      	b.n	8005b28 <UART_SetConfig+0x2c8>
 800592c:	2308      	movs	r3, #8
 800592e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005932:	e0f9      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005934:	2310      	movs	r3, #16
 8005936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800593a:	bf00      	nop
 800593c:	e0f4      	b.n	8005b28 <UART_SetConfig+0x2c8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a91      	ldr	r2, [pc, #580]	; (8005b88 <UART_SetConfig+0x328>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d138      	bne.n	80059ba <UART_SetConfig+0x15a>
 8005948:	4b8e      	ldr	r3, [pc, #568]	; (8005b84 <UART_SetConfig+0x324>)
 800594a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594e:	f003 030c 	and.w	r3, r3, #12
 8005952:	2b0c      	cmp	r3, #12
 8005954:	d82c      	bhi.n	80059b0 <UART_SetConfig+0x150>
 8005956:	a201      	add	r2, pc, #4	; (adr r2, 800595c <UART_SetConfig+0xfc>)
 8005958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595c:	08005991 	.word	0x08005991
 8005960:	080059b1 	.word	0x080059b1
 8005964:	080059b1 	.word	0x080059b1
 8005968:	080059b1 	.word	0x080059b1
 800596c:	080059a1 	.word	0x080059a1
 8005970:	080059b1 	.word	0x080059b1
 8005974:	080059b1 	.word	0x080059b1
 8005978:	080059b1 	.word	0x080059b1
 800597c:	08005999 	.word	0x08005999
 8005980:	080059b1 	.word	0x080059b1
 8005984:	080059b1 	.word	0x080059b1
 8005988:	080059b1 	.word	0x080059b1
 800598c:	080059a9 	.word	0x080059a9
 8005990:	2300      	movs	r3, #0
 8005992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005996:	e0c7      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005998:	2302      	movs	r3, #2
 800599a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800599e:	e0c3      	b.n	8005b28 <UART_SetConfig+0x2c8>
 80059a0:	2304      	movs	r3, #4
 80059a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059a6:	e0bf      	b.n	8005b28 <UART_SetConfig+0x2c8>
 80059a8:	2308      	movs	r3, #8
 80059aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ae:	e0bb      	b.n	8005b28 <UART_SetConfig+0x2c8>
 80059b0:	2310      	movs	r3, #16
 80059b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b6:	bf00      	nop
 80059b8:	e0b6      	b.n	8005b28 <UART_SetConfig+0x2c8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a73      	ldr	r2, [pc, #460]	; (8005b8c <UART_SetConfig+0x32c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d125      	bne.n	8005a10 <UART_SetConfig+0x1b0>
 80059c4:	4b6f      	ldr	r3, [pc, #444]	; (8005b84 <UART_SetConfig+0x324>)
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059ce:	2b10      	cmp	r3, #16
 80059d0:	d011      	beq.n	80059f6 <UART_SetConfig+0x196>
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d802      	bhi.n	80059dc <UART_SetConfig+0x17c>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <UART_SetConfig+0x186>
 80059da:	e014      	b.n	8005a06 <UART_SetConfig+0x1a6>
 80059dc:	2b20      	cmp	r3, #32
 80059de:	d006      	beq.n	80059ee <UART_SetConfig+0x18e>
 80059e0:	2b30      	cmp	r3, #48	; 0x30
 80059e2:	d00c      	beq.n	80059fe <UART_SetConfig+0x19e>
 80059e4:	e00f      	b.n	8005a06 <UART_SetConfig+0x1a6>
 80059e6:	2300      	movs	r3, #0
 80059e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ec:	e09c      	b.n	8005b28 <UART_SetConfig+0x2c8>
 80059ee:	2302      	movs	r3, #2
 80059f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059f4:	e098      	b.n	8005b28 <UART_SetConfig+0x2c8>
 80059f6:	2304      	movs	r3, #4
 80059f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059fc:	e094      	b.n	8005b28 <UART_SetConfig+0x2c8>
 80059fe:	2308      	movs	r3, #8
 8005a00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a04:	e090      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005a06:	2310      	movs	r3, #16
 8005a08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0c:	bf00      	nop
 8005a0e:	e08b      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a5e      	ldr	r2, [pc, #376]	; (8005b90 <UART_SetConfig+0x330>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d125      	bne.n	8005a66 <UART_SetConfig+0x206>
 8005a1a:	4b5a      	ldr	r3, [pc, #360]	; (8005b84 <UART_SetConfig+0x324>)
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a24:	2b40      	cmp	r3, #64	; 0x40
 8005a26:	d011      	beq.n	8005a4c <UART_SetConfig+0x1ec>
 8005a28:	2b40      	cmp	r3, #64	; 0x40
 8005a2a:	d802      	bhi.n	8005a32 <UART_SetConfig+0x1d2>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <UART_SetConfig+0x1dc>
 8005a30:	e014      	b.n	8005a5c <UART_SetConfig+0x1fc>
 8005a32:	2b80      	cmp	r3, #128	; 0x80
 8005a34:	d006      	beq.n	8005a44 <UART_SetConfig+0x1e4>
 8005a36:	2bc0      	cmp	r3, #192	; 0xc0
 8005a38:	d00c      	beq.n	8005a54 <UART_SetConfig+0x1f4>
 8005a3a:	e00f      	b.n	8005a5c <UART_SetConfig+0x1fc>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a42:	e071      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005a44:	2302      	movs	r3, #2
 8005a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a4a:	e06d      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a52:	e069      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005a54:	2308      	movs	r3, #8
 8005a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a5a:	e065      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a62:	bf00      	nop
 8005a64:	e060      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a4a      	ldr	r2, [pc, #296]	; (8005b94 <UART_SetConfig+0x334>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d129      	bne.n	8005ac4 <UART_SetConfig+0x264>
 8005a70:	4b44      	ldr	r3, [pc, #272]	; (8005b84 <UART_SetConfig+0x324>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7e:	d014      	beq.n	8005aaa <UART_SetConfig+0x24a>
 8005a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a84:	d802      	bhi.n	8005a8c <UART_SetConfig+0x22c>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <UART_SetConfig+0x23a>
 8005a8a:	e016      	b.n	8005aba <UART_SetConfig+0x25a>
 8005a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a90:	d007      	beq.n	8005aa2 <UART_SetConfig+0x242>
 8005a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a96:	d00c      	beq.n	8005ab2 <UART_SetConfig+0x252>
 8005a98:	e00f      	b.n	8005aba <UART_SetConfig+0x25a>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa0:	e042      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aa8:	e03e      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005aaa:	2304      	movs	r3, #4
 8005aac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ab0:	e03a      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ab8:	e036      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005aba:	2310      	movs	r3, #16
 8005abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac0:	bf00      	nop
 8005ac2:	e031      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a2c      	ldr	r2, [pc, #176]	; (8005b7c <UART_SetConfig+0x31c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d129      	bne.n	8005b22 <UART_SetConfig+0x2c2>
 8005ace:	4b2d      	ldr	r3, [pc, #180]	; (8005b84 <UART_SetConfig+0x324>)
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005adc:	d014      	beq.n	8005b08 <UART_SetConfig+0x2a8>
 8005ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae2:	d802      	bhi.n	8005aea <UART_SetConfig+0x28a>
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <UART_SetConfig+0x298>
 8005ae8:	e016      	b.n	8005b18 <UART_SetConfig+0x2b8>
 8005aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aee:	d007      	beq.n	8005b00 <UART_SetConfig+0x2a0>
 8005af0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005af4:	d00c      	beq.n	8005b10 <UART_SetConfig+0x2b0>
 8005af6:	e00f      	b.n	8005b18 <UART_SetConfig+0x2b8>
 8005af8:	2300      	movs	r3, #0
 8005afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afe:	e013      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005b00:	2302      	movs	r3, #2
 8005b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b06:	e00f      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b0e:	e00b      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005b10:	2308      	movs	r3, #8
 8005b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b16:	e007      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005b18:	2310      	movs	r3, #16
 8005b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b1e:	bf00      	nop
 8005b20:	e002      	b.n	8005b28 <UART_SetConfig+0x2c8>
 8005b22:	2310      	movs	r3, #16
 8005b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a13      	ldr	r2, [pc, #76]	; (8005b7c <UART_SetConfig+0x31c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	f040 80fe 	bne.w	8005d30 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d837      	bhi.n	8005bac <UART_SetConfig+0x34c>
 8005b3c:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <UART_SetConfig+0x2e4>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005b69 	.word	0x08005b69
 8005b48:	08005bad 	.word	0x08005bad
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005bad 	.word	0x08005bad
 8005b54:	08005b9d 	.word	0x08005b9d
 8005b58:	08005bad 	.word	0x08005bad
 8005b5c:	08005bad 	.word	0x08005bad
 8005b60:	08005bad 	.word	0x08005bad
 8005b64:	08005ba5 	.word	0x08005ba5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005b68:	f7fe fab4 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
 8005b6c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b6e:	e020      	b.n	8005bb2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005b70:	4b09      	ldr	r3, [pc, #36]	; (8005b98 <UART_SetConfig+0x338>)
 8005b72:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b74:	e01d      	b.n	8005bb2 <UART_SetConfig+0x352>
 8005b76:	bf00      	nop
 8005b78:	efff69f3 	.word	0xefff69f3
 8005b7c:	40008000 	.word	0x40008000
 8005b80:	40013800 	.word	0x40013800
 8005b84:	40021000 	.word	0x40021000
 8005b88:	40004400 	.word	0x40004400
 8005b8c:	40004800 	.word	0x40004800
 8005b90:	40004c00 	.word	0x40004c00
 8005b94:	40005000 	.word	0x40005000
 8005b98:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005b9c:	f7fe fa04 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8005ba0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ba2:	e006      	b.n	8005bb2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005ba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005baa:	e002      	b.n	8005bb2 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	76fb      	strb	r3, [r7, #27]
        break;
 8005bb0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 81b9 	beq.w	8005f2c <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	4413      	add	r3, r2
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d305      	bcc.n	8005bd6 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d902      	bls.n	8005bdc <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	76fb      	strb	r3, [r7, #27]
 8005bda:	e1a7      	b.n	8005f2c <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8005bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	f200 8092 	bhi.w	8005d0a <UART_SetConfig+0x4aa>
 8005be6:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <UART_SetConfig+0x38c>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005c11 	.word	0x08005c11
 8005bf0:	08005d0b 	.word	0x08005d0b
 8005bf4:	08005c5f 	.word	0x08005c5f
 8005bf8:	08005d0b 	.word	0x08005d0b
 8005bfc:	08005c93 	.word	0x08005c93
 8005c00:	08005d0b 	.word	0x08005d0b
 8005c04:	08005d0b 	.word	0x08005d0b
 8005c08:	08005d0b 	.word	0x08005d0b
 8005c0c:	08005ce1 	.word	0x08005ce1
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005c10:	f7fe fa60 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
 8005c14:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	f04f 0200 	mov.w	r2, #0
 8005c1e:	f04f 0300 	mov.w	r3, #0
 8005c22:	f04f 0400 	mov.w	r4, #0
 8005c26:	0214      	lsls	r4, r2, #8
 8005c28:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005c2c:	020b      	lsls	r3, r1, #8
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6852      	ldr	r2, [r2, #4]
 8005c32:	0852      	lsrs	r2, r2, #1
 8005c34:	4611      	mov	r1, r2
 8005c36:	f04f 0200 	mov.w	r2, #0
 8005c3a:	eb13 0b01 	adds.w	fp, r3, r1
 8005c3e:	eb44 0c02 	adc.w	ip, r4, r2
 8005c42:	4658      	mov	r0, fp
 8005c44:	4661      	mov	r1, ip
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f04f 0400 	mov.w	r4, #0
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4623      	mov	r3, r4
 8005c52:	f7fa ffa9 	bl	8000ba8 <__aeabi_uldivmod>
 8005c56:	4603      	mov	r3, r0
 8005c58:	460c      	mov	r4, r1
 8005c5a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005c5c:	e058      	b.n	8005d10 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	085b      	lsrs	r3, r3, #1
 8005c64:	f04f 0400 	mov.w	r4, #0
 8005c68:	49ae      	ldr	r1, [pc, #696]	; (8005f24 <UART_SetConfig+0x6c4>)
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	eb13 0b01 	adds.w	fp, r3, r1
 8005c72:	eb44 0c02 	adc.w	ip, r4, r2
 8005c76:	4658      	mov	r0, fp
 8005c78:	4661      	mov	r1, ip
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f04f 0400 	mov.w	r4, #0
 8005c82:	461a      	mov	r2, r3
 8005c84:	4623      	mov	r3, r4
 8005c86:	f7fa ff8f 	bl	8000ba8 <__aeabi_uldivmod>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005c90:	e03e      	b.n	8005d10 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005c92:	f7fe f989 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8005c96:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	f04f 0400 	mov.w	r4, #0
 8005ca8:	0214      	lsls	r4, r2, #8
 8005caa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005cae:	020b      	lsls	r3, r1, #8
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6852      	ldr	r2, [r2, #4]
 8005cb4:	0852      	lsrs	r2, r2, #1
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	eb13 0b01 	adds.w	fp, r3, r1
 8005cc0:	eb44 0c02 	adc.w	ip, r4, r2
 8005cc4:	4658      	mov	r0, fp
 8005cc6:	4661      	mov	r1, ip
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f04f 0400 	mov.w	r4, #0
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4623      	mov	r3, r4
 8005cd4:	f7fa ff68 	bl	8000ba8 <__aeabi_uldivmod>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005cde:	e017      	b.n	8005d10 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	085b      	lsrs	r3, r3, #1
 8005ce6:	f04f 0400 	mov.w	r4, #0
 8005cea:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005cee:	f144 0100 	adc.w	r1, r4, #0
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f04f 0400 	mov.w	r4, #0
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	4623      	mov	r3, r4
 8005cfe:	f7fa ff53 	bl	8000ba8 <__aeabi_uldivmod>
 8005d02:	4603      	mov	r3, r0
 8005d04:	460c      	mov	r4, r1
 8005d06:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005d08:	e002      	b.n	8005d10 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	76fb      	strb	r3, [r7, #27]
            break;
 8005d0e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d16:	d308      	bcc.n	8005d2a <UART_SetConfig+0x4ca>
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d1e:	d204      	bcs.n	8005d2a <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	60da      	str	r2, [r3, #12]
 8005d28:	e100      	b.n	8005f2c <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	76fb      	strb	r3, [r7, #27]
 8005d2e:	e0fd      	b.n	8005f2c <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d38:	f040 8084 	bne.w	8005e44 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8005d3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d85f      	bhi.n	8005e04 <UART_SetConfig+0x5a4>
 8005d44:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <UART_SetConfig+0x4ec>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d71 	.word	0x08005d71
 8005d50:	08005d91 	.word	0x08005d91
 8005d54:	08005db1 	.word	0x08005db1
 8005d58:	08005e05 	.word	0x08005e05
 8005d5c:	08005dcd 	.word	0x08005dcd
 8005d60:	08005e05 	.word	0x08005e05
 8005d64:	08005e05 	.word	0x08005e05
 8005d68:	08005e05 	.word	0x08005e05
 8005d6c:	08005ded 	.word	0x08005ded
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d70:	f7fe f9b0 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
 8005d74:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	005a      	lsls	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	085b      	lsrs	r3, r3, #1
 8005d80:	441a      	add	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d8e:	e03c      	b.n	8005e0a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d90:	f7fe f9b6 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8005d94:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	005a      	lsls	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	085b      	lsrs	r3, r3, #1
 8005da0:	441a      	add	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005dae:	e02c      	b.n	8005e0a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	085b      	lsrs	r3, r3, #1
 8005db6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005dba:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6852      	ldr	r2, [r2, #4]
 8005dc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005dca:	e01e      	b.n	8005e0a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dcc:	f7fe f8ec 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8005dd0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	005a      	lsls	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	441a      	add	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005dea:	e00e      	b.n	8005e0a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	085b      	lsrs	r3, r3, #1
 8005df2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e02:	e002      	b.n	8005e0a <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	76fb      	strb	r3, [r7, #27]
        break;
 8005e08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	2b0f      	cmp	r3, #15
 8005e0e:	d916      	bls.n	8005e3e <UART_SetConfig+0x5de>
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e16:	d212      	bcs.n	8005e3e <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f023 030f 	bic.w	r3, r3, #15
 8005e20:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	085b      	lsrs	r3, r3, #1
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	89fb      	ldrh	r3, [r7, #14]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	89fa      	ldrh	r2, [r7, #14]
 8005e3a:	60da      	str	r2, [r3, #12]
 8005e3c:	e076      	b.n	8005f2c <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	76fb      	strb	r3, [r7, #27]
 8005e42:	e073      	b.n	8005f2c <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8005e44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d85c      	bhi.n	8005f06 <UART_SetConfig+0x6a6>
 8005e4c:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <UART_SetConfig+0x5f4>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005e79 	.word	0x08005e79
 8005e58:	08005e97 	.word	0x08005e97
 8005e5c:	08005eb5 	.word	0x08005eb5
 8005e60:	08005f07 	.word	0x08005f07
 8005e64:	08005ed1 	.word	0x08005ed1
 8005e68:	08005f07 	.word	0x08005f07
 8005e6c:	08005f07 	.word	0x08005f07
 8005e70:	08005f07 	.word	0x08005f07
 8005e74:	08005eef 	.word	0x08005eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e78:	f7fe f92c 	bl	80040d4 <HAL_RCC_GetPCLK1Freq>
 8005e7c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	085a      	lsrs	r2, r3, #1
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	441a      	add	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005e94:	e03a      	b.n	8005f0c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e96:	f7fe f933 	bl	8004100 <HAL_RCC_GetPCLK2Freq>
 8005e9a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	085a      	lsrs	r2, r3, #1
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	441a      	add	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005eb2:	e02b      	b.n	8005f0c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	085b      	lsrs	r3, r3, #1
 8005eba:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005ebe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6852      	ldr	r2, [r2, #4]
 8005ec6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ece:	e01d      	b.n	8005f0c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ed0:	f7fe f86a 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8005ed4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	085a      	lsrs	r2, r3, #1
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	441a      	add	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005eec:	e00e      	b.n	8005f0c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	085b      	lsrs	r3, r3, #1
 8005ef4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f04:	e002      	b.n	8005f0c <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	76fb      	strb	r3, [r7, #27]
        break;
 8005f0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	2b0f      	cmp	r3, #15
 8005f10:	d90a      	bls.n	8005f28 <UART_SetConfig+0x6c8>
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f18:	d206      	bcs.n	8005f28 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	e003      	b.n	8005f2c <UART_SetConfig+0x6cc>
 8005f24:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005f38:	7efb      	ldrb	r3, [r7, #27]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3728      	adds	r7, #40	; 0x28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	f003 0308 	and.w	r3, r3, #8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01a      	beq.n	800605a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006042:	d10a      	bne.n	800605a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	605a      	str	r2, [r3, #4]
  }
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af02      	add	r7, sp, #8
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006096:	f7fc fe77 	bl	8002d88 <HAL_GetTick>
 800609a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0308 	and.w	r3, r3, #8
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d10e      	bne.n	80060c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f82a 	bl	8006112 <UART_WaitOnFlagUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e020      	b.n	800610a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d10e      	bne.n	80060f4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f814 	bl	8006112 <UART_WaitOnFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e00a      	b.n	800610a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2220      	movs	r2, #32
 80060fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	603b      	str	r3, [r7, #0]
 800611e:	4613      	mov	r3, r2
 8006120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006122:	e05d      	b.n	80061e0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612a:	d059      	beq.n	80061e0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612c:	f7fc fe2c 	bl	8002d88 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	429a      	cmp	r2, r3
 800613a:	d302      	bcc.n	8006142 <UART_WaitOnFlagUntilTimeout+0x30>
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d11b      	bne.n	800617a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006150:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0201 	bic.w	r2, r2, #1
 8006160:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2220      	movs	r2, #32
 8006166:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e042      	b.n	8006200 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d02b      	beq.n	80061e0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006196:	d123      	bne.n	80061e0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061a0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061b0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0201 	bic.w	r2, r2, #1
 80061c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e00f      	b.n	8006200 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69da      	ldr	r2, [r3, #28]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	4013      	ands	r3, r2
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	bf0c      	ite	eq
 80061f0:	2301      	moveq	r3, #1
 80061f2:	2300      	movne	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	79fb      	ldrb	r3, [r7, #7]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d092      	beq.n	8006124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800620c:	bf00      	nop
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
	...

08006218 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800621e:	f3ef 8305 	mrs	r3, IPSR
 8006222:	60bb      	str	r3, [r7, #8]
  return(result);
 8006224:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10f      	bne.n	800624a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800622a:	f3ef 8310 	mrs	r3, PRIMASK
 800622e:	607b      	str	r3, [r7, #4]
  return(result);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d105      	bne.n	8006242 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006236:	f3ef 8311 	mrs	r3, BASEPRI
 800623a:	603b      	str	r3, [r7, #0]
  return(result);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d007      	beq.n	8006252 <osKernelInitialize+0x3a>
 8006242:	4b0e      	ldr	r3, [pc, #56]	; (800627c <osKernelInitialize+0x64>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d103      	bne.n	8006252 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800624a:	f06f 0305 	mvn.w	r3, #5
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	e00c      	b.n	800626c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006252:	4b0a      	ldr	r3, [pc, #40]	; (800627c <osKernelInitialize+0x64>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d105      	bne.n	8006266 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800625a:	4b08      	ldr	r3, [pc, #32]	; (800627c <osKernelInitialize+0x64>)
 800625c:	2201      	movs	r2, #1
 800625e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	e002      	b.n	800626c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006266:	f04f 33ff 	mov.w	r3, #4294967295
 800626a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800626c:	68fb      	ldr	r3, [r7, #12]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	2000015c 	.word	0x2000015c

08006280 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006286:	f3ef 8305 	mrs	r3, IPSR
 800628a:	60bb      	str	r3, [r7, #8]
  return(result);
 800628c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10f      	bne.n	80062b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006292:	f3ef 8310 	mrs	r3, PRIMASK
 8006296:	607b      	str	r3, [r7, #4]
  return(result);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d105      	bne.n	80062aa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800629e:	f3ef 8311 	mrs	r3, BASEPRI
 80062a2:	603b      	str	r3, [r7, #0]
  return(result);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <osKernelStart+0x3a>
 80062aa:	4b0f      	ldr	r3, [pc, #60]	; (80062e8 <osKernelStart+0x68>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d103      	bne.n	80062ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80062b2:	f06f 0305 	mvn.w	r3, #5
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	e010      	b.n	80062dc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80062ba:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <osKernelStart+0x68>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d109      	bne.n	80062d6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80062c2:	f7ff ffa1 	bl	8006208 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80062c6:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <osKernelStart+0x68>)
 80062c8:	2202      	movs	r2, #2
 80062ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80062cc:	f001 f870 	bl	80073b0 <vTaskStartScheduler>
      stat = osOK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	e002      	b.n	80062dc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80062d6:	f04f 33ff 	mov.w	r3, #4294967295
 80062da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80062dc:	68fb      	ldr	r3, [r7, #12]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	2000015c 	.word	0x2000015c

080062ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b090      	sub	sp, #64	; 0x40
 80062f0:	af04      	add	r7, sp, #16
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062f8:	2300      	movs	r3, #0
 80062fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062fc:	f3ef 8305 	mrs	r3, IPSR
 8006300:	61fb      	str	r3, [r7, #28]
  return(result);
 8006302:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 808f 	bne.w	8006428 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800630a:	f3ef 8310 	mrs	r3, PRIMASK
 800630e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d105      	bne.n	8006322 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006316:	f3ef 8311 	mrs	r3, BASEPRI
 800631a:	617b      	str	r3, [r7, #20]
  return(result);
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d003      	beq.n	800632a <osThreadNew+0x3e>
 8006322:	4b44      	ldr	r3, [pc, #272]	; (8006434 <osThreadNew+0x148>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d07e      	beq.n	8006428 <osThreadNew+0x13c>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d07b      	beq.n	8006428 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006330:	2380      	movs	r3, #128	; 0x80
 8006332:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006334:	2318      	movs	r3, #24
 8006336:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006338:	2300      	movs	r3, #0
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800633c:	f04f 33ff 	mov.w	r3, #4294967295
 8006340:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d045      	beq.n	80063d4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <osThreadNew+0x6a>
        name = attr->name;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	2b00      	cmp	r3, #0
 8006368:	d008      	beq.n	800637c <osThreadNew+0x90>
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	2b38      	cmp	r3, #56	; 0x38
 800636e:	d805      	bhi.n	800637c <osThreadNew+0x90>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <osThreadNew+0x94>
        return (NULL);
 800637c:	2300      	movs	r3, #0
 800637e:	e054      	b.n	800642a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	089b      	lsrs	r3, r3, #2
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00e      	beq.n	80063b6 <osThreadNew+0xca>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	2b5b      	cmp	r3, #91	; 0x5b
 800639e:	d90a      	bls.n	80063b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d006      	beq.n	80063b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <osThreadNew+0xca>
        mem = 1;
 80063b0:	2301      	movs	r3, #1
 80063b2:	623b      	str	r3, [r7, #32]
 80063b4:	e010      	b.n	80063d8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10c      	bne.n	80063d8 <osThreadNew+0xec>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d108      	bne.n	80063d8 <osThreadNew+0xec>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d104      	bne.n	80063d8 <osThreadNew+0xec>
          mem = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	623b      	str	r3, [r7, #32]
 80063d2:	e001      	b.n	80063d8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d110      	bne.n	8006400 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063e6:	9202      	str	r2, [sp, #8]
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 fe09 	bl	800700c <xTaskCreateStatic>
 80063fa:	4603      	mov	r3, r0
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	e013      	b.n	8006428 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d110      	bne.n	8006428 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	b29a      	uxth	r2, r3
 800640a:	f107 0310 	add.w	r3, r7, #16
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 fe51 	bl	80070c0 <xTaskCreate>
 800641e:	4603      	mov	r3, r0
 8006420:	2b01      	cmp	r3, #1
 8006422:	d001      	beq.n	8006428 <osThreadNew+0x13c>
          hTask = NULL;
 8006424:	2300      	movs	r3, #0
 8006426:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006428:	693b      	ldr	r3, [r7, #16]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3730      	adds	r7, #48	; 0x30
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	2000015c 	.word	0x2000015c

08006438 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006440:	f3ef 8305 	mrs	r3, IPSR
 8006444:	613b      	str	r3, [r7, #16]
  return(result);
 8006446:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10f      	bne.n	800646c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800644c:	f3ef 8310 	mrs	r3, PRIMASK
 8006450:	60fb      	str	r3, [r7, #12]
  return(result);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d105      	bne.n	8006464 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006458:	f3ef 8311 	mrs	r3, BASEPRI
 800645c:	60bb      	str	r3, [r7, #8]
  return(result);
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <osDelay+0x3c>
 8006464:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <osDelay+0x58>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b02      	cmp	r3, #2
 800646a:	d103      	bne.n	8006474 <osDelay+0x3c>
    stat = osErrorISR;
 800646c:	f06f 0305 	mvn.w	r3, #5
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	e007      	b.n	8006484 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006474:	2300      	movs	r3, #0
 8006476:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <osDelay+0x4c>
      vTaskDelay(ticks);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 ff62 	bl	8007348 <vTaskDelay>
    }
  }

  return (stat);
 8006484:	697b      	ldr	r3, [r7, #20]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	2000015c 	.word	0x2000015c

08006494 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4a07      	ldr	r2, [pc, #28]	; (80064c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80064a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	4a06      	ldr	r2, [pc, #24]	; (80064c4 <vApplicationGetIdleTaskMemory+0x30>)
 80064aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2280      	movs	r2, #128	; 0x80
 80064b0:	601a      	str	r2, [r3, #0]
}
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000160 	.word	0x20000160
 80064c4:	200001bc 	.word	0x200001bc

080064c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4a07      	ldr	r2, [pc, #28]	; (80064f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80064d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	4a06      	ldr	r2, [pc, #24]	; (80064f8 <vApplicationGetTimerTaskMemory+0x30>)
 80064de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064e6:	601a      	str	r2, [r3, #0]
}
 80064e8:	bf00      	nop
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	200003bc 	.word	0x200003bc
 80064f8:	20000418 	.word	0x20000418

080064fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f103 0208 	add.w	r2, r3, #8
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f04f 32ff 	mov.w	r2, #4294967295
 8006514:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f103 0208 	add.w	r2, r3, #8
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f103 0208 	add.w	r2, r3, #8
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800654a:	bf00      	nop
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	601a      	str	r2, [r3, #0]
}
 8006592:	bf00      	nop
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800659e:	b480      	push	{r7}
 80065a0:	b085      	sub	sp, #20
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b4:	d103      	bne.n	80065be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	e00c      	b.n	80065d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3308      	adds	r3, #8
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e002      	b.n	80065cc <vListInsert+0x2e>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d2f6      	bcs.n	80065c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	601a      	str	r2, [r3, #0]
}
 8006604:	bf00      	nop
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6892      	ldr	r2, [r2, #8]
 8006626:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6852      	ldr	r2, [r2, #4]
 8006630:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	429a      	cmp	r2, r3
 800663a:	d103      	bne.n	8006644 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	1e5a      	subs	r2, r3, #1
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d109      	bne.n	800668c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	60bb      	str	r3, [r7, #8]
 800668a:	e7fe      	b.n	800668a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800668c:	f002 f80e 	bl	80086ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006698:	68f9      	ldr	r1, [r7, #12]
 800669a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800669c:	fb01 f303 	mul.w	r3, r1, r3
 80066a0:	441a      	add	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066bc:	3b01      	subs	r3, #1
 80066be:	68f9      	ldr	r1, [r7, #12]
 80066c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066c2:	fb01 f303 	mul.w	r3, r1, r3
 80066c6:	441a      	add	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	22ff      	movs	r2, #255	; 0xff
 80066d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	22ff      	movs	r2, #255	; 0xff
 80066d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d114      	bne.n	800670c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01a      	beq.n	8006720 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3310      	adds	r3, #16
 80066ee:	4618      	mov	r0, r3
 80066f0:	f001 f8de 	bl	80078b0 <xTaskRemoveFromEventList>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d012      	beq.n	8006720 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066fa:	4b0d      	ldr	r3, [pc, #52]	; (8006730 <xQueueGenericReset+0xcc>)
 80066fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	e009      	b.n	8006720 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3310      	adds	r3, #16
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fef3 	bl	80064fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3324      	adds	r3, #36	; 0x24
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff feee 	bl	80064fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006720:	f001 fff2 	bl	8008708 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006724:	2301      	movs	r3, #1
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	e000ed04 	.word	0xe000ed04

08006734 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08e      	sub	sp, #56	; 0x38
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d109      	bne.n	800675c <xQueueGenericCreateStatic+0x28>
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28
 800675a:	e7fe      	b.n	800675a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d109      	bne.n	8006776 <xQueueGenericCreateStatic+0x42>
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
 8006774:	e7fe      	b.n	8006774 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <xQueueGenericCreateStatic+0x4e>
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <xQueueGenericCreateStatic+0x52>
 8006782:	2301      	movs	r3, #1
 8006784:	e000      	b.n	8006788 <xQueueGenericCreateStatic+0x54>
 8006786:	2300      	movs	r3, #0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d109      	bne.n	80067a0 <xQueueGenericCreateStatic+0x6c>
 800678c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	623b      	str	r3, [r7, #32]
 800679e:	e7fe      	b.n	800679e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d102      	bne.n	80067ac <xQueueGenericCreateStatic+0x78>
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <xQueueGenericCreateStatic+0x7c>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <xQueueGenericCreateStatic+0x7e>
 80067b0:	2300      	movs	r3, #0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <xQueueGenericCreateStatic+0x96>
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	61fb      	str	r3, [r7, #28]
 80067c8:	e7fe      	b.n	80067c8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067ca:	2350      	movs	r3, #80	; 0x50
 80067cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	2b50      	cmp	r3, #80	; 0x50
 80067d2:	d009      	beq.n	80067e8 <xQueueGenericCreateStatic+0xb4>
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	e7fe      	b.n	80067e6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00d      	beq.n	8006810 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067fc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	4613      	mov	r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 f805 	bl	800681a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006812:	4618      	mov	r0, r3
 8006814:	3730      	adds	r7, #48	; 0x30
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	607a      	str	r2, [r7, #4]
 8006826:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d103      	bne.n	8006836 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	e002      	b.n	800683c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006848:	2101      	movs	r1, #1
 800684a:	69b8      	ldr	r0, [r7, #24]
 800684c:	f7ff ff0a 	bl	8006664 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	78fa      	ldrb	r2, [r7, #3]
 8006854:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08e      	sub	sp, #56	; 0x38
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800686e:	2300      	movs	r3, #0
 8006870:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	2b00      	cmp	r3, #0
 800687a:	d109      	bne.n	8006890 <xQueueGenericSend+0x30>
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28
 800688e:	e7fe      	b.n	800688e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d103      	bne.n	800689e <xQueueGenericSend+0x3e>
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <xQueueGenericSend+0x42>
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <xQueueGenericSend+0x44>
 80068a2:	2300      	movs	r3, #0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d109      	bne.n	80068bc <xQueueGenericSend+0x5c>
 80068a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ba:	e7fe      	b.n	80068ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d103      	bne.n	80068ca <xQueueGenericSend+0x6a>
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d101      	bne.n	80068ce <xQueueGenericSend+0x6e>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e000      	b.n	80068d0 <xQueueGenericSend+0x70>
 80068ce:	2300      	movs	r3, #0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d109      	bne.n	80068e8 <xQueueGenericSend+0x88>
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	623b      	str	r3, [r7, #32]
 80068e6:	e7fe      	b.n	80068e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068e8:	f001 f998 	bl	8007c1c <xTaskGetSchedulerState>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d102      	bne.n	80068f8 <xQueueGenericSend+0x98>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <xQueueGenericSend+0x9c>
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <xQueueGenericSend+0x9e>
 80068fc:	2300      	movs	r3, #0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <xQueueGenericSend+0xb6>
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	61fb      	str	r3, [r7, #28]
 8006914:	e7fe      	b.n	8006914 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006916:	f001 fec9 	bl	80086ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006922:	429a      	cmp	r2, r3
 8006924:	d302      	bcc.n	800692c <xQueueGenericSend+0xcc>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b02      	cmp	r3, #2
 800692a:	d129      	bne.n	8006980 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	68b9      	ldr	r1, [r7, #8]
 8006930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006932:	f000 f9ff 	bl	8006d34 <prvCopyDataToQueue>
 8006936:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	2b00      	cmp	r3, #0
 800693e:	d010      	beq.n	8006962 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006942:	3324      	adds	r3, #36	; 0x24
 8006944:	4618      	mov	r0, r3
 8006946:	f000 ffb3 	bl	80078b0 <xTaskRemoveFromEventList>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d013      	beq.n	8006978 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006950:	4b3f      	ldr	r3, [pc, #252]	; (8006a50 <xQueueGenericSend+0x1f0>)
 8006952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	e00a      	b.n	8006978 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	2b00      	cmp	r3, #0
 8006966:	d007      	beq.n	8006978 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006968:	4b39      	ldr	r3, [pc, #228]	; (8006a50 <xQueueGenericSend+0x1f0>)
 800696a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006978:	f001 fec6 	bl	8008708 <vPortExitCritical>
				return pdPASS;
 800697c:	2301      	movs	r3, #1
 800697e:	e063      	b.n	8006a48 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d103      	bne.n	800698e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006986:	f001 febf 	bl	8008708 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800698a:	2300      	movs	r3, #0
 800698c:	e05c      	b.n	8006a48 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800698e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006990:	2b00      	cmp	r3, #0
 8006992:	d106      	bne.n	80069a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006994:	f107 0314 	add.w	r3, r7, #20
 8006998:	4618      	mov	r0, r3
 800699a:	f000 ffeb 	bl	8007974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800699e:	2301      	movs	r3, #1
 80069a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069a2:	f001 feb1 	bl	8008708 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069a6:	f000 fd67 	bl	8007478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069aa:	f001 fe7f 	bl	80086ac <vPortEnterCritical>
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069b4:	b25b      	sxtb	r3, r3
 80069b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ba:	d103      	bne.n	80069c4 <xQueueGenericSend+0x164>
 80069bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069ca:	b25b      	sxtb	r3, r3
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d103      	bne.n	80069da <xQueueGenericSend+0x17a>
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069da:	f001 fe95 	bl	8008708 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069de:	1d3a      	adds	r2, r7, #4
 80069e0:	f107 0314 	add.w	r3, r7, #20
 80069e4:	4611      	mov	r1, r2
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 ffda 	bl	80079a0 <xTaskCheckForTimeOut>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d124      	bne.n	8006a3c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069f4:	f000 fa96 	bl	8006f24 <prvIsQueueFull>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d018      	beq.n	8006a30 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	3310      	adds	r3, #16
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	4611      	mov	r1, r2
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 ff04 	bl	8007814 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a0e:	f000 fa21 	bl	8006e54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a12:	f000 fd3f 	bl	8007494 <xTaskResumeAll>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f47f af7c 	bne.w	8006916 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006a1e:	4b0c      	ldr	r3, [pc, #48]	; (8006a50 <xQueueGenericSend+0x1f0>)
 8006a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	e772      	b.n	8006916 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a32:	f000 fa0f 	bl	8006e54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a36:	f000 fd2d 	bl	8007494 <xTaskResumeAll>
 8006a3a:	e76c      	b.n	8006916 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a3e:	f000 fa09 	bl	8006e54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a42:	f000 fd27 	bl	8007494 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3738      	adds	r7, #56	; 0x38
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	e000ed04 	.word	0xe000ed04

08006a54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b08e      	sub	sp, #56	; 0x38
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d109      	bne.n	8006a80 <xQueueGenericSendFromISR+0x2c>
 8006a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7e:	e7fe      	b.n	8006a7e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <xQueueGenericSendFromISR+0x3a>
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <xQueueGenericSendFromISR+0x3e>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e000      	b.n	8006a94 <xQueueGenericSendFromISR+0x40>
 8006a92:	2300      	movs	r3, #0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <xQueueGenericSendFromISR+0x58>
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	623b      	str	r3, [r7, #32]
 8006aaa:	e7fe      	b.n	8006aaa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d103      	bne.n	8006aba <xQueueGenericSendFromISR+0x66>
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <xQueueGenericSendFromISR+0x6a>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e000      	b.n	8006ac0 <xQueueGenericSendFromISR+0x6c>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d109      	bne.n	8006ad8 <xQueueGenericSendFromISR+0x84>
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	61fb      	str	r3, [r7, #28]
 8006ad6:	e7fe      	b.n	8006ad6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ad8:	f001 fec4 	bl	8008864 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006adc:	f3ef 8211 	mrs	r2, BASEPRI
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	61ba      	str	r2, [r7, #24]
 8006af2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006af4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006af6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d302      	bcc.n	8006b0a <xQueueGenericSendFromISR+0xb6>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d12c      	bne.n	8006b64 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	68b9      	ldr	r1, [r7, #8]
 8006b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b1a:	f000 f90b 	bl	8006d34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b1e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b26:	d112      	bne.n	8006b4e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d016      	beq.n	8006b5e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b32:	3324      	adds	r3, #36	; 0x24
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 febb 	bl	80078b0 <xTaskRemoveFromEventList>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00e      	beq.n	8006b5e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	e007      	b.n	8006b5e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b52:	3301      	adds	r3, #1
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	b25a      	sxtb	r2, r3
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006b62:	e001      	b.n	8006b68 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	637b      	str	r3, [r7, #52]	; 0x34
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3738      	adds	r7, #56	; 0x38
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08c      	sub	sp, #48	; 0x30
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <xQueueReceive+0x2e>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	623b      	str	r3, [r7, #32]
 8006ba8:	e7fe      	b.n	8006ba8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d103      	bne.n	8006bb8 <xQueueReceive+0x3c>
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <xQueueReceive+0x40>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <xQueueReceive+0x42>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <xQueueReceive+0x5a>
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	61fb      	str	r3, [r7, #28]
 8006bd4:	e7fe      	b.n	8006bd4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bd6:	f001 f821 	bl	8007c1c <xTaskGetSchedulerState>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d102      	bne.n	8006be6 <xQueueReceive+0x6a>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <xQueueReceive+0x6e>
 8006be6:	2301      	movs	r3, #1
 8006be8:	e000      	b.n	8006bec <xQueueReceive+0x70>
 8006bea:	2300      	movs	r3, #0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d109      	bne.n	8006c04 <xQueueReceive+0x88>
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	e7fe      	b.n	8006c02 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c04:	f001 fd52 	bl	80086ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01f      	beq.n	8006c54 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c18:	f000 f8f6 	bl	8006e08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	1e5a      	subs	r2, r3, #1
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00f      	beq.n	8006c4c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	3310      	adds	r3, #16
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fe3d 	bl	80078b0 <xTaskRemoveFromEventList>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d007      	beq.n	8006c4c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c3c:	4b3c      	ldr	r3, [pc, #240]	; (8006d30 <xQueueReceive+0x1b4>)
 8006c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c4c:	f001 fd5c 	bl	8008708 <vPortExitCritical>
				return pdPASS;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e069      	b.n	8006d28 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d103      	bne.n	8006c62 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c5a:	f001 fd55 	bl	8008708 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e062      	b.n	8006d28 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d106      	bne.n	8006c76 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c68:	f107 0310 	add.w	r3, r7, #16
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fe81 	bl	8007974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c72:	2301      	movs	r3, #1
 8006c74:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c76:	f001 fd47 	bl	8008708 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c7a:	f000 fbfd 	bl	8007478 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c7e:	f001 fd15 	bl	80086ac <vPortEnterCritical>
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c88:	b25b      	sxtb	r3, r3
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8e:	d103      	bne.n	8006c98 <xQueueReceive+0x11c>
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c9e:	b25b      	sxtb	r3, r3
 8006ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca4:	d103      	bne.n	8006cae <xQueueReceive+0x132>
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cae:	f001 fd2b 	bl	8008708 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cb2:	1d3a      	adds	r2, r7, #4
 8006cb4:	f107 0310 	add.w	r3, r7, #16
 8006cb8:	4611      	mov	r1, r2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fe70 	bl	80079a0 <xTaskCheckForTimeOut>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d123      	bne.n	8006d0e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc8:	f000 f916 	bl	8006ef8 <prvIsQueueEmpty>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d017      	beq.n	8006d02 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	3324      	adds	r3, #36	; 0x24
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	4611      	mov	r1, r2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 fd9a 	bl	8007814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce2:	f000 f8b7 	bl	8006e54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ce6:	f000 fbd5 	bl	8007494 <xTaskResumeAll>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d189      	bne.n	8006c04 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006cf0:	4b0f      	ldr	r3, [pc, #60]	; (8006d30 <xQueueReceive+0x1b4>)
 8006cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	e780      	b.n	8006c04 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d04:	f000 f8a6 	bl	8006e54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d08:	f000 fbc4 	bl	8007494 <xTaskResumeAll>
 8006d0c:	e77a      	b.n	8006c04 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d10:	f000 f8a0 	bl	8006e54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d14:	f000 fbbe 	bl	8007494 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d1a:	f000 f8ed 	bl	8006ef8 <prvIsQueueEmpty>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f43f af6f 	beq.w	8006c04 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3730      	adds	r7, #48	; 0x30
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	e000ed04 	.word	0xe000ed04

08006d34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d40:	2300      	movs	r3, #0
 8006d42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10d      	bne.n	8006d6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d14d      	bne.n	8006df6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 ff7a 	bl	8007c58 <xTaskPriorityDisinherit>
 8006d64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	609a      	str	r2, [r3, #8]
 8006d6c:	e043      	b.n	8006df6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d119      	bne.n	8006da8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6858      	ldr	r0, [r3, #4]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	68b9      	ldr	r1, [r7, #8]
 8006d80:	f001 ffae 	bl	8008ce0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	441a      	add	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d32b      	bcc.n	8006df6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	605a      	str	r2, [r3, #4]
 8006da6:	e026      	b.n	8006df6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	68d8      	ldr	r0, [r3, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	461a      	mov	r2, r3
 8006db2:	68b9      	ldr	r1, [r7, #8]
 8006db4:	f001 ff94 	bl	8008ce0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	68da      	ldr	r2, [r3, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	425b      	negs	r3, r3
 8006dc2:	441a      	add	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d207      	bcs.n	8006de4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	425b      	negs	r3, r3
 8006dde:	441a      	add	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d105      	bne.n	8006df6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006dfe:	697b      	ldr	r3, [r7, #20]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d018      	beq.n	8006e4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	441a      	add	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d303      	bcc.n	8006e3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68d9      	ldr	r1, [r3, #12]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e44:	461a      	mov	r2, r3
 8006e46:	6838      	ldr	r0, [r7, #0]
 8006e48:	f001 ff4a 	bl	8008ce0 <memcpy>
	}
}
 8006e4c:	bf00      	nop
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e5c:	f001 fc26 	bl	80086ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e68:	e011      	b.n	8006e8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d012      	beq.n	8006e98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3324      	adds	r3, #36	; 0x24
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fd1a 	bl	80078b0 <xTaskRemoveFromEventList>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e82:	f000 fded 	bl	8007a60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	dce9      	bgt.n	8006e6a <prvUnlockQueue+0x16>
 8006e96:	e000      	b.n	8006e9a <prvUnlockQueue+0x46>
					break;
 8006e98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	22ff      	movs	r2, #255	; 0xff
 8006e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ea2:	f001 fc31 	bl	8008708 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ea6:	f001 fc01 	bl	80086ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006eb2:	e011      	b.n	8006ed8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d012      	beq.n	8006ee2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3310      	adds	r3, #16
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fcf5 	bl	80078b0 <xTaskRemoveFromEventList>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ecc:	f000 fdc8 	bl	8007a60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ed0:	7bbb      	ldrb	r3, [r7, #14]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	dce9      	bgt.n	8006eb4 <prvUnlockQueue+0x60>
 8006ee0:	e000      	b.n	8006ee4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ee2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	22ff      	movs	r2, #255	; 0xff
 8006ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006eec:	f001 fc0c 	bl	8008708 <vPortExitCritical>
}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f00:	f001 fbd4 	bl	80086ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	e001      	b.n	8006f16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f12:	2300      	movs	r3, #0
 8006f14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f16:	f001 fbf7 	bl	8008708 <vPortExitCritical>

	return xReturn;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f2c:	f001 fbbe 	bl	80086ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d102      	bne.n	8006f42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	e001      	b.n	8006f46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f46:	f001 fbdf 	bl	8008708 <vPortExitCritical>

	return xReturn;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	e014      	b.n	8006f8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f64:	4a0e      	ldr	r2, [pc, #56]	; (8006fa0 <vQueueAddToRegistry+0x4c>)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10b      	bne.n	8006f88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f70:	490b      	ldr	r1, [pc, #44]	; (8006fa0 <vQueueAddToRegistry+0x4c>)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f7a:	4a09      	ldr	r2, [pc, #36]	; (8006fa0 <vQueueAddToRegistry+0x4c>)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	4413      	add	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f86:	e005      	b.n	8006f94 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b07      	cmp	r3, #7
 8006f92:	d9e7      	bls.n	8006f64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f94:	bf00      	nop
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	20001d1c 	.word	0x20001d1c

08006fa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006fb4:	f001 fb7a 	bl	80086ac <vPortEnterCritical>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fbe:	b25b      	sxtb	r3, r3
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d103      	bne.n	8006fce <vQueueWaitForMessageRestricted+0x2a>
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fd4:	b25b      	sxtb	r3, r3
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fda:	d103      	bne.n	8006fe4 <vQueueWaitForMessageRestricted+0x40>
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fe4:	f001 fb90 	bl	8008708 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d106      	bne.n	8006ffe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	3324      	adds	r3, #36	; 0x24
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fc2f 	bl	800785c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006ffe:	6978      	ldr	r0, [r7, #20]
 8007000:	f7ff ff28 	bl	8006e54 <prvUnlockQueue>
	}
 8007004:	bf00      	nop
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08e      	sub	sp, #56	; 0x38
 8007010:	af04      	add	r7, sp, #16
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800701a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701c:	2b00      	cmp	r3, #0
 800701e:	d109      	bne.n	8007034 <xTaskCreateStatic+0x28>
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	623b      	str	r3, [r7, #32]
 8007032:	e7fe      	b.n	8007032 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	2b00      	cmp	r3, #0
 8007038:	d109      	bne.n	800704e <xTaskCreateStatic+0x42>
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	61fb      	str	r3, [r7, #28]
 800704c:	e7fe      	b.n	800704c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800704e:	235c      	movs	r3, #92	; 0x5c
 8007050:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b5c      	cmp	r3, #92	; 0x5c
 8007056:	d009      	beq.n	800706c <xTaskCreateStatic+0x60>
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	61bb      	str	r3, [r7, #24]
 800706a:	e7fe      	b.n	800706a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800706c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01e      	beq.n	80070b2 <xTaskCreateStatic+0xa6>
 8007074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007076:	2b00      	cmp	r3, #0
 8007078:	d01b      	beq.n	80070b2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007082:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	2202      	movs	r2, #2
 8007088:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800708c:	2300      	movs	r3, #0
 800708e:	9303      	str	r3, [sp, #12]
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	9302      	str	r3, [sp, #8]
 8007094:	f107 0314 	add.w	r3, r7, #20
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	68b9      	ldr	r1, [r7, #8]
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 f850 	bl	800714a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070ac:	f000 f8dc 	bl	8007268 <prvAddNewTaskToReadyList>
 80070b0:	e001      	b.n	80070b6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070b6:	697b      	ldr	r3, [r7, #20]
	}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3728      	adds	r7, #40	; 0x28
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08c      	sub	sp, #48	; 0x30
 80070c4:	af04      	add	r7, sp, #16
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	603b      	str	r3, [r7, #0]
 80070cc:	4613      	mov	r3, r2
 80070ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070d0:	88fb      	ldrh	r3, [r7, #6]
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4618      	mov	r0, r3
 80070d6:	f001 fc03 	bl	80088e0 <pvPortMalloc>
 80070da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00e      	beq.n	8007100 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070e2:	205c      	movs	r0, #92	; 0x5c
 80070e4:	f001 fbfc 	bl	80088e0 <pvPortMalloc>
 80070e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	631a      	str	r2, [r3, #48]	; 0x30
 80070f6:	e005      	b.n	8007104 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070f8:	6978      	ldr	r0, [r7, #20]
 80070fa:	f001 fcb3 	bl	8008a64 <vPortFree>
 80070fe:	e001      	b.n	8007104 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007100:	2300      	movs	r3, #0
 8007102:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d017      	beq.n	800713a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007112:	88fa      	ldrh	r2, [r7, #6]
 8007114:	2300      	movs	r3, #0
 8007116:	9303      	str	r3, [sp, #12]
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	9302      	str	r3, [sp, #8]
 800711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711e:	9301      	str	r3, [sp, #4]
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	68b9      	ldr	r1, [r7, #8]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f80e 	bl	800714a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800712e:	69f8      	ldr	r0, [r7, #28]
 8007130:	f000 f89a 	bl	8007268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007134:	2301      	movs	r3, #1
 8007136:	61bb      	str	r3, [r7, #24]
 8007138:	e002      	b.n	8007140 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800713a:	f04f 33ff 	mov.w	r3, #4294967295
 800713e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007140:	69bb      	ldr	r3, [r7, #24]
	}
 8007142:	4618      	mov	r0, r3
 8007144:	3720      	adds	r7, #32
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b088      	sub	sp, #32
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	607a      	str	r2, [r7, #4]
 8007156:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	461a      	mov	r2, r3
 8007162:	21a5      	movs	r1, #165	; 0xa5
 8007164:	f001 fdc7 	bl	8008cf6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007172:	3b01      	subs	r3, #1
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	f023 0307 	bic.w	r3, r3, #7
 8007180:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	2b00      	cmp	r3, #0
 800718a:	d009      	beq.n	80071a0 <prvInitialiseNewTask+0x56>
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	e7fe      	b.n	800719e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d01f      	beq.n	80071e6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071a6:	2300      	movs	r3, #0
 80071a8:	61fb      	str	r3, [r7, #28]
 80071aa:	e012      	b.n	80071d2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4413      	add	r3, r2
 80071b2:	7819      	ldrb	r1, [r3, #0]
 80071b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4413      	add	r3, r2
 80071ba:	3334      	adds	r3, #52	; 0x34
 80071bc:	460a      	mov	r2, r1
 80071be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	4413      	add	r3, r2
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d006      	beq.n	80071da <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	3301      	adds	r3, #1
 80071d0:	61fb      	str	r3, [r7, #28]
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	2b0f      	cmp	r3, #15
 80071d6:	d9e9      	bls.n	80071ac <prvInitialiseNewTask+0x62>
 80071d8:	e000      	b.n	80071dc <prvInitialiseNewTask+0x92>
			{
				break;
 80071da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071e4:	e003      	b.n	80071ee <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f0:	2b37      	cmp	r3, #55	; 0x37
 80071f2:	d901      	bls.n	80071f8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071f4:	2337      	movs	r3, #55	; 0x37
 80071f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007202:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	2200      	movs	r2, #0
 8007208:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720c:	3304      	adds	r3, #4
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff f994 	bl	800653c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	3318      	adds	r3, #24
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff f98f 	bl	800653c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007222:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007226:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007232:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	2200      	movs	r2, #0
 8007238:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	68f9      	ldr	r1, [r7, #12]
 8007246:	69b8      	ldr	r0, [r7, #24]
 8007248:	f001 f90c 	bl	8008464 <pxPortInitialiseStack>
 800724c:	4602      	mov	r2, r0
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800725c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800725e:	bf00      	nop
 8007260:	3720      	adds	r7, #32
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007270:	f001 fa1c 	bl	80086ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007274:	4b2d      	ldr	r3, [pc, #180]	; (800732c <prvAddNewTaskToReadyList+0xc4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3301      	adds	r3, #1
 800727a:	4a2c      	ldr	r2, [pc, #176]	; (800732c <prvAddNewTaskToReadyList+0xc4>)
 800727c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800727e:	4b2c      	ldr	r3, [pc, #176]	; (8007330 <prvAddNewTaskToReadyList+0xc8>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d109      	bne.n	800729a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007286:	4a2a      	ldr	r2, [pc, #168]	; (8007330 <prvAddNewTaskToReadyList+0xc8>)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800728c:	4b27      	ldr	r3, [pc, #156]	; (800732c <prvAddNewTaskToReadyList+0xc4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d110      	bne.n	80072b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007294:	f000 fc08 	bl	8007aa8 <prvInitialiseTaskLists>
 8007298:	e00d      	b.n	80072b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800729a:	4b26      	ldr	r3, [pc, #152]	; (8007334 <prvAddNewTaskToReadyList+0xcc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072a2:	4b23      	ldr	r3, [pc, #140]	; (8007330 <prvAddNewTaskToReadyList+0xc8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d802      	bhi.n	80072b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072b0:	4a1f      	ldr	r2, [pc, #124]	; (8007330 <prvAddNewTaskToReadyList+0xc8>)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072b6:	4b20      	ldr	r3, [pc, #128]	; (8007338 <prvAddNewTaskToReadyList+0xd0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3301      	adds	r3, #1
 80072bc:	4a1e      	ldr	r2, [pc, #120]	; (8007338 <prvAddNewTaskToReadyList+0xd0>)
 80072be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072c0:	4b1d      	ldr	r3, [pc, #116]	; (8007338 <prvAddNewTaskToReadyList+0xd0>)
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072cc:	4b1b      	ldr	r3, [pc, #108]	; (800733c <prvAddNewTaskToReadyList+0xd4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d903      	bls.n	80072dc <prvAddNewTaskToReadyList+0x74>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	4a18      	ldr	r2, [pc, #96]	; (800733c <prvAddNewTaskToReadyList+0xd4>)
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e0:	4613      	mov	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4a15      	ldr	r2, [pc, #84]	; (8007340 <prvAddNewTaskToReadyList+0xd8>)
 80072ea:	441a      	add	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3304      	adds	r3, #4
 80072f0:	4619      	mov	r1, r3
 80072f2:	4610      	mov	r0, r2
 80072f4:	f7ff f92f 	bl	8006556 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072f8:	f001 fa06 	bl	8008708 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072fc:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <prvAddNewTaskToReadyList+0xcc>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00e      	beq.n	8007322 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007304:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <prvAddNewTaskToReadyList+0xc8>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730e:	429a      	cmp	r2, r3
 8007310:	d207      	bcs.n	8007322 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <prvAddNewTaskToReadyList+0xdc>)
 8007314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000cec 	.word	0x20000cec
 8007330:	20000818 	.word	0x20000818
 8007334:	20000cf8 	.word	0x20000cf8
 8007338:	20000d08 	.word	0x20000d08
 800733c:	20000cf4 	.word	0x20000cf4
 8007340:	2000081c 	.word	0x2000081c
 8007344:	e000ed04 	.word	0xe000ed04

08007348 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007350:	2300      	movs	r3, #0
 8007352:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d016      	beq.n	8007388 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800735a:	4b13      	ldr	r3, [pc, #76]	; (80073a8 <vTaskDelay+0x60>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d009      	beq.n	8007376 <vTaskDelay+0x2e>
 8007362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	60bb      	str	r3, [r7, #8]
 8007374:	e7fe      	b.n	8007374 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007376:	f000 f87f 	bl	8007478 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800737a:	2100      	movs	r1, #0
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fcd7 	bl	8007d30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007382:	f000 f887 	bl	8007494 <xTaskResumeAll>
 8007386:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d107      	bne.n	800739e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800738e:	4b07      	ldr	r3, [pc, #28]	; (80073ac <vTaskDelay+0x64>)
 8007390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800739e:	bf00      	nop
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20000d14 	.word	0x20000d14
 80073ac:	e000ed04 	.word	0xe000ed04

080073b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08a      	sub	sp, #40	; 0x28
 80073b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073be:	463a      	mov	r2, r7
 80073c0:	1d39      	adds	r1, r7, #4
 80073c2:	f107 0308 	add.w	r3, r7, #8
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff f864 	bl	8006494 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	9202      	str	r2, [sp, #8]
 80073d4:	9301      	str	r3, [sp, #4]
 80073d6:	2300      	movs	r3, #0
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	2300      	movs	r3, #0
 80073dc:	460a      	mov	r2, r1
 80073de:	4920      	ldr	r1, [pc, #128]	; (8007460 <vTaskStartScheduler+0xb0>)
 80073e0:	4820      	ldr	r0, [pc, #128]	; (8007464 <vTaskStartScheduler+0xb4>)
 80073e2:	f7ff fe13 	bl	800700c <xTaskCreateStatic>
 80073e6:	4602      	mov	r2, r0
 80073e8:	4b1f      	ldr	r3, [pc, #124]	; (8007468 <vTaskStartScheduler+0xb8>)
 80073ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073ec:	4b1e      	ldr	r3, [pc, #120]	; (8007468 <vTaskStartScheduler+0xb8>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d002      	beq.n	80073fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073f4:	2301      	movs	r3, #1
 80073f6:	617b      	str	r3, [r7, #20]
 80073f8:	e001      	b.n	80073fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d102      	bne.n	800740a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007404:	f000 fce8 	bl	8007dd8 <xTimerCreateTimerTask>
 8007408:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d115      	bne.n	800743c <vTaskStartScheduler+0x8c>
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007422:	4b12      	ldr	r3, [pc, #72]	; (800746c <vTaskStartScheduler+0xbc>)
 8007424:	f04f 32ff 	mov.w	r2, #4294967295
 8007428:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800742a:	4b11      	ldr	r3, [pc, #68]	; (8007470 <vTaskStartScheduler+0xc0>)
 800742c:	2201      	movs	r2, #1
 800742e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007430:	4b10      	ldr	r3, [pc, #64]	; (8007474 <vTaskStartScheduler+0xc4>)
 8007432:	2200      	movs	r2, #0
 8007434:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007436:	f001 f89b 	bl	8008570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800743a:	e00d      	b.n	8007458 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007442:	d109      	bne.n	8007458 <vTaskStartScheduler+0xa8>
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	e7fe      	b.n	8007456 <vTaskStartScheduler+0xa6>
}
 8007458:	bf00      	nop
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	08009844 	.word	0x08009844
 8007464:	08007a79 	.word	0x08007a79
 8007468:	20000d10 	.word	0x20000d10
 800746c:	20000d0c 	.word	0x20000d0c
 8007470:	20000cf8 	.word	0x20000cf8
 8007474:	20000cf0 	.word	0x20000cf0

08007478 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007478:	b480      	push	{r7}
 800747a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800747c:	4b04      	ldr	r3, [pc, #16]	; (8007490 <vTaskSuspendAll+0x18>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3301      	adds	r3, #1
 8007482:	4a03      	ldr	r2, [pc, #12]	; (8007490 <vTaskSuspendAll+0x18>)
 8007484:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007486:	bf00      	nop
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	20000d14 	.word	0x20000d14

08007494 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800749e:	2300      	movs	r3, #0
 80074a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074a2:	4b41      	ldr	r3, [pc, #260]	; (80075a8 <xTaskResumeAll+0x114>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d109      	bne.n	80074be <xTaskResumeAll+0x2a>
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	e7fe      	b.n	80074bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074be:	f001 f8f5 	bl	80086ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074c2:	4b39      	ldr	r3, [pc, #228]	; (80075a8 <xTaskResumeAll+0x114>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	4a37      	ldr	r2, [pc, #220]	; (80075a8 <xTaskResumeAll+0x114>)
 80074ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074cc:	4b36      	ldr	r3, [pc, #216]	; (80075a8 <xTaskResumeAll+0x114>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d162      	bne.n	800759a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074d4:	4b35      	ldr	r3, [pc, #212]	; (80075ac <xTaskResumeAll+0x118>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d05e      	beq.n	800759a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074dc:	e02f      	b.n	800753e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074de:	4b34      	ldr	r3, [pc, #208]	; (80075b0 <xTaskResumeAll+0x11c>)
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3318      	adds	r3, #24
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff f890 	bl	8006610 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3304      	adds	r3, #4
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff f88b 	bl	8006610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fe:	4b2d      	ldr	r3, [pc, #180]	; (80075b4 <xTaskResumeAll+0x120>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	429a      	cmp	r2, r3
 8007504:	d903      	bls.n	800750e <xTaskResumeAll+0x7a>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	4a2a      	ldr	r2, [pc, #168]	; (80075b4 <xTaskResumeAll+0x120>)
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4a27      	ldr	r2, [pc, #156]	; (80075b8 <xTaskResumeAll+0x124>)
 800751c:	441a      	add	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3304      	adds	r3, #4
 8007522:	4619      	mov	r1, r3
 8007524:	4610      	mov	r0, r2
 8007526:	f7ff f816 	bl	8006556 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752e:	4b23      	ldr	r3, [pc, #140]	; (80075bc <xTaskResumeAll+0x128>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	429a      	cmp	r2, r3
 8007536:	d302      	bcc.n	800753e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007538:	4b21      	ldr	r3, [pc, #132]	; (80075c0 <xTaskResumeAll+0x12c>)
 800753a:	2201      	movs	r2, #1
 800753c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800753e:	4b1c      	ldr	r3, [pc, #112]	; (80075b0 <xTaskResumeAll+0x11c>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1cb      	bne.n	80074de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800754c:	f000 fb46 	bl	8007bdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007550:	4b1c      	ldr	r3, [pc, #112]	; (80075c4 <xTaskResumeAll+0x130>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d010      	beq.n	800757e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800755c:	f000 f846 	bl	80075ec <xTaskIncrementTick>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007566:	4b16      	ldr	r3, [pc, #88]	; (80075c0 <xTaskResumeAll+0x12c>)
 8007568:	2201      	movs	r2, #1
 800756a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3b01      	subs	r3, #1
 8007570:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1f1      	bne.n	800755c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007578:	4b12      	ldr	r3, [pc, #72]	; (80075c4 <xTaskResumeAll+0x130>)
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800757e:	4b10      	ldr	r3, [pc, #64]	; (80075c0 <xTaskResumeAll+0x12c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d009      	beq.n	800759a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007586:	2301      	movs	r3, #1
 8007588:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800758a:	4b0f      	ldr	r3, [pc, #60]	; (80075c8 <xTaskResumeAll+0x134>)
 800758c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800759a:	f001 f8b5 	bl	8008708 <vPortExitCritical>

	return xAlreadyYielded;
 800759e:	68bb      	ldr	r3, [r7, #8]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20000d14 	.word	0x20000d14
 80075ac:	20000cec 	.word	0x20000cec
 80075b0:	20000cac 	.word	0x20000cac
 80075b4:	20000cf4 	.word	0x20000cf4
 80075b8:	2000081c 	.word	0x2000081c
 80075bc:	20000818 	.word	0x20000818
 80075c0:	20000d00 	.word	0x20000d00
 80075c4:	20000cfc 	.word	0x20000cfc
 80075c8:	e000ed04 	.word	0xe000ed04

080075cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075d2:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <xTaskGetTickCount+0x1c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075d8:	687b      	ldr	r3, [r7, #4]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	20000cf0 	.word	0x20000cf0

080075ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075f2:	2300      	movs	r3, #0
 80075f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075f6:	4b4e      	ldr	r3, [pc, #312]	; (8007730 <xTaskIncrementTick+0x144>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f040 8088 	bne.w	8007710 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007600:	4b4c      	ldr	r3, [pc, #304]	; (8007734 <xTaskIncrementTick+0x148>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3301      	adds	r3, #1
 8007606:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007608:	4a4a      	ldr	r2, [pc, #296]	; (8007734 <xTaskIncrementTick+0x148>)
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d11f      	bne.n	8007654 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007614:	4b48      	ldr	r3, [pc, #288]	; (8007738 <xTaskIncrementTick+0x14c>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d009      	beq.n	8007632 <xTaskIncrementTick+0x46>
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	603b      	str	r3, [r7, #0]
 8007630:	e7fe      	b.n	8007630 <xTaskIncrementTick+0x44>
 8007632:	4b41      	ldr	r3, [pc, #260]	; (8007738 <xTaskIncrementTick+0x14c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	4b40      	ldr	r3, [pc, #256]	; (800773c <xTaskIncrementTick+0x150>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a3e      	ldr	r2, [pc, #248]	; (8007738 <xTaskIncrementTick+0x14c>)
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	4a3e      	ldr	r2, [pc, #248]	; (800773c <xTaskIncrementTick+0x150>)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6013      	str	r3, [r2, #0]
 8007646:	4b3e      	ldr	r3, [pc, #248]	; (8007740 <xTaskIncrementTick+0x154>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3301      	adds	r3, #1
 800764c:	4a3c      	ldr	r2, [pc, #240]	; (8007740 <xTaskIncrementTick+0x154>)
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	f000 fac4 	bl	8007bdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007654:	4b3b      	ldr	r3, [pc, #236]	; (8007744 <xTaskIncrementTick+0x158>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	429a      	cmp	r2, r3
 800765c:	d349      	bcc.n	80076f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800765e:	4b36      	ldr	r3, [pc, #216]	; (8007738 <xTaskIncrementTick+0x14c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d104      	bne.n	8007672 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007668:	4b36      	ldr	r3, [pc, #216]	; (8007744 <xTaskIncrementTick+0x158>)
 800766a:	f04f 32ff 	mov.w	r2, #4294967295
 800766e:	601a      	str	r2, [r3, #0]
					break;
 8007670:	e03f      	b.n	80076f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007672:	4b31      	ldr	r3, [pc, #196]	; (8007738 <xTaskIncrementTick+0x14c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	429a      	cmp	r2, r3
 8007688:	d203      	bcs.n	8007692 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800768a:	4a2e      	ldr	r2, [pc, #184]	; (8007744 <xTaskIncrementTick+0x158>)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007690:	e02f      	b.n	80076f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	3304      	adds	r3, #4
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe ffba 	bl	8006610 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	3318      	adds	r3, #24
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fe ffb1 	bl	8006610 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b2:	4b25      	ldr	r3, [pc, #148]	; (8007748 <xTaskIncrementTick+0x15c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d903      	bls.n	80076c2 <xTaskIncrementTick+0xd6>
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	4a22      	ldr	r2, [pc, #136]	; (8007748 <xTaskIncrementTick+0x15c>)
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4a1f      	ldr	r2, [pc, #124]	; (800774c <xTaskIncrementTick+0x160>)
 80076d0:	441a      	add	r2, r3
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	3304      	adds	r3, #4
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f7fe ff3c 	bl	8006556 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e2:	4b1b      	ldr	r3, [pc, #108]	; (8007750 <xTaskIncrementTick+0x164>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d3b8      	bcc.n	800765e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80076ec:	2301      	movs	r3, #1
 80076ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076f0:	e7b5      	b.n	800765e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076f2:	4b17      	ldr	r3, [pc, #92]	; (8007750 <xTaskIncrementTick+0x164>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f8:	4914      	ldr	r1, [pc, #80]	; (800774c <xTaskIncrementTick+0x160>)
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	440b      	add	r3, r1
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d907      	bls.n	800771a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800770a:	2301      	movs	r3, #1
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	e004      	b.n	800771a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007710:	4b10      	ldr	r3, [pc, #64]	; (8007754 <xTaskIncrementTick+0x168>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3301      	adds	r3, #1
 8007716:	4a0f      	ldr	r2, [pc, #60]	; (8007754 <xTaskIncrementTick+0x168>)
 8007718:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800771a:	4b0f      	ldr	r3, [pc, #60]	; (8007758 <xTaskIncrementTick+0x16c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007722:	2301      	movs	r3, #1
 8007724:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007726:	697b      	ldr	r3, [r7, #20]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20000d14 	.word	0x20000d14
 8007734:	20000cf0 	.word	0x20000cf0
 8007738:	20000ca4 	.word	0x20000ca4
 800773c:	20000ca8 	.word	0x20000ca8
 8007740:	20000d04 	.word	0x20000d04
 8007744:	20000d0c 	.word	0x20000d0c
 8007748:	20000cf4 	.word	0x20000cf4
 800774c:	2000081c 	.word	0x2000081c
 8007750:	20000818 	.word	0x20000818
 8007754:	20000cfc 	.word	0x20000cfc
 8007758:	20000d00 	.word	0x20000d00

0800775c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007762:	4b27      	ldr	r3, [pc, #156]	; (8007800 <vTaskSwitchContext+0xa4>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800776a:	4b26      	ldr	r3, [pc, #152]	; (8007804 <vTaskSwitchContext+0xa8>)
 800776c:	2201      	movs	r2, #1
 800776e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007770:	e040      	b.n	80077f4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007772:	4b24      	ldr	r3, [pc, #144]	; (8007804 <vTaskSwitchContext+0xa8>)
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007778:	4b23      	ldr	r3, [pc, #140]	; (8007808 <vTaskSwitchContext+0xac>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60fb      	str	r3, [r7, #12]
 800777e:	e00f      	b.n	80077a0 <vTaskSwitchContext+0x44>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d109      	bne.n	800779a <vTaskSwitchContext+0x3e>
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	607b      	str	r3, [r7, #4]
 8007798:	e7fe      	b.n	8007798 <vTaskSwitchContext+0x3c>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3b01      	subs	r3, #1
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	491a      	ldr	r1, [pc, #104]	; (800780c <vTaskSwitchContext+0xb0>)
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4613      	mov	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	440b      	add	r3, r1
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0e5      	beq.n	8007780 <vTaskSwitchContext+0x24>
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4613      	mov	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4a13      	ldr	r2, [pc, #76]	; (800780c <vTaskSwitchContext+0xb0>)
 80077c0:	4413      	add	r3, r2
 80077c2:	60bb      	str	r3, [r7, #8]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	605a      	str	r2, [r3, #4]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	3308      	adds	r3, #8
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d104      	bne.n	80077e4 <vTaskSwitchContext+0x88>
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	605a      	str	r2, [r3, #4]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	4a09      	ldr	r2, [pc, #36]	; (8007810 <vTaskSwitchContext+0xb4>)
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	4a06      	ldr	r2, [pc, #24]	; (8007808 <vTaskSwitchContext+0xac>)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6013      	str	r3, [r2, #0]
}
 80077f4:	bf00      	nop
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	20000d14 	.word	0x20000d14
 8007804:	20000d00 	.word	0x20000d00
 8007808:	20000cf4 	.word	0x20000cf4
 800780c:	2000081c 	.word	0x2000081c
 8007810:	20000818 	.word	0x20000818

08007814 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d109      	bne.n	8007838 <vTaskPlaceOnEventList+0x24>
 8007824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	e7fe      	b.n	8007836 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007838:	4b07      	ldr	r3, [pc, #28]	; (8007858 <vTaskPlaceOnEventList+0x44>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3318      	adds	r3, #24
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7fe feac 	bl	800659e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007846:	2101      	movs	r1, #1
 8007848:	6838      	ldr	r0, [r7, #0]
 800784a:	f000 fa71 	bl	8007d30 <prvAddCurrentTaskToDelayedList>
}
 800784e:	bf00      	nop
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20000818 	.word	0x20000818

0800785c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d109      	bne.n	8007882 <vTaskPlaceOnEventListRestricted+0x26>
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	e7fe      	b.n	8007880 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007882:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <vTaskPlaceOnEventListRestricted+0x50>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3318      	adds	r3, #24
 8007888:	4619      	mov	r1, r3
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f7fe fe63 	bl	8006556 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007896:	f04f 33ff 	mov.w	r3, #4294967295
 800789a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800789c:	6879      	ldr	r1, [r7, #4]
 800789e:	68b8      	ldr	r0, [r7, #8]
 80078a0:	f000 fa46 	bl	8007d30 <prvAddCurrentTaskToDelayedList>
	}
 80078a4:	bf00      	nop
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	20000818 	.word	0x20000818

080078b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d109      	bne.n	80078da <xTaskRemoveFromEventList+0x2a>
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	e7fe      	b.n	80078d8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	3318      	adds	r3, #24
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe fe96 	bl	8006610 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078e4:	4b1d      	ldr	r3, [pc, #116]	; (800795c <xTaskRemoveFromEventList+0xac>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d11d      	bne.n	8007928 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe fe8d 	bl	8006610 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fa:	4b19      	ldr	r3, [pc, #100]	; (8007960 <xTaskRemoveFromEventList+0xb0>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d903      	bls.n	800790a <xTaskRemoveFromEventList+0x5a>
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	4a16      	ldr	r2, [pc, #88]	; (8007960 <xTaskRemoveFromEventList+0xb0>)
 8007908:	6013      	str	r3, [r2, #0]
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4a13      	ldr	r2, [pc, #76]	; (8007964 <xTaskRemoveFromEventList+0xb4>)
 8007918:	441a      	add	r2, r3
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	3304      	adds	r3, #4
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f7fe fe18 	bl	8006556 <vListInsertEnd>
 8007926:	e005      	b.n	8007934 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	3318      	adds	r3, #24
 800792c:	4619      	mov	r1, r3
 800792e:	480e      	ldr	r0, [pc, #56]	; (8007968 <xTaskRemoveFromEventList+0xb8>)
 8007930:	f7fe fe11 	bl	8006556 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007938:	4b0c      	ldr	r3, [pc, #48]	; (800796c <xTaskRemoveFromEventList+0xbc>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	429a      	cmp	r2, r3
 8007940:	d905      	bls.n	800794e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007942:	2301      	movs	r3, #1
 8007944:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007946:	4b0a      	ldr	r3, [pc, #40]	; (8007970 <xTaskRemoveFromEventList+0xc0>)
 8007948:	2201      	movs	r2, #1
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	e001      	b.n	8007952 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800794e:	2300      	movs	r3, #0
 8007950:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007952:	697b      	ldr	r3, [r7, #20]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	20000d14 	.word	0x20000d14
 8007960:	20000cf4 	.word	0x20000cf4
 8007964:	2000081c 	.word	0x2000081c
 8007968:	20000cac 	.word	0x20000cac
 800796c:	20000818 	.word	0x20000818
 8007970:	20000d00 	.word	0x20000d00

08007974 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800797c:	4b06      	ldr	r3, [pc, #24]	; (8007998 <vTaskInternalSetTimeOutState+0x24>)
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007984:	4b05      	ldr	r3, [pc, #20]	; (800799c <vTaskInternalSetTimeOutState+0x28>)
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	605a      	str	r2, [r3, #4]
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr
 8007998:	20000d04 	.word	0x20000d04
 800799c:	20000cf0 	.word	0x20000cf0

080079a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d109      	bne.n	80079c4 <xTaskCheckForTimeOut+0x24>
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	613b      	str	r3, [r7, #16]
 80079c2:	e7fe      	b.n	80079c2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d109      	bne.n	80079de <xTaskCheckForTimeOut+0x3e>
 80079ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	60fb      	str	r3, [r7, #12]
 80079dc:	e7fe      	b.n	80079dc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80079de:	f000 fe65 	bl	80086ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079e2:	4b1d      	ldr	r3, [pc, #116]	; (8007a58 <xTaskCheckForTimeOut+0xb8>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	d102      	bne.n	8007a02 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61fb      	str	r3, [r7, #28]
 8007a00:	e023      	b.n	8007a4a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	4b15      	ldr	r3, [pc, #84]	; (8007a5c <xTaskCheckForTimeOut+0xbc>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d007      	beq.n	8007a1e <xTaskCheckForTimeOut+0x7e>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d302      	bcc.n	8007a1e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	61fb      	str	r3, [r7, #28]
 8007a1c:	e015      	b.n	8007a4a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d20b      	bcs.n	8007a40 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	1ad2      	subs	r2, r2, r3
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff ff9d 	bl	8007974 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61fb      	str	r3, [r7, #28]
 8007a3e:	e004      	b.n	8007a4a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a46:	2301      	movs	r3, #1
 8007a48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a4a:	f000 fe5d 	bl	8008708 <vPortExitCritical>

	return xReturn;
 8007a4e:	69fb      	ldr	r3, [r7, #28]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3720      	adds	r7, #32
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20000cf0 	.word	0x20000cf0
 8007a5c:	20000d04 	.word	0x20000d04

08007a60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a64:	4b03      	ldr	r3, [pc, #12]	; (8007a74 <vTaskMissedYield+0x14>)
 8007a66:	2201      	movs	r2, #1
 8007a68:	601a      	str	r2, [r3, #0]
}
 8007a6a:	bf00      	nop
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	20000d00 	.word	0x20000d00

08007a78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a80:	f000 f852 	bl	8007b28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a84:	4b06      	ldr	r3, [pc, #24]	; (8007aa0 <prvIdleTask+0x28>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d9f9      	bls.n	8007a80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a8c:	4b05      	ldr	r3, [pc, #20]	; (8007aa4 <prvIdleTask+0x2c>)
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a9c:	e7f0      	b.n	8007a80 <prvIdleTask+0x8>
 8007a9e:	bf00      	nop
 8007aa0:	2000081c 	.word	0x2000081c
 8007aa4:	e000ed04 	.word	0xe000ed04

08007aa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aae:	2300      	movs	r3, #0
 8007ab0:	607b      	str	r3, [r7, #4]
 8007ab2:	e00c      	b.n	8007ace <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4a12      	ldr	r2, [pc, #72]	; (8007b08 <prvInitialiseTaskLists+0x60>)
 8007ac0:	4413      	add	r3, r2
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe fd1a 	bl	80064fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	3301      	adds	r3, #1
 8007acc:	607b      	str	r3, [r7, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b37      	cmp	r3, #55	; 0x37
 8007ad2:	d9ef      	bls.n	8007ab4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ad4:	480d      	ldr	r0, [pc, #52]	; (8007b0c <prvInitialiseTaskLists+0x64>)
 8007ad6:	f7fe fd11 	bl	80064fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ada:	480d      	ldr	r0, [pc, #52]	; (8007b10 <prvInitialiseTaskLists+0x68>)
 8007adc:	f7fe fd0e 	bl	80064fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ae0:	480c      	ldr	r0, [pc, #48]	; (8007b14 <prvInitialiseTaskLists+0x6c>)
 8007ae2:	f7fe fd0b 	bl	80064fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ae6:	480c      	ldr	r0, [pc, #48]	; (8007b18 <prvInitialiseTaskLists+0x70>)
 8007ae8:	f7fe fd08 	bl	80064fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007aec:	480b      	ldr	r0, [pc, #44]	; (8007b1c <prvInitialiseTaskLists+0x74>)
 8007aee:	f7fe fd05 	bl	80064fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007af2:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <prvInitialiseTaskLists+0x78>)
 8007af4:	4a05      	ldr	r2, [pc, #20]	; (8007b0c <prvInitialiseTaskLists+0x64>)
 8007af6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007af8:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <prvInitialiseTaskLists+0x7c>)
 8007afa:	4a05      	ldr	r2, [pc, #20]	; (8007b10 <prvInitialiseTaskLists+0x68>)
 8007afc:	601a      	str	r2, [r3, #0]
}
 8007afe:	bf00      	nop
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	2000081c 	.word	0x2000081c
 8007b0c:	20000c7c 	.word	0x20000c7c
 8007b10:	20000c90 	.word	0x20000c90
 8007b14:	20000cac 	.word	0x20000cac
 8007b18:	20000cc0 	.word	0x20000cc0
 8007b1c:	20000cd8 	.word	0x20000cd8
 8007b20:	20000ca4 	.word	0x20000ca4
 8007b24:	20000ca8 	.word	0x20000ca8

08007b28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b2e:	e019      	b.n	8007b64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b30:	f000 fdbc 	bl	80086ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b34:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <prvCheckTasksWaitingTermination+0x4c>)
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fe fd65 	bl	8006610 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b46:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <prvCheckTasksWaitingTermination+0x50>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	4a0a      	ldr	r2, [pc, #40]	; (8007b78 <prvCheckTasksWaitingTermination+0x50>)
 8007b4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b50:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <prvCheckTasksWaitingTermination+0x54>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	4a09      	ldr	r2, [pc, #36]	; (8007b7c <prvCheckTasksWaitingTermination+0x54>)
 8007b58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b5a:	f000 fdd5 	bl	8008708 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f80e 	bl	8007b80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b64:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <prvCheckTasksWaitingTermination+0x54>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1e1      	bne.n	8007b30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b6c:	bf00      	nop
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20000cc0 	.word	0x20000cc0
 8007b78:	20000cec 	.word	0x20000cec
 8007b7c:	20000cd4 	.word	0x20000cd4

08007b80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d108      	bne.n	8007ba4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 ff64 	bl	8008a64 <vPortFree>
				vPortFree( pxTCB );
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 ff61 	bl	8008a64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ba2:	e017      	b.n	8007bd4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d103      	bne.n	8007bb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 ff58 	bl	8008a64 <vPortFree>
	}
 8007bb4:	e00e      	b.n	8007bd4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d009      	beq.n	8007bd4 <prvDeleteTCB+0x54>
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	e7fe      	b.n	8007bd2 <prvDeleteTCB+0x52>
	}
 8007bd4:	bf00      	nop
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007be2:	4b0c      	ldr	r3, [pc, #48]	; (8007c14 <prvResetNextTaskUnblockTime+0x38>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <prvResetNextTaskUnblockTime+0x3c>)
 8007bee:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bf4:	e008      	b.n	8007c08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf6:	4b07      	ldr	r3, [pc, #28]	; (8007c14 <prvResetNextTaskUnblockTime+0x38>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	4a04      	ldr	r2, [pc, #16]	; (8007c18 <prvResetNextTaskUnblockTime+0x3c>)
 8007c06:	6013      	str	r3, [r2, #0]
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	20000ca4 	.word	0x20000ca4
 8007c18:	20000d0c 	.word	0x20000d0c

08007c1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c22:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <xTaskGetSchedulerState+0x34>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d102      	bne.n	8007c30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	607b      	str	r3, [r7, #4]
 8007c2e:	e008      	b.n	8007c42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c30:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <xTaskGetSchedulerState+0x38>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d102      	bne.n	8007c3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c38:	2302      	movs	r3, #2
 8007c3a:	607b      	str	r3, [r7, #4]
 8007c3c:	e001      	b.n	8007c42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c42:	687b      	ldr	r3, [r7, #4]
	}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	20000cf8 	.word	0x20000cf8
 8007c54:	20000d14 	.word	0x20000d14

08007c58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c64:	2300      	movs	r3, #0
 8007c66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d054      	beq.n	8007d18 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c6e:	4b2d      	ldr	r3, [pc, #180]	; (8007d24 <xTaskPriorityDisinherit+0xcc>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d009      	beq.n	8007c8c <xTaskPriorityDisinherit+0x34>
 8007c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	e7fe      	b.n	8007c8a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d109      	bne.n	8007ca8 <xTaskPriorityDisinherit+0x50>
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	60bb      	str	r3, [r7, #8]
 8007ca6:	e7fe      	b.n	8007ca6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cac:	1e5a      	subs	r2, r3, #1
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d02c      	beq.n	8007d18 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d128      	bne.n	8007d18 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	3304      	adds	r3, #4
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe fca0 	bl	8006610 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cdc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce8:	4b0f      	ldr	r3, [pc, #60]	; (8007d28 <xTaskPriorityDisinherit+0xd0>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d903      	bls.n	8007cf8 <xTaskPriorityDisinherit+0xa0>
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	4a0c      	ldr	r2, [pc, #48]	; (8007d28 <xTaskPriorityDisinherit+0xd0>)
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4a09      	ldr	r2, [pc, #36]	; (8007d2c <xTaskPriorityDisinherit+0xd4>)
 8007d06:	441a      	add	r2, r3
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4610      	mov	r0, r2
 8007d10:	f7fe fc21 	bl	8006556 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d14:	2301      	movs	r3, #1
 8007d16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d18:	697b      	ldr	r3, [r7, #20]
	}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20000818 	.word	0x20000818
 8007d28:	20000cf4 	.word	0x20000cf4
 8007d2c:	2000081c 	.word	0x2000081c

08007d30 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d3a:	4b21      	ldr	r3, [pc, #132]	; (8007dc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d40:	4b20      	ldr	r3, [pc, #128]	; (8007dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3304      	adds	r3, #4
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe fc62 	bl	8006610 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d52:	d10a      	bne.n	8007d6a <prvAddCurrentTaskToDelayedList+0x3a>
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d007      	beq.n	8007d6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d5a:	4b1a      	ldr	r3, [pc, #104]	; (8007dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	3304      	adds	r3, #4
 8007d60:	4619      	mov	r1, r3
 8007d62:	4819      	ldr	r0, [pc, #100]	; (8007dc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d64:	f7fe fbf7 	bl	8006556 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d68:	e026      	b.n	8007db8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4413      	add	r3, r2
 8007d70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d72:	4b14      	ldr	r3, [pc, #80]	; (8007dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d209      	bcs.n	8007d96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d82:	4b12      	ldr	r3, [pc, #72]	; (8007dcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4610      	mov	r0, r2
 8007d90:	f7fe fc05 	bl	800659e <vListInsert>
}
 8007d94:	e010      	b.n	8007db8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d96:	4b0e      	ldr	r3, [pc, #56]	; (8007dd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4619      	mov	r1, r3
 8007da2:	4610      	mov	r0, r2
 8007da4:	f7fe fbfb 	bl	800659e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007da8:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d202      	bcs.n	8007db8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007db2:	4a08      	ldr	r2, [pc, #32]	; (8007dd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	6013      	str	r3, [r2, #0]
}
 8007db8:	bf00      	nop
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	20000cf0 	.word	0x20000cf0
 8007dc4:	20000818 	.word	0x20000818
 8007dc8:	20000cd8 	.word	0x20000cd8
 8007dcc:	20000ca8 	.word	0x20000ca8
 8007dd0:	20000ca4 	.word	0x20000ca4
 8007dd4:	20000d0c 	.word	0x20000d0c

08007dd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08a      	sub	sp, #40	; 0x28
 8007ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007de2:	f000 faff 	bl	80083e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007de6:	4b1c      	ldr	r3, [pc, #112]	; (8007e58 <xTimerCreateTimerTask+0x80>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d021      	beq.n	8007e32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007df2:	2300      	movs	r3, #0
 8007df4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007df6:	1d3a      	adds	r2, r7, #4
 8007df8:	f107 0108 	add.w	r1, r7, #8
 8007dfc:	f107 030c 	add.w	r3, r7, #12
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe fb61 	bl	80064c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e06:	6879      	ldr	r1, [r7, #4]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	9202      	str	r2, [sp, #8]
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	2302      	movs	r3, #2
 8007e12:	9300      	str	r3, [sp, #0]
 8007e14:	2300      	movs	r3, #0
 8007e16:	460a      	mov	r2, r1
 8007e18:	4910      	ldr	r1, [pc, #64]	; (8007e5c <xTimerCreateTimerTask+0x84>)
 8007e1a:	4811      	ldr	r0, [pc, #68]	; (8007e60 <xTimerCreateTimerTask+0x88>)
 8007e1c:	f7ff f8f6 	bl	800700c <xTaskCreateStatic>
 8007e20:	4602      	mov	r2, r0
 8007e22:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <xTimerCreateTimerTask+0x8c>)
 8007e24:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e26:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <xTimerCreateTimerTask+0x8c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d109      	bne.n	8007e4c <xTimerCreateTimerTask+0x74>
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	613b      	str	r3, [r7, #16]
 8007e4a:	e7fe      	b.n	8007e4a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007e4c:	697b      	ldr	r3, [r7, #20]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	20000d48 	.word	0x20000d48
 8007e5c:	0800984c 	.word	0x0800984c
 8007e60:	08007f99 	.word	0x08007f99
 8007e64:	20000d4c 	.word	0x20000d4c

08007e68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08a      	sub	sp, #40	; 0x28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e76:	2300      	movs	r3, #0
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d109      	bne.n	8007e94 <xTimerGenericCommand+0x2c>
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	623b      	str	r3, [r7, #32]
 8007e92:	e7fe      	b.n	8007e92 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e94:	4b19      	ldr	r3, [pc, #100]	; (8007efc <xTimerGenericCommand+0x94>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d02a      	beq.n	8007ef2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b05      	cmp	r3, #5
 8007eac:	dc18      	bgt.n	8007ee0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007eae:	f7ff feb5 	bl	8007c1c <xTaskGetSchedulerState>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d109      	bne.n	8007ecc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007eb8:	4b10      	ldr	r3, [pc, #64]	; (8007efc <xTimerGenericCommand+0x94>)
 8007eba:	6818      	ldr	r0, [r3, #0]
 8007ebc:	f107 0110 	add.w	r1, r7, #16
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ec4:	f7fe fccc 	bl	8006860 <xQueueGenericSend>
 8007ec8:	6278      	str	r0, [r7, #36]	; 0x24
 8007eca:	e012      	b.n	8007ef2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007ecc:	4b0b      	ldr	r3, [pc, #44]	; (8007efc <xTimerGenericCommand+0x94>)
 8007ece:	6818      	ldr	r0, [r3, #0]
 8007ed0:	f107 0110 	add.w	r1, r7, #16
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f7fe fcc2 	bl	8006860 <xQueueGenericSend>
 8007edc:	6278      	str	r0, [r7, #36]	; 0x24
 8007ede:	e008      	b.n	8007ef2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ee0:	4b06      	ldr	r3, [pc, #24]	; (8007efc <xTimerGenericCommand+0x94>)
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	f107 0110 	add.w	r1, r7, #16
 8007ee8:	2300      	movs	r3, #0
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	f7fe fdb2 	bl	8006a54 <xQueueGenericSendFromISR>
 8007ef0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3728      	adds	r7, #40	; 0x28
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	20000d48 	.word	0x20000d48

08007f00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b088      	sub	sp, #32
 8007f04:	af02      	add	r7, sp, #8
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f0a:	4b22      	ldr	r3, [pc, #136]	; (8007f94 <prvProcessExpiredTimer+0x94>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	3304      	adds	r3, #4
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fe fb79 	bl	8006610 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d021      	beq.n	8007f70 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	699a      	ldr	r2, [r3, #24]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	18d1      	adds	r1, r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	6978      	ldr	r0, [r7, #20]
 8007f3a:	f000 f8d1 	bl	80080e0 <prvInsertTimerInActiveList>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d01e      	beq.n	8007f82 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f44:	2300      	movs	r3, #0
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	6978      	ldr	r0, [r7, #20]
 8007f50:	f7ff ff8a 	bl	8007e68 <xTimerGenericCommand>
 8007f54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d112      	bne.n	8007f82 <prvProcessExpiredTimer+0x82>
 8007f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	60fb      	str	r3, [r7, #12]
 8007f6e:	e7fe      	b.n	8007f6e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f76:	f023 0301 	bic.w	r3, r3, #1
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	6978      	ldr	r0, [r7, #20]
 8007f88:	4798      	blx	r3
}
 8007f8a:	bf00      	nop
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000d40 	.word	0x20000d40

08007f98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fa0:	f107 0308 	add.w	r3, r7, #8
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 f857 	bl	8008058 <prvGetNextExpireTime>
 8007faa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 f803 	bl	8007fbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007fb6:	f000 f8d5 	bl	8008164 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fba:	e7f1      	b.n	8007fa0 <prvTimerTask+0x8>

08007fbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007fc6:	f7ff fa57 	bl	8007478 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fca:	f107 0308 	add.w	r3, r7, #8
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 f866 	bl	80080a0 <prvSampleTimeNow>
 8007fd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d130      	bne.n	800803e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <prvProcessTimerOrBlockTask+0x3c>
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d806      	bhi.n	8007ff8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fea:	f7ff fa53 	bl	8007494 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fee:	68f9      	ldr	r1, [r7, #12]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff ff85 	bl	8007f00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ff6:	e024      	b.n	8008042 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d008      	beq.n	8008010 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ffe:	4b13      	ldr	r3, [pc, #76]	; (800804c <prvProcessTimerOrBlockTask+0x90>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <prvProcessTimerOrBlockTask+0x50>
 8008008:	2301      	movs	r3, #1
 800800a:	e000      	b.n	800800e <prvProcessTimerOrBlockTask+0x52>
 800800c:	2300      	movs	r3, #0
 800800e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008010:	4b0f      	ldr	r3, [pc, #60]	; (8008050 <prvProcessTimerOrBlockTask+0x94>)
 8008012:	6818      	ldr	r0, [r3, #0]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	4619      	mov	r1, r3
 800801e:	f7fe ffc1 	bl	8006fa4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008022:	f7ff fa37 	bl	8007494 <xTaskResumeAll>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800802c:	4b09      	ldr	r3, [pc, #36]	; (8008054 <prvProcessTimerOrBlockTask+0x98>)
 800802e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	f3bf 8f6f 	isb	sy
}
 800803c:	e001      	b.n	8008042 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800803e:	f7ff fa29 	bl	8007494 <xTaskResumeAll>
}
 8008042:	bf00      	nop
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	20000d44 	.word	0x20000d44
 8008050:	20000d48 	.word	0x20000d48
 8008054:	e000ed04 	.word	0xe000ed04

08008058 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008060:	4b0e      	ldr	r3, [pc, #56]	; (800809c <prvGetNextExpireTime+0x44>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <prvGetNextExpireTime+0x16>
 800806a:	2201      	movs	r2, #1
 800806c:	e000      	b.n	8008070 <prvGetNextExpireTime+0x18>
 800806e:	2200      	movs	r2, #0
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d105      	bne.n	8008088 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800807c:	4b07      	ldr	r3, [pc, #28]	; (800809c <prvGetNextExpireTime+0x44>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	e001      	b.n	800808c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800808c:	68fb      	ldr	r3, [r7, #12]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	20000d40 	.word	0x20000d40

080080a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080a8:	f7ff fa90 	bl	80075cc <xTaskGetTickCount>
 80080ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080ae:	4b0b      	ldr	r3, [pc, #44]	; (80080dc <prvSampleTimeNow+0x3c>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d205      	bcs.n	80080c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080b8:	f000 f930 	bl	800831c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	e002      	b.n	80080ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080ca:	4a04      	ldr	r2, [pc, #16]	; (80080dc <prvSampleTimeNow+0x3c>)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080d0:	68fb      	ldr	r3, [r7, #12]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000d50 	.word	0x20000d50

080080e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080ee:	2300      	movs	r3, #0
 80080f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	429a      	cmp	r2, r3
 8008104:	d812      	bhi.n	800812c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	1ad2      	subs	r2, r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	429a      	cmp	r2, r3
 8008112:	d302      	bcc.n	800811a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008114:	2301      	movs	r3, #1
 8008116:	617b      	str	r3, [r7, #20]
 8008118:	e01b      	b.n	8008152 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800811a:	4b10      	ldr	r3, [pc, #64]	; (800815c <prvInsertTimerInActiveList+0x7c>)
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3304      	adds	r3, #4
 8008122:	4619      	mov	r1, r3
 8008124:	4610      	mov	r0, r2
 8008126:	f7fe fa3a 	bl	800659e <vListInsert>
 800812a:	e012      	b.n	8008152 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	429a      	cmp	r2, r3
 8008132:	d206      	bcs.n	8008142 <prvInsertTimerInActiveList+0x62>
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	429a      	cmp	r2, r3
 800813a:	d302      	bcc.n	8008142 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800813c:	2301      	movs	r3, #1
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e007      	b.n	8008152 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008142:	4b07      	ldr	r3, [pc, #28]	; (8008160 <prvInsertTimerInActiveList+0x80>)
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3304      	adds	r3, #4
 800814a:	4619      	mov	r1, r3
 800814c:	4610      	mov	r0, r2
 800814e:	f7fe fa26 	bl	800659e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008152:	697b      	ldr	r3, [r7, #20]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3718      	adds	r7, #24
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	20000d44 	.word	0x20000d44
 8008160:	20000d40 	.word	0x20000d40

08008164 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08e      	sub	sp, #56	; 0x38
 8008168:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800816a:	e0c6      	b.n	80082fa <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	da17      	bge.n	80081a2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008172:	1d3b      	adds	r3, r7, #4
 8008174:	3304      	adds	r3, #4
 8008176:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817a:	2b00      	cmp	r3, #0
 800817c:	d109      	bne.n	8008192 <prvProcessReceivedCommands+0x2e>
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	61fb      	str	r3, [r7, #28]
 8008190:	e7fe      	b.n	8008190 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008198:	6850      	ldr	r0, [r2, #4]
 800819a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800819c:	6892      	ldr	r2, [r2, #8]
 800819e:	4611      	mov	r1, r2
 80081a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f2c0 80a7 	blt.w	80082f8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d004      	beq.n	80081c0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b8:	3304      	adds	r3, #4
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe fa28 	bl	8006610 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081c0:	463b      	mov	r3, r7
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7ff ff6c 	bl	80080a0 <prvSampleTimeNow>
 80081c8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b09      	cmp	r3, #9
 80081ce:	f200 8094 	bhi.w	80082fa <prvProcessReceivedCommands+0x196>
 80081d2:	a201      	add	r2, pc, #4	; (adr r2, 80081d8 <prvProcessReceivedCommands+0x74>)
 80081d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d8:	08008201 	.word	0x08008201
 80081dc:	08008201 	.word	0x08008201
 80081e0:	08008201 	.word	0x08008201
 80081e4:	08008273 	.word	0x08008273
 80081e8:	08008287 	.word	0x08008287
 80081ec:	080082cf 	.word	0x080082cf
 80081f0:	08008201 	.word	0x08008201
 80081f4:	08008201 	.word	0x08008201
 80081f8:	08008273 	.word	0x08008273
 80081fc:	08008287 	.word	0x08008287
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008206:	f043 0301 	orr.w	r3, r3, #1
 800820a:	b2da      	uxtb	r2, r3
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	18d1      	adds	r1, r2, r3
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800821e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008220:	f7ff ff5e 	bl	80080e0 <prvInsertTimerInActiveList>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d067      	beq.n	80082fa <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008230:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b00      	cmp	r3, #0
 800823e:	d05c      	beq.n	80082fa <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	441a      	add	r2, r3
 8008248:	2300      	movs	r3, #0
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	2300      	movs	r3, #0
 800824e:	2100      	movs	r1, #0
 8008250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008252:	f7ff fe09 	bl	8007e68 <xTimerGenericCommand>
 8008256:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d14d      	bne.n	80082fa <prvProcessReceivedCommands+0x196>
 800825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	61bb      	str	r3, [r7, #24]
 8008270:	e7fe      	b.n	8008270 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008278:	f023 0301 	bic.w	r3, r3, #1
 800827c:	b2da      	uxtb	r2, r3
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008284:	e039      	b.n	80082fa <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800828c:	f043 0301 	orr.w	r3, r3, #1
 8008290:	b2da      	uxtb	r2, r3
 8008292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008294:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d109      	bne.n	80082ba <prvProcessReceivedCommands+0x156>
 80082a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	617b      	str	r3, [r7, #20]
 80082b8:	e7fe      	b.n	80082b8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	18d1      	adds	r1, r2, r3
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082c8:	f7ff ff0a 	bl	80080e0 <prvInsertTimerInActiveList>
					break;
 80082cc:	e015      	b.n	80082fa <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d103      	bne.n	80082e4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80082dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082de:	f000 fbc1 	bl	8008a64 <vPortFree>
 80082e2:	e00a      	b.n	80082fa <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082ea:	f023 0301 	bic.w	r3, r3, #1
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082f6:	e000      	b.n	80082fa <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80082f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082fa:	4b07      	ldr	r3, [pc, #28]	; (8008318 <prvProcessReceivedCommands+0x1b4>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	1d39      	adds	r1, r7, #4
 8008300:	2200      	movs	r2, #0
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fc3a 	bl	8006b7c <xQueueReceive>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	f47f af2e 	bne.w	800816c <prvProcessReceivedCommands+0x8>
	}
}
 8008310:	bf00      	nop
 8008312:	3730      	adds	r7, #48	; 0x30
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	20000d48 	.word	0x20000d48

0800831c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008322:	e047      	b.n	80083b4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008324:	4b2d      	ldr	r3, [pc, #180]	; (80083dc <prvSwitchTimerLists+0xc0>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800832e:	4b2b      	ldr	r3, [pc, #172]	; (80083dc <prvSwitchTimerLists+0xc0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	3304      	adds	r3, #4
 800833c:	4618      	mov	r0, r3
 800833e:	f7fe f967 	bl	8006610 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	2b00      	cmp	r3, #0
 8008356:	d02d      	beq.n	80083b4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	4413      	add	r3, r2
 8008360:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	429a      	cmp	r2, r3
 8008368:	d90e      	bls.n	8008388 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008376:	4b19      	ldr	r3, [pc, #100]	; (80083dc <prvSwitchTimerLists+0xc0>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3304      	adds	r3, #4
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f7fe f90c 	bl	800659e <vListInsert>
 8008386:	e015      	b.n	80083b4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008388:	2300      	movs	r3, #0
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	2300      	movs	r3, #0
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	2100      	movs	r1, #0
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7ff fd68 	bl	8007e68 <xTimerGenericCommand>
 8008398:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d109      	bne.n	80083b4 <prvSwitchTimerLists+0x98>
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	603b      	str	r3, [r7, #0]
 80083b2:	e7fe      	b.n	80083b2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083b4:	4b09      	ldr	r3, [pc, #36]	; (80083dc <prvSwitchTimerLists+0xc0>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1b2      	bne.n	8008324 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083be:	4b07      	ldr	r3, [pc, #28]	; (80083dc <prvSwitchTimerLists+0xc0>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083c4:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <prvSwitchTimerLists+0xc4>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a04      	ldr	r2, [pc, #16]	; (80083dc <prvSwitchTimerLists+0xc0>)
 80083ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083cc:	4a04      	ldr	r2, [pc, #16]	; (80083e0 <prvSwitchTimerLists+0xc4>)
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	6013      	str	r3, [r2, #0]
}
 80083d2:	bf00      	nop
 80083d4:	3718      	adds	r7, #24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20000d40 	.word	0x20000d40
 80083e0:	20000d44 	.word	0x20000d44

080083e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083ea:	f000 f95f 	bl	80086ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083ee:	4b15      	ldr	r3, [pc, #84]	; (8008444 <prvCheckForValidListAndQueue+0x60>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d120      	bne.n	8008438 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083f6:	4814      	ldr	r0, [pc, #80]	; (8008448 <prvCheckForValidListAndQueue+0x64>)
 80083f8:	f7fe f880 	bl	80064fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083fc:	4813      	ldr	r0, [pc, #76]	; (800844c <prvCheckForValidListAndQueue+0x68>)
 80083fe:	f7fe f87d 	bl	80064fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008402:	4b13      	ldr	r3, [pc, #76]	; (8008450 <prvCheckForValidListAndQueue+0x6c>)
 8008404:	4a10      	ldr	r2, [pc, #64]	; (8008448 <prvCheckForValidListAndQueue+0x64>)
 8008406:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008408:	4b12      	ldr	r3, [pc, #72]	; (8008454 <prvCheckForValidListAndQueue+0x70>)
 800840a:	4a10      	ldr	r2, [pc, #64]	; (800844c <prvCheckForValidListAndQueue+0x68>)
 800840c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800840e:	2300      	movs	r3, #0
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	4b11      	ldr	r3, [pc, #68]	; (8008458 <prvCheckForValidListAndQueue+0x74>)
 8008414:	4a11      	ldr	r2, [pc, #68]	; (800845c <prvCheckForValidListAndQueue+0x78>)
 8008416:	2110      	movs	r1, #16
 8008418:	200a      	movs	r0, #10
 800841a:	f7fe f98b 	bl	8006734 <xQueueGenericCreateStatic>
 800841e:	4602      	mov	r2, r0
 8008420:	4b08      	ldr	r3, [pc, #32]	; (8008444 <prvCheckForValidListAndQueue+0x60>)
 8008422:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008424:	4b07      	ldr	r3, [pc, #28]	; (8008444 <prvCheckForValidListAndQueue+0x60>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800842c:	4b05      	ldr	r3, [pc, #20]	; (8008444 <prvCheckForValidListAndQueue+0x60>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	490b      	ldr	r1, [pc, #44]	; (8008460 <prvCheckForValidListAndQueue+0x7c>)
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe fd8e 	bl	8006f54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008438:	f000 f966 	bl	8008708 <vPortExitCritical>
}
 800843c:	bf00      	nop
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	20000d48 	.word	0x20000d48
 8008448:	20000d18 	.word	0x20000d18
 800844c:	20000d2c 	.word	0x20000d2c
 8008450:	20000d40 	.word	0x20000d40
 8008454:	20000d44 	.word	0x20000d44
 8008458:	20000df4 	.word	0x20000df4
 800845c:	20000d54 	.word	0x20000d54
 8008460:	08009854 	.word	0x08009854

08008464 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3b04      	subs	r3, #4
 8008474:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800847c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3b04      	subs	r3, #4
 8008482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f023 0201 	bic.w	r2, r3, #1
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3b04      	subs	r3, #4
 8008492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008494:	4a0c      	ldr	r2, [pc, #48]	; (80084c8 <pxPortInitialiseStack+0x64>)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3b14      	subs	r3, #20
 800849e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3b04      	subs	r3, #4
 80084aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f06f 0202 	mvn.w	r2, #2
 80084b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3b20      	subs	r3, #32
 80084b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084ba:	68fb      	ldr	r3, [r7, #12]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr
 80084c8:	080084cd 	.word	0x080084cd

080084cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084d6:	4b11      	ldr	r3, [pc, #68]	; (800851c <prvTaskExitError+0x50>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084de:	d009      	beq.n	80084f4 <prvTaskExitError+0x28>
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	e7fe      	b.n	80084f2 <prvTaskExitError+0x26>
 80084f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008506:	bf00      	nop
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0fc      	beq.n	8008508 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800850e:	bf00      	nop
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	2000004c 	.word	0x2000004c

08008520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008520:	4b07      	ldr	r3, [pc, #28]	; (8008540 <pxCurrentTCBConst2>)
 8008522:	6819      	ldr	r1, [r3, #0]
 8008524:	6808      	ldr	r0, [r1, #0]
 8008526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852a:	f380 8809 	msr	PSP, r0
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f04f 0000 	mov.w	r0, #0
 8008536:	f380 8811 	msr	BASEPRI, r0
 800853a:	4770      	bx	lr
 800853c:	f3af 8000 	nop.w

08008540 <pxCurrentTCBConst2>:
 8008540:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop

08008548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008548:	4808      	ldr	r0, [pc, #32]	; (800856c <prvPortStartFirstTask+0x24>)
 800854a:	6800      	ldr	r0, [r0, #0]
 800854c:	6800      	ldr	r0, [r0, #0]
 800854e:	f380 8808 	msr	MSP, r0
 8008552:	f04f 0000 	mov.w	r0, #0
 8008556:	f380 8814 	msr	CONTROL, r0
 800855a:	b662      	cpsie	i
 800855c:	b661      	cpsie	f
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	df00      	svc	0
 8008568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800856a:	bf00      	nop
 800856c:	e000ed08 	.word	0xe000ed08

08008570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008576:	4b44      	ldr	r3, [pc, #272]	; (8008688 <xPortStartScheduler+0x118>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a44      	ldr	r2, [pc, #272]	; (800868c <xPortStartScheduler+0x11c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d109      	bne.n	8008594 <xPortStartScheduler+0x24>
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	613b      	str	r3, [r7, #16]
 8008592:	e7fe      	b.n	8008592 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008594:	4b3c      	ldr	r3, [pc, #240]	; (8008688 <xPortStartScheduler+0x118>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a3d      	ldr	r2, [pc, #244]	; (8008690 <xPortStartScheduler+0x120>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d109      	bne.n	80085b2 <xPortStartScheduler+0x42>
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	e7fe      	b.n	80085b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085b2:	4b38      	ldr	r3, [pc, #224]	; (8008694 <xPortStartScheduler+0x124>)
 80085b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	22ff      	movs	r2, #255	; 0xff
 80085c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	4b30      	ldr	r3, [pc, #192]	; (8008698 <xPortStartScheduler+0x128>)
 80085d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085da:	4b30      	ldr	r3, [pc, #192]	; (800869c <xPortStartScheduler+0x12c>)
 80085dc:	2207      	movs	r2, #7
 80085de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085e0:	e009      	b.n	80085f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80085e2:	4b2e      	ldr	r3, [pc, #184]	; (800869c <xPortStartScheduler+0x12c>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	4a2c      	ldr	r2, [pc, #176]	; (800869c <xPortStartScheduler+0x12c>)
 80085ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fe:	2b80      	cmp	r3, #128	; 0x80
 8008600:	d0ef      	beq.n	80085e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008602:	4b26      	ldr	r3, [pc, #152]	; (800869c <xPortStartScheduler+0x12c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f1c3 0307 	rsb	r3, r3, #7
 800860a:	2b04      	cmp	r3, #4
 800860c:	d009      	beq.n	8008622 <xPortStartScheduler+0xb2>
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	60bb      	str	r3, [r7, #8]
 8008620:	e7fe      	b.n	8008620 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008622:	4b1e      	ldr	r3, [pc, #120]	; (800869c <xPortStartScheduler+0x12c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	021b      	lsls	r3, r3, #8
 8008628:	4a1c      	ldr	r2, [pc, #112]	; (800869c <xPortStartScheduler+0x12c>)
 800862a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800862c:	4b1b      	ldr	r3, [pc, #108]	; (800869c <xPortStartScheduler+0x12c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008634:	4a19      	ldr	r2, [pc, #100]	; (800869c <xPortStartScheduler+0x12c>)
 8008636:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	b2da      	uxtb	r2, r3
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008640:	4b17      	ldr	r3, [pc, #92]	; (80086a0 <xPortStartScheduler+0x130>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a16      	ldr	r2, [pc, #88]	; (80086a0 <xPortStartScheduler+0x130>)
 8008646:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800864a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800864c:	4b14      	ldr	r3, [pc, #80]	; (80086a0 <xPortStartScheduler+0x130>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a13      	ldr	r2, [pc, #76]	; (80086a0 <xPortStartScheduler+0x130>)
 8008652:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008656:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008658:	f000 f8d6 	bl	8008808 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800865c:	4b11      	ldr	r3, [pc, #68]	; (80086a4 <xPortStartScheduler+0x134>)
 800865e:	2200      	movs	r2, #0
 8008660:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008662:	f000 f8f5 	bl	8008850 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008666:	4b10      	ldr	r3, [pc, #64]	; (80086a8 <xPortStartScheduler+0x138>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a0f      	ldr	r2, [pc, #60]	; (80086a8 <xPortStartScheduler+0x138>)
 800866c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008670:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008672:	f7ff ff69 	bl	8008548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008676:	f7ff f871 	bl	800775c <vTaskSwitchContext>
	prvTaskExitError();
 800867a:	f7ff ff27 	bl	80084cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	e000ed00 	.word	0xe000ed00
 800868c:	410fc271 	.word	0x410fc271
 8008690:	410fc270 	.word	0x410fc270
 8008694:	e000e400 	.word	0xe000e400
 8008698:	20000e44 	.word	0x20000e44
 800869c:	20000e48 	.word	0x20000e48
 80086a0:	e000ed20 	.word	0xe000ed20
 80086a4:	2000004c 	.word	0x2000004c
 80086a8:	e000ef34 	.word	0xe000ef34

080086ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086c4:	4b0e      	ldr	r3, [pc, #56]	; (8008700 <vPortEnterCritical+0x54>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3301      	adds	r3, #1
 80086ca:	4a0d      	ldr	r2, [pc, #52]	; (8008700 <vPortEnterCritical+0x54>)
 80086cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086ce:	4b0c      	ldr	r3, [pc, #48]	; (8008700 <vPortEnterCritical+0x54>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d10e      	bne.n	80086f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086d6:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <vPortEnterCritical+0x58>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d009      	beq.n	80086f4 <vPortEnterCritical+0x48>
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	603b      	str	r3, [r7, #0]
 80086f2:	e7fe      	b.n	80086f2 <vPortEnterCritical+0x46>
	}
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	2000004c 	.word	0x2000004c
 8008704:	e000ed04 	.word	0xe000ed04

08008708 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800870e:	4b11      	ldr	r3, [pc, #68]	; (8008754 <vPortExitCritical+0x4c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d109      	bne.n	800872a <vPortExitCritical+0x22>
 8008716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	607b      	str	r3, [r7, #4]
 8008728:	e7fe      	b.n	8008728 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800872a:	4b0a      	ldr	r3, [pc, #40]	; (8008754 <vPortExitCritical+0x4c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3b01      	subs	r3, #1
 8008730:	4a08      	ldr	r2, [pc, #32]	; (8008754 <vPortExitCritical+0x4c>)
 8008732:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008734:	4b07      	ldr	r3, [pc, #28]	; (8008754 <vPortExitCritical+0x4c>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d104      	bne.n	8008746 <vPortExitCritical+0x3e>
 800873c:	2300      	movs	r3, #0
 800873e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	2000004c 	.word	0x2000004c
	...

08008760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008760:	f3ef 8009 	mrs	r0, PSP
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	4b15      	ldr	r3, [pc, #84]	; (80087c0 <pxCurrentTCBConst>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	f01e 0f10 	tst.w	lr, #16
 8008770:	bf08      	it	eq
 8008772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877a:	6010      	str	r0, [r2, #0]
 800877c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008784:	f380 8811 	msr	BASEPRI, r0
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f7fe ffe4 	bl	800775c <vTaskSwitchContext>
 8008794:	f04f 0000 	mov.w	r0, #0
 8008798:	f380 8811 	msr	BASEPRI, r0
 800879c:	bc09      	pop	{r0, r3}
 800879e:	6819      	ldr	r1, [r3, #0]
 80087a0:	6808      	ldr	r0, [r1, #0]
 80087a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a6:	f01e 0f10 	tst.w	lr, #16
 80087aa:	bf08      	it	eq
 80087ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087b0:	f380 8809 	msr	PSP, r0
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	f3af 8000 	nop.w

080087c0 <pxCurrentTCBConst>:
 80087c0:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087c4:	bf00      	nop
 80087c6:	bf00      	nop

080087c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80087e0:	f7fe ff04 	bl	80075ec <xTaskIncrementTick>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80087ea:	4b06      	ldr	r3, [pc, #24]	; (8008804 <SysTick_Handler+0x3c>)
 80087ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f0:	601a      	str	r2, [r3, #0]
 80087f2:	2300      	movs	r3, #0
 80087f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	e000ed04 	.word	0xe000ed04

08008808 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008808:	b480      	push	{r7}
 800880a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800880c:	4b0b      	ldr	r3, [pc, #44]	; (800883c <vPortSetupTimerInterrupt+0x34>)
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008812:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <vPortSetupTimerInterrupt+0x38>)
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008818:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <vPortSetupTimerInterrupt+0x3c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a0a      	ldr	r2, [pc, #40]	; (8008848 <vPortSetupTimerInterrupt+0x40>)
 800881e:	fba2 2303 	umull	r2, r3, r2, r3
 8008822:	099b      	lsrs	r3, r3, #6
 8008824:	4a09      	ldr	r2, [pc, #36]	; (800884c <vPortSetupTimerInterrupt+0x44>)
 8008826:	3b01      	subs	r3, #1
 8008828:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800882a:	4b04      	ldr	r3, [pc, #16]	; (800883c <vPortSetupTimerInterrupt+0x34>)
 800882c:	2207      	movs	r2, #7
 800882e:	601a      	str	r2, [r3, #0]
}
 8008830:	bf00      	nop
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	e000e010 	.word	0xe000e010
 8008840:	e000e018 	.word	0xe000e018
 8008844:	20000040 	.word	0x20000040
 8008848:	10624dd3 	.word	0x10624dd3
 800884c:	e000e014 	.word	0xe000e014

08008850 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008850:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008860 <vPortEnableVFP+0x10>
 8008854:	6801      	ldr	r1, [r0, #0]
 8008856:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800885a:	6001      	str	r1, [r0, #0]
 800885c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800885e:	bf00      	nop
 8008860:	e000ed88 	.word	0xe000ed88

08008864 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800886a:	f3ef 8305 	mrs	r3, IPSR
 800886e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b0f      	cmp	r3, #15
 8008874:	d913      	bls.n	800889e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008876:	4a16      	ldr	r2, [pc, #88]	; (80088d0 <vPortValidateInterruptPriority+0x6c>)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4413      	add	r3, r2
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008880:	4b14      	ldr	r3, [pc, #80]	; (80088d4 <vPortValidateInterruptPriority+0x70>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	7afa      	ldrb	r2, [r7, #11]
 8008886:	429a      	cmp	r2, r3
 8008888:	d209      	bcs.n	800889e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	607b      	str	r3, [r7, #4]
 800889c:	e7fe      	b.n	800889c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800889e:	4b0e      	ldr	r3, [pc, #56]	; (80088d8 <vPortValidateInterruptPriority+0x74>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088a6:	4b0d      	ldr	r3, [pc, #52]	; (80088dc <vPortValidateInterruptPriority+0x78>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d909      	bls.n	80088c2 <vPortValidateInterruptPriority+0x5e>
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	e7fe      	b.n	80088c0 <vPortValidateInterruptPriority+0x5c>
	}
 80088c2:	bf00      	nop
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	e000e3f0 	.word	0xe000e3f0
 80088d4:	20000e44 	.word	0x20000e44
 80088d8:	e000ed0c 	.word	0xe000ed0c
 80088dc:	20000e48 	.word	0x20000e48

080088e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08a      	sub	sp, #40	; 0x28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80088e8:	2300      	movs	r3, #0
 80088ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80088ec:	f7fe fdc4 	bl	8007478 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80088f0:	4b57      	ldr	r3, [pc, #348]	; (8008a50 <pvPortMalloc+0x170>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80088f8:	f000 f90c 	bl	8008b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80088fc:	4b55      	ldr	r3, [pc, #340]	; (8008a54 <pvPortMalloc+0x174>)
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4013      	ands	r3, r2
 8008904:	2b00      	cmp	r3, #0
 8008906:	f040 808c 	bne.w	8008a22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d01c      	beq.n	800894a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008910:	2208      	movs	r2, #8
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4413      	add	r3, r2
 8008916:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f003 0307 	and.w	r3, r3, #7
 800891e:	2b00      	cmp	r3, #0
 8008920:	d013      	beq.n	800894a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f023 0307 	bic.w	r3, r3, #7
 8008928:	3308      	adds	r3, #8
 800892a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	2b00      	cmp	r3, #0
 8008934:	d009      	beq.n	800894a <pvPortMalloc+0x6a>
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	617b      	str	r3, [r7, #20]
 8008948:	e7fe      	b.n	8008948 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d068      	beq.n	8008a22 <pvPortMalloc+0x142>
 8008950:	4b41      	ldr	r3, [pc, #260]	; (8008a58 <pvPortMalloc+0x178>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d863      	bhi.n	8008a22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800895a:	4b40      	ldr	r3, [pc, #256]	; (8008a5c <pvPortMalloc+0x17c>)
 800895c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800895e:	4b3f      	ldr	r3, [pc, #252]	; (8008a5c <pvPortMalloc+0x17c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008964:	e004      	b.n	8008970 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	429a      	cmp	r2, r3
 8008978:	d903      	bls.n	8008982 <pvPortMalloc+0xa2>
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f1      	bne.n	8008966 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008982:	4b33      	ldr	r3, [pc, #204]	; (8008a50 <pvPortMalloc+0x170>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008988:	429a      	cmp	r2, r3
 800898a:	d04a      	beq.n	8008a22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2208      	movs	r2, #8
 8008992:	4413      	add	r3, r2
 8008994:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	1ad2      	subs	r2, r2, r3
 80089a6:	2308      	movs	r3, #8
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d91e      	bls.n	80089ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4413      	add	r3, r2
 80089b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d009      	beq.n	80089d4 <pvPortMalloc+0xf4>
 80089c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	613b      	str	r3, [r7, #16]
 80089d2:	e7fe      	b.n	80089d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	685a      	ldr	r2, [r3, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	1ad2      	subs	r2, r2, r3
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80089e6:	69b8      	ldr	r0, [r7, #24]
 80089e8:	f000 f8f6 	bl	8008bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80089ec:	4b1a      	ldr	r3, [pc, #104]	; (8008a58 <pvPortMalloc+0x178>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	4a18      	ldr	r2, [pc, #96]	; (8008a58 <pvPortMalloc+0x178>)
 80089f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80089fa:	4b17      	ldr	r3, [pc, #92]	; (8008a58 <pvPortMalloc+0x178>)
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	4b18      	ldr	r3, [pc, #96]	; (8008a60 <pvPortMalloc+0x180>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d203      	bcs.n	8008a0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a06:	4b14      	ldr	r3, [pc, #80]	; (8008a58 <pvPortMalloc+0x178>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a15      	ldr	r2, [pc, #84]	; (8008a60 <pvPortMalloc+0x180>)
 8008a0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	4b10      	ldr	r3, [pc, #64]	; (8008a54 <pvPortMalloc+0x174>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	431a      	orrs	r2, r3
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a22:	f7fe fd37 	bl	8007494 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	f003 0307 	and.w	r3, r3, #7
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d009      	beq.n	8008a44 <pvPortMalloc+0x164>
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	e7fe      	b.n	8008a42 <pvPortMalloc+0x162>
	return pvReturn;
 8008a44:	69fb      	ldr	r3, [r7, #28]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3728      	adds	r7, #40	; 0x28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20001a0c 	.word	0x20001a0c
 8008a54:	20001a18 	.word	0x20001a18
 8008a58:	20001a10 	.word	0x20001a10
 8008a5c:	20001a04 	.word	0x20001a04
 8008a60:	20001a14 	.word	0x20001a14

08008a64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d046      	beq.n	8008b04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008a76:	2308      	movs	r3, #8
 8008a78:	425b      	negs	r3, r3
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	4b20      	ldr	r3, [pc, #128]	; (8008b0c <vPortFree+0xa8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d109      	bne.n	8008aa6 <vPortFree+0x42>
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	e7fe      	b.n	8008aa4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d009      	beq.n	8008ac2 <vPortFree+0x5e>
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	60bb      	str	r3, [r7, #8]
 8008ac0:	e7fe      	b.n	8008ac0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	4b11      	ldr	r3, [pc, #68]	; (8008b0c <vPortFree+0xa8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4013      	ands	r3, r2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d019      	beq.n	8008b04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d115      	bne.n	8008b04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	4b0b      	ldr	r3, [pc, #44]	; (8008b0c <vPortFree+0xa8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	401a      	ands	r2, r3
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ae8:	f7fe fcc6 	bl	8007478 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	4b07      	ldr	r3, [pc, #28]	; (8008b10 <vPortFree+0xac>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4413      	add	r3, r2
 8008af6:	4a06      	ldr	r2, [pc, #24]	; (8008b10 <vPortFree+0xac>)
 8008af8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008afa:	6938      	ldr	r0, [r7, #16]
 8008afc:	f000 f86c 	bl	8008bd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b00:	f7fe fcc8 	bl	8007494 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b04:	bf00      	nop
 8008b06:	3718      	adds	r7, #24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20001a18 	.word	0x20001a18
 8008b10:	20001a10 	.word	0x20001a10

08008b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b20:	4b27      	ldr	r3, [pc, #156]	; (8008bc0 <prvHeapInit+0xac>)
 8008b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f003 0307 	and.w	r3, r3, #7
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00c      	beq.n	8008b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3307      	adds	r3, #7
 8008b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0307 	bic.w	r3, r3, #7
 8008b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	4a1f      	ldr	r2, [pc, #124]	; (8008bc0 <prvHeapInit+0xac>)
 8008b44:	4413      	add	r3, r2
 8008b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b4c:	4a1d      	ldr	r2, [pc, #116]	; (8008bc4 <prvHeapInit+0xb0>)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b52:	4b1c      	ldr	r3, [pc, #112]	; (8008bc4 <prvHeapInit+0xb0>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008b60:	2208      	movs	r2, #8
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	1a9b      	subs	r3, r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0307 	bic.w	r3, r3, #7
 8008b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4a15      	ldr	r2, [pc, #84]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008b76:	4b14      	ldr	r3, [pc, #80]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008b7e:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	1ad2      	subs	r2, r2, r3
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b94:	4b0c      	ldr	r3, [pc, #48]	; (8008bc8 <prvHeapInit+0xb4>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	4a0a      	ldr	r2, [pc, #40]	; (8008bcc <prvHeapInit+0xb8>)
 8008ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	4a09      	ldr	r2, [pc, #36]	; (8008bd0 <prvHeapInit+0xbc>)
 8008baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bac:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <prvHeapInit+0xc0>)
 8008bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bb2:	601a      	str	r2, [r3, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	20000e4c 	.word	0x20000e4c
 8008bc4:	20001a04 	.word	0x20001a04
 8008bc8:	20001a0c 	.word	0x20001a0c
 8008bcc:	20001a14 	.word	0x20001a14
 8008bd0:	20001a10 	.word	0x20001a10
 8008bd4:	20001a18 	.word	0x20001a18

08008bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008be0:	4b28      	ldr	r3, [pc, #160]	; (8008c84 <prvInsertBlockIntoFreeList+0xac>)
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e002      	b.n	8008bec <prvInsertBlockIntoFreeList+0x14>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d8f7      	bhi.n	8008be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	4413      	add	r3, r2
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d108      	bne.n	8008c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	441a      	add	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	441a      	add	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d118      	bne.n	8008c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	4b15      	ldr	r3, [pc, #84]	; (8008c88 <prvInsertBlockIntoFreeList+0xb0>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d00d      	beq.n	8008c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	441a      	add	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	e008      	b.n	8008c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c56:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <prvInsertBlockIntoFreeList+0xb0>)
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	e003      	b.n	8008c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d002      	beq.n	8008c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c76:	bf00      	nop
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20001a04 	.word	0x20001a04
 8008c88:	20001a0c 	.word	0x20001a0c

08008c8c <__errno>:
 8008c8c:	4b01      	ldr	r3, [pc, #4]	; (8008c94 <__errno+0x8>)
 8008c8e:	6818      	ldr	r0, [r3, #0]
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	20000050 	.word	0x20000050

08008c98 <__libc_init_array>:
 8008c98:	b570      	push	{r4, r5, r6, lr}
 8008c9a:	4e0d      	ldr	r6, [pc, #52]	; (8008cd0 <__libc_init_array+0x38>)
 8008c9c:	4c0d      	ldr	r4, [pc, #52]	; (8008cd4 <__libc_init_array+0x3c>)
 8008c9e:	1ba4      	subs	r4, r4, r6
 8008ca0:	10a4      	asrs	r4, r4, #2
 8008ca2:	2500      	movs	r5, #0
 8008ca4:	42a5      	cmp	r5, r4
 8008ca6:	d109      	bne.n	8008cbc <__libc_init_array+0x24>
 8008ca8:	4e0b      	ldr	r6, [pc, #44]	; (8008cd8 <__libc_init_array+0x40>)
 8008caa:	4c0c      	ldr	r4, [pc, #48]	; (8008cdc <__libc_init_array+0x44>)
 8008cac:	f000 fd44 	bl	8009738 <_init>
 8008cb0:	1ba4      	subs	r4, r4, r6
 8008cb2:	10a4      	asrs	r4, r4, #2
 8008cb4:	2500      	movs	r5, #0
 8008cb6:	42a5      	cmp	r5, r4
 8008cb8:	d105      	bne.n	8008cc6 <__libc_init_array+0x2e>
 8008cba:	bd70      	pop	{r4, r5, r6, pc}
 8008cbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cc0:	4798      	blx	r3
 8008cc2:	3501      	adds	r5, #1
 8008cc4:	e7ee      	b.n	8008ca4 <__libc_init_array+0xc>
 8008cc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008cca:	4798      	blx	r3
 8008ccc:	3501      	adds	r5, #1
 8008cce:	e7f2      	b.n	8008cb6 <__libc_init_array+0x1e>
 8008cd0:	08009934 	.word	0x08009934
 8008cd4:	08009934 	.word	0x08009934
 8008cd8:	08009934 	.word	0x08009934
 8008cdc:	08009938 	.word	0x08009938

08008ce0 <memcpy>:
 8008ce0:	b510      	push	{r4, lr}
 8008ce2:	1e43      	subs	r3, r0, #1
 8008ce4:	440a      	add	r2, r1
 8008ce6:	4291      	cmp	r1, r2
 8008ce8:	d100      	bne.n	8008cec <memcpy+0xc>
 8008cea:	bd10      	pop	{r4, pc}
 8008cec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cf4:	e7f7      	b.n	8008ce6 <memcpy+0x6>

08008cf6 <memset>:
 8008cf6:	4402      	add	r2, r0
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d100      	bne.n	8008d00 <memset+0xa>
 8008cfe:	4770      	bx	lr
 8008d00:	f803 1b01 	strb.w	r1, [r3], #1
 8008d04:	e7f9      	b.n	8008cfa <memset+0x4>
	...

08008d08 <siprintf>:
 8008d08:	b40e      	push	{r1, r2, r3}
 8008d0a:	b500      	push	{lr}
 8008d0c:	b09c      	sub	sp, #112	; 0x70
 8008d0e:	ab1d      	add	r3, sp, #116	; 0x74
 8008d10:	9002      	str	r0, [sp, #8]
 8008d12:	9006      	str	r0, [sp, #24]
 8008d14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d18:	4809      	ldr	r0, [pc, #36]	; (8008d40 <siprintf+0x38>)
 8008d1a:	9107      	str	r1, [sp, #28]
 8008d1c:	9104      	str	r1, [sp, #16]
 8008d1e:	4909      	ldr	r1, [pc, #36]	; (8008d44 <siprintf+0x3c>)
 8008d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d24:	9105      	str	r1, [sp, #20]
 8008d26:	6800      	ldr	r0, [r0, #0]
 8008d28:	9301      	str	r3, [sp, #4]
 8008d2a:	a902      	add	r1, sp, #8
 8008d2c:	f000 f876 	bl	8008e1c <_svfiprintf_r>
 8008d30:	9b02      	ldr	r3, [sp, #8]
 8008d32:	2200      	movs	r2, #0
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	b01c      	add	sp, #112	; 0x70
 8008d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d3c:	b003      	add	sp, #12
 8008d3e:	4770      	bx	lr
 8008d40:	20000050 	.word	0x20000050
 8008d44:	ffff0208 	.word	0xffff0208

08008d48 <strcat>:
 8008d48:	b510      	push	{r4, lr}
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	781a      	ldrb	r2, [r3, #0]
 8008d4e:	1c5c      	adds	r4, r3, #1
 8008d50:	b93a      	cbnz	r2, 8008d62 <strcat+0x1a>
 8008d52:	3b01      	subs	r3, #1
 8008d54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d5c:	2a00      	cmp	r2, #0
 8008d5e:	d1f9      	bne.n	8008d54 <strcat+0xc>
 8008d60:	bd10      	pop	{r4, pc}
 8008d62:	4623      	mov	r3, r4
 8008d64:	e7f2      	b.n	8008d4c <strcat+0x4>

08008d66 <__ssputs_r>:
 8008d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d6a:	688e      	ldr	r6, [r1, #8]
 8008d6c:	429e      	cmp	r6, r3
 8008d6e:	4682      	mov	sl, r0
 8008d70:	460c      	mov	r4, r1
 8008d72:	4690      	mov	r8, r2
 8008d74:	4699      	mov	r9, r3
 8008d76:	d837      	bhi.n	8008de8 <__ssputs_r+0x82>
 8008d78:	898a      	ldrh	r2, [r1, #12]
 8008d7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d7e:	d031      	beq.n	8008de4 <__ssputs_r+0x7e>
 8008d80:	6825      	ldr	r5, [r4, #0]
 8008d82:	6909      	ldr	r1, [r1, #16]
 8008d84:	1a6f      	subs	r7, r5, r1
 8008d86:	6965      	ldr	r5, [r4, #20]
 8008d88:	2302      	movs	r3, #2
 8008d8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d8e:	fb95 f5f3 	sdiv	r5, r5, r3
 8008d92:	f109 0301 	add.w	r3, r9, #1
 8008d96:	443b      	add	r3, r7
 8008d98:	429d      	cmp	r5, r3
 8008d9a:	bf38      	it	cc
 8008d9c:	461d      	movcc	r5, r3
 8008d9e:	0553      	lsls	r3, r2, #21
 8008da0:	d530      	bpl.n	8008e04 <__ssputs_r+0x9e>
 8008da2:	4629      	mov	r1, r5
 8008da4:	f000 fb22 	bl	80093ec <_malloc_r>
 8008da8:	4606      	mov	r6, r0
 8008daa:	b950      	cbnz	r0, 8008dc2 <__ssputs_r+0x5c>
 8008dac:	230c      	movs	r3, #12
 8008dae:	f8ca 3000 	str.w	r3, [sl]
 8008db2:	89a3      	ldrh	r3, [r4, #12]
 8008db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db8:	81a3      	strh	r3, [r4, #12]
 8008dba:	f04f 30ff 	mov.w	r0, #4294967295
 8008dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc2:	463a      	mov	r2, r7
 8008dc4:	6921      	ldr	r1, [r4, #16]
 8008dc6:	f7ff ff8b 	bl	8008ce0 <memcpy>
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd4:	81a3      	strh	r3, [r4, #12]
 8008dd6:	6126      	str	r6, [r4, #16]
 8008dd8:	6165      	str	r5, [r4, #20]
 8008dda:	443e      	add	r6, r7
 8008ddc:	1bed      	subs	r5, r5, r7
 8008dde:	6026      	str	r6, [r4, #0]
 8008de0:	60a5      	str	r5, [r4, #8]
 8008de2:	464e      	mov	r6, r9
 8008de4:	454e      	cmp	r6, r9
 8008de6:	d900      	bls.n	8008dea <__ssputs_r+0x84>
 8008de8:	464e      	mov	r6, r9
 8008dea:	4632      	mov	r2, r6
 8008dec:	4641      	mov	r1, r8
 8008dee:	6820      	ldr	r0, [r4, #0]
 8008df0:	f000 fa94 	bl	800931c <memmove>
 8008df4:	68a3      	ldr	r3, [r4, #8]
 8008df6:	1b9b      	subs	r3, r3, r6
 8008df8:	60a3      	str	r3, [r4, #8]
 8008dfa:	6823      	ldr	r3, [r4, #0]
 8008dfc:	441e      	add	r6, r3
 8008dfe:	6026      	str	r6, [r4, #0]
 8008e00:	2000      	movs	r0, #0
 8008e02:	e7dc      	b.n	8008dbe <__ssputs_r+0x58>
 8008e04:	462a      	mov	r2, r5
 8008e06:	f000 fb4b 	bl	80094a0 <_realloc_r>
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d1e2      	bne.n	8008dd6 <__ssputs_r+0x70>
 8008e10:	6921      	ldr	r1, [r4, #16]
 8008e12:	4650      	mov	r0, sl
 8008e14:	f000 fa9c 	bl	8009350 <_free_r>
 8008e18:	e7c8      	b.n	8008dac <__ssputs_r+0x46>
	...

08008e1c <_svfiprintf_r>:
 8008e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e20:	461d      	mov	r5, r3
 8008e22:	898b      	ldrh	r3, [r1, #12]
 8008e24:	061f      	lsls	r7, r3, #24
 8008e26:	b09d      	sub	sp, #116	; 0x74
 8008e28:	4680      	mov	r8, r0
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	4616      	mov	r6, r2
 8008e2e:	d50f      	bpl.n	8008e50 <_svfiprintf_r+0x34>
 8008e30:	690b      	ldr	r3, [r1, #16]
 8008e32:	b96b      	cbnz	r3, 8008e50 <_svfiprintf_r+0x34>
 8008e34:	2140      	movs	r1, #64	; 0x40
 8008e36:	f000 fad9 	bl	80093ec <_malloc_r>
 8008e3a:	6020      	str	r0, [r4, #0]
 8008e3c:	6120      	str	r0, [r4, #16]
 8008e3e:	b928      	cbnz	r0, 8008e4c <_svfiprintf_r+0x30>
 8008e40:	230c      	movs	r3, #12
 8008e42:	f8c8 3000 	str.w	r3, [r8]
 8008e46:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4a:	e0c8      	b.n	8008fde <_svfiprintf_r+0x1c2>
 8008e4c:	2340      	movs	r3, #64	; 0x40
 8008e4e:	6163      	str	r3, [r4, #20]
 8008e50:	2300      	movs	r3, #0
 8008e52:	9309      	str	r3, [sp, #36]	; 0x24
 8008e54:	2320      	movs	r3, #32
 8008e56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e5a:	2330      	movs	r3, #48	; 0x30
 8008e5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e60:	9503      	str	r5, [sp, #12]
 8008e62:	f04f 0b01 	mov.w	fp, #1
 8008e66:	4637      	mov	r7, r6
 8008e68:	463d      	mov	r5, r7
 8008e6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008e6e:	b10b      	cbz	r3, 8008e74 <_svfiprintf_r+0x58>
 8008e70:	2b25      	cmp	r3, #37	; 0x25
 8008e72:	d13e      	bne.n	8008ef2 <_svfiprintf_r+0xd6>
 8008e74:	ebb7 0a06 	subs.w	sl, r7, r6
 8008e78:	d00b      	beq.n	8008e92 <_svfiprintf_r+0x76>
 8008e7a:	4653      	mov	r3, sl
 8008e7c:	4632      	mov	r2, r6
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4640      	mov	r0, r8
 8008e82:	f7ff ff70 	bl	8008d66 <__ssputs_r>
 8008e86:	3001      	adds	r0, #1
 8008e88:	f000 80a4 	beq.w	8008fd4 <_svfiprintf_r+0x1b8>
 8008e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8e:	4453      	add	r3, sl
 8008e90:	9309      	str	r3, [sp, #36]	; 0x24
 8008e92:	783b      	ldrb	r3, [r7, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 809d 	beq.w	8008fd4 <_svfiprintf_r+0x1b8>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ea4:	9304      	str	r3, [sp, #16]
 8008ea6:	9307      	str	r3, [sp, #28]
 8008ea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eac:	931a      	str	r3, [sp, #104]	; 0x68
 8008eae:	462f      	mov	r7, r5
 8008eb0:	2205      	movs	r2, #5
 8008eb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008eb6:	4850      	ldr	r0, [pc, #320]	; (8008ff8 <_svfiprintf_r+0x1dc>)
 8008eb8:	f7f7 f992 	bl	80001e0 <memchr>
 8008ebc:	9b04      	ldr	r3, [sp, #16]
 8008ebe:	b9d0      	cbnz	r0, 8008ef6 <_svfiprintf_r+0xda>
 8008ec0:	06d9      	lsls	r1, r3, #27
 8008ec2:	bf44      	itt	mi
 8008ec4:	2220      	movmi	r2, #32
 8008ec6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008eca:	071a      	lsls	r2, r3, #28
 8008ecc:	bf44      	itt	mi
 8008ece:	222b      	movmi	r2, #43	; 0x2b
 8008ed0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ed4:	782a      	ldrb	r2, [r5, #0]
 8008ed6:	2a2a      	cmp	r2, #42	; 0x2a
 8008ed8:	d015      	beq.n	8008f06 <_svfiprintf_r+0xea>
 8008eda:	9a07      	ldr	r2, [sp, #28]
 8008edc:	462f      	mov	r7, r5
 8008ede:	2000      	movs	r0, #0
 8008ee0:	250a      	movs	r5, #10
 8008ee2:	4639      	mov	r1, r7
 8008ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ee8:	3b30      	subs	r3, #48	; 0x30
 8008eea:	2b09      	cmp	r3, #9
 8008eec:	d94d      	bls.n	8008f8a <_svfiprintf_r+0x16e>
 8008eee:	b1b8      	cbz	r0, 8008f20 <_svfiprintf_r+0x104>
 8008ef0:	e00f      	b.n	8008f12 <_svfiprintf_r+0xf6>
 8008ef2:	462f      	mov	r7, r5
 8008ef4:	e7b8      	b.n	8008e68 <_svfiprintf_r+0x4c>
 8008ef6:	4a40      	ldr	r2, [pc, #256]	; (8008ff8 <_svfiprintf_r+0x1dc>)
 8008ef8:	1a80      	subs	r0, r0, r2
 8008efa:	fa0b f000 	lsl.w	r0, fp, r0
 8008efe:	4318      	orrs	r0, r3
 8008f00:	9004      	str	r0, [sp, #16]
 8008f02:	463d      	mov	r5, r7
 8008f04:	e7d3      	b.n	8008eae <_svfiprintf_r+0x92>
 8008f06:	9a03      	ldr	r2, [sp, #12]
 8008f08:	1d11      	adds	r1, r2, #4
 8008f0a:	6812      	ldr	r2, [r2, #0]
 8008f0c:	9103      	str	r1, [sp, #12]
 8008f0e:	2a00      	cmp	r2, #0
 8008f10:	db01      	blt.n	8008f16 <_svfiprintf_r+0xfa>
 8008f12:	9207      	str	r2, [sp, #28]
 8008f14:	e004      	b.n	8008f20 <_svfiprintf_r+0x104>
 8008f16:	4252      	negs	r2, r2
 8008f18:	f043 0302 	orr.w	r3, r3, #2
 8008f1c:	9207      	str	r2, [sp, #28]
 8008f1e:	9304      	str	r3, [sp, #16]
 8008f20:	783b      	ldrb	r3, [r7, #0]
 8008f22:	2b2e      	cmp	r3, #46	; 0x2e
 8008f24:	d10c      	bne.n	8008f40 <_svfiprintf_r+0x124>
 8008f26:	787b      	ldrb	r3, [r7, #1]
 8008f28:	2b2a      	cmp	r3, #42	; 0x2a
 8008f2a:	d133      	bne.n	8008f94 <_svfiprintf_r+0x178>
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	1d1a      	adds	r2, r3, #4
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	9203      	str	r2, [sp, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	bfb8      	it	lt
 8008f38:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f3c:	3702      	adds	r7, #2
 8008f3e:	9305      	str	r3, [sp, #20]
 8008f40:	4d2e      	ldr	r5, [pc, #184]	; (8008ffc <_svfiprintf_r+0x1e0>)
 8008f42:	7839      	ldrb	r1, [r7, #0]
 8008f44:	2203      	movs	r2, #3
 8008f46:	4628      	mov	r0, r5
 8008f48:	f7f7 f94a 	bl	80001e0 <memchr>
 8008f4c:	b138      	cbz	r0, 8008f5e <_svfiprintf_r+0x142>
 8008f4e:	2340      	movs	r3, #64	; 0x40
 8008f50:	1b40      	subs	r0, r0, r5
 8008f52:	fa03 f000 	lsl.w	r0, r3, r0
 8008f56:	9b04      	ldr	r3, [sp, #16]
 8008f58:	4303      	orrs	r3, r0
 8008f5a:	3701      	adds	r7, #1
 8008f5c:	9304      	str	r3, [sp, #16]
 8008f5e:	7839      	ldrb	r1, [r7, #0]
 8008f60:	4827      	ldr	r0, [pc, #156]	; (8009000 <_svfiprintf_r+0x1e4>)
 8008f62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f66:	2206      	movs	r2, #6
 8008f68:	1c7e      	adds	r6, r7, #1
 8008f6a:	f7f7 f939 	bl	80001e0 <memchr>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d038      	beq.n	8008fe4 <_svfiprintf_r+0x1c8>
 8008f72:	4b24      	ldr	r3, [pc, #144]	; (8009004 <_svfiprintf_r+0x1e8>)
 8008f74:	bb13      	cbnz	r3, 8008fbc <_svfiprintf_r+0x1a0>
 8008f76:	9b03      	ldr	r3, [sp, #12]
 8008f78:	3307      	adds	r3, #7
 8008f7a:	f023 0307 	bic.w	r3, r3, #7
 8008f7e:	3308      	adds	r3, #8
 8008f80:	9303      	str	r3, [sp, #12]
 8008f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f84:	444b      	add	r3, r9
 8008f86:	9309      	str	r3, [sp, #36]	; 0x24
 8008f88:	e76d      	b.n	8008e66 <_svfiprintf_r+0x4a>
 8008f8a:	fb05 3202 	mla	r2, r5, r2, r3
 8008f8e:	2001      	movs	r0, #1
 8008f90:	460f      	mov	r7, r1
 8008f92:	e7a6      	b.n	8008ee2 <_svfiprintf_r+0xc6>
 8008f94:	2300      	movs	r3, #0
 8008f96:	3701      	adds	r7, #1
 8008f98:	9305      	str	r3, [sp, #20]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	250a      	movs	r5, #10
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fa4:	3a30      	subs	r2, #48	; 0x30
 8008fa6:	2a09      	cmp	r2, #9
 8008fa8:	d903      	bls.n	8008fb2 <_svfiprintf_r+0x196>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0c8      	beq.n	8008f40 <_svfiprintf_r+0x124>
 8008fae:	9105      	str	r1, [sp, #20]
 8008fb0:	e7c6      	b.n	8008f40 <_svfiprintf_r+0x124>
 8008fb2:	fb05 2101 	mla	r1, r5, r1, r2
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	4607      	mov	r7, r0
 8008fba:	e7f0      	b.n	8008f9e <_svfiprintf_r+0x182>
 8008fbc:	ab03      	add	r3, sp, #12
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	4622      	mov	r2, r4
 8008fc2:	4b11      	ldr	r3, [pc, #68]	; (8009008 <_svfiprintf_r+0x1ec>)
 8008fc4:	a904      	add	r1, sp, #16
 8008fc6:	4640      	mov	r0, r8
 8008fc8:	f3af 8000 	nop.w
 8008fcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008fd0:	4681      	mov	r9, r0
 8008fd2:	d1d6      	bne.n	8008f82 <_svfiprintf_r+0x166>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	065b      	lsls	r3, r3, #25
 8008fd8:	f53f af35 	bmi.w	8008e46 <_svfiprintf_r+0x2a>
 8008fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fde:	b01d      	add	sp, #116	; 0x74
 8008fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe4:	ab03      	add	r3, sp, #12
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	4622      	mov	r2, r4
 8008fea:	4b07      	ldr	r3, [pc, #28]	; (8009008 <_svfiprintf_r+0x1ec>)
 8008fec:	a904      	add	r1, sp, #16
 8008fee:	4640      	mov	r0, r8
 8008ff0:	f000 f882 	bl	80090f8 <_printf_i>
 8008ff4:	e7ea      	b.n	8008fcc <_svfiprintf_r+0x1b0>
 8008ff6:	bf00      	nop
 8008ff8:	080098f4 	.word	0x080098f4
 8008ffc:	080098fa 	.word	0x080098fa
 8009000:	080098fe 	.word	0x080098fe
 8009004:	00000000 	.word	0x00000000
 8009008:	08008d67 	.word	0x08008d67

0800900c <_printf_common>:
 800900c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009010:	4691      	mov	r9, r2
 8009012:	461f      	mov	r7, r3
 8009014:	688a      	ldr	r2, [r1, #8]
 8009016:	690b      	ldr	r3, [r1, #16]
 8009018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800901c:	4293      	cmp	r3, r2
 800901e:	bfb8      	it	lt
 8009020:	4613      	movlt	r3, r2
 8009022:	f8c9 3000 	str.w	r3, [r9]
 8009026:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800902a:	4606      	mov	r6, r0
 800902c:	460c      	mov	r4, r1
 800902e:	b112      	cbz	r2, 8009036 <_printf_common+0x2a>
 8009030:	3301      	adds	r3, #1
 8009032:	f8c9 3000 	str.w	r3, [r9]
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	0699      	lsls	r1, r3, #26
 800903a:	bf42      	ittt	mi
 800903c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009040:	3302      	addmi	r3, #2
 8009042:	f8c9 3000 	strmi.w	r3, [r9]
 8009046:	6825      	ldr	r5, [r4, #0]
 8009048:	f015 0506 	ands.w	r5, r5, #6
 800904c:	d107      	bne.n	800905e <_printf_common+0x52>
 800904e:	f104 0a19 	add.w	sl, r4, #25
 8009052:	68e3      	ldr	r3, [r4, #12]
 8009054:	f8d9 2000 	ldr.w	r2, [r9]
 8009058:	1a9b      	subs	r3, r3, r2
 800905a:	42ab      	cmp	r3, r5
 800905c:	dc28      	bgt.n	80090b0 <_printf_common+0xa4>
 800905e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009062:	6822      	ldr	r2, [r4, #0]
 8009064:	3300      	adds	r3, #0
 8009066:	bf18      	it	ne
 8009068:	2301      	movne	r3, #1
 800906a:	0692      	lsls	r2, r2, #26
 800906c:	d42d      	bmi.n	80090ca <_printf_common+0xbe>
 800906e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009072:	4639      	mov	r1, r7
 8009074:	4630      	mov	r0, r6
 8009076:	47c0      	blx	r8
 8009078:	3001      	adds	r0, #1
 800907a:	d020      	beq.n	80090be <_printf_common+0xb2>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	68e5      	ldr	r5, [r4, #12]
 8009080:	f8d9 2000 	ldr.w	r2, [r9]
 8009084:	f003 0306 	and.w	r3, r3, #6
 8009088:	2b04      	cmp	r3, #4
 800908a:	bf08      	it	eq
 800908c:	1aad      	subeq	r5, r5, r2
 800908e:	68a3      	ldr	r3, [r4, #8]
 8009090:	6922      	ldr	r2, [r4, #16]
 8009092:	bf0c      	ite	eq
 8009094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009098:	2500      	movne	r5, #0
 800909a:	4293      	cmp	r3, r2
 800909c:	bfc4      	itt	gt
 800909e:	1a9b      	subgt	r3, r3, r2
 80090a0:	18ed      	addgt	r5, r5, r3
 80090a2:	f04f 0900 	mov.w	r9, #0
 80090a6:	341a      	adds	r4, #26
 80090a8:	454d      	cmp	r5, r9
 80090aa:	d11a      	bne.n	80090e2 <_printf_common+0xd6>
 80090ac:	2000      	movs	r0, #0
 80090ae:	e008      	b.n	80090c2 <_printf_common+0xb6>
 80090b0:	2301      	movs	r3, #1
 80090b2:	4652      	mov	r2, sl
 80090b4:	4639      	mov	r1, r7
 80090b6:	4630      	mov	r0, r6
 80090b8:	47c0      	blx	r8
 80090ba:	3001      	adds	r0, #1
 80090bc:	d103      	bne.n	80090c6 <_printf_common+0xba>
 80090be:	f04f 30ff 	mov.w	r0, #4294967295
 80090c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c6:	3501      	adds	r5, #1
 80090c8:	e7c3      	b.n	8009052 <_printf_common+0x46>
 80090ca:	18e1      	adds	r1, r4, r3
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	2030      	movs	r0, #48	; 0x30
 80090d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090d4:	4422      	add	r2, r4
 80090d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090de:	3302      	adds	r3, #2
 80090e0:	e7c5      	b.n	800906e <_printf_common+0x62>
 80090e2:	2301      	movs	r3, #1
 80090e4:	4622      	mov	r2, r4
 80090e6:	4639      	mov	r1, r7
 80090e8:	4630      	mov	r0, r6
 80090ea:	47c0      	blx	r8
 80090ec:	3001      	adds	r0, #1
 80090ee:	d0e6      	beq.n	80090be <_printf_common+0xb2>
 80090f0:	f109 0901 	add.w	r9, r9, #1
 80090f4:	e7d8      	b.n	80090a8 <_printf_common+0x9c>
	...

080090f8 <_printf_i>:
 80090f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009100:	460c      	mov	r4, r1
 8009102:	7e09      	ldrb	r1, [r1, #24]
 8009104:	b085      	sub	sp, #20
 8009106:	296e      	cmp	r1, #110	; 0x6e
 8009108:	4617      	mov	r7, r2
 800910a:	4606      	mov	r6, r0
 800910c:	4698      	mov	r8, r3
 800910e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009110:	f000 80b3 	beq.w	800927a <_printf_i+0x182>
 8009114:	d822      	bhi.n	800915c <_printf_i+0x64>
 8009116:	2963      	cmp	r1, #99	; 0x63
 8009118:	d036      	beq.n	8009188 <_printf_i+0x90>
 800911a:	d80a      	bhi.n	8009132 <_printf_i+0x3a>
 800911c:	2900      	cmp	r1, #0
 800911e:	f000 80b9 	beq.w	8009294 <_printf_i+0x19c>
 8009122:	2958      	cmp	r1, #88	; 0x58
 8009124:	f000 8083 	beq.w	800922e <_printf_i+0x136>
 8009128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800912c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009130:	e032      	b.n	8009198 <_printf_i+0xa0>
 8009132:	2964      	cmp	r1, #100	; 0x64
 8009134:	d001      	beq.n	800913a <_printf_i+0x42>
 8009136:	2969      	cmp	r1, #105	; 0x69
 8009138:	d1f6      	bne.n	8009128 <_printf_i+0x30>
 800913a:	6820      	ldr	r0, [r4, #0]
 800913c:	6813      	ldr	r3, [r2, #0]
 800913e:	0605      	lsls	r5, r0, #24
 8009140:	f103 0104 	add.w	r1, r3, #4
 8009144:	d52a      	bpl.n	800919c <_printf_i+0xa4>
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6011      	str	r1, [r2, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	da03      	bge.n	8009156 <_printf_i+0x5e>
 800914e:	222d      	movs	r2, #45	; 0x2d
 8009150:	425b      	negs	r3, r3
 8009152:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009156:	486f      	ldr	r0, [pc, #444]	; (8009314 <_printf_i+0x21c>)
 8009158:	220a      	movs	r2, #10
 800915a:	e039      	b.n	80091d0 <_printf_i+0xd8>
 800915c:	2973      	cmp	r1, #115	; 0x73
 800915e:	f000 809d 	beq.w	800929c <_printf_i+0x1a4>
 8009162:	d808      	bhi.n	8009176 <_printf_i+0x7e>
 8009164:	296f      	cmp	r1, #111	; 0x6f
 8009166:	d020      	beq.n	80091aa <_printf_i+0xb2>
 8009168:	2970      	cmp	r1, #112	; 0x70
 800916a:	d1dd      	bne.n	8009128 <_printf_i+0x30>
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	f043 0320 	orr.w	r3, r3, #32
 8009172:	6023      	str	r3, [r4, #0]
 8009174:	e003      	b.n	800917e <_printf_i+0x86>
 8009176:	2975      	cmp	r1, #117	; 0x75
 8009178:	d017      	beq.n	80091aa <_printf_i+0xb2>
 800917a:	2978      	cmp	r1, #120	; 0x78
 800917c:	d1d4      	bne.n	8009128 <_printf_i+0x30>
 800917e:	2378      	movs	r3, #120	; 0x78
 8009180:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009184:	4864      	ldr	r0, [pc, #400]	; (8009318 <_printf_i+0x220>)
 8009186:	e055      	b.n	8009234 <_printf_i+0x13c>
 8009188:	6813      	ldr	r3, [r2, #0]
 800918a:	1d19      	adds	r1, r3, #4
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6011      	str	r1, [r2, #0]
 8009190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009198:	2301      	movs	r3, #1
 800919a:	e08c      	b.n	80092b6 <_printf_i+0x1be>
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6011      	str	r1, [r2, #0]
 80091a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80091a4:	bf18      	it	ne
 80091a6:	b21b      	sxthne	r3, r3
 80091a8:	e7cf      	b.n	800914a <_printf_i+0x52>
 80091aa:	6813      	ldr	r3, [r2, #0]
 80091ac:	6825      	ldr	r5, [r4, #0]
 80091ae:	1d18      	adds	r0, r3, #4
 80091b0:	6010      	str	r0, [r2, #0]
 80091b2:	0628      	lsls	r0, r5, #24
 80091b4:	d501      	bpl.n	80091ba <_printf_i+0xc2>
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	e002      	b.n	80091c0 <_printf_i+0xc8>
 80091ba:	0668      	lsls	r0, r5, #25
 80091bc:	d5fb      	bpl.n	80091b6 <_printf_i+0xbe>
 80091be:	881b      	ldrh	r3, [r3, #0]
 80091c0:	4854      	ldr	r0, [pc, #336]	; (8009314 <_printf_i+0x21c>)
 80091c2:	296f      	cmp	r1, #111	; 0x6f
 80091c4:	bf14      	ite	ne
 80091c6:	220a      	movne	r2, #10
 80091c8:	2208      	moveq	r2, #8
 80091ca:	2100      	movs	r1, #0
 80091cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091d0:	6865      	ldr	r5, [r4, #4]
 80091d2:	60a5      	str	r5, [r4, #8]
 80091d4:	2d00      	cmp	r5, #0
 80091d6:	f2c0 8095 	blt.w	8009304 <_printf_i+0x20c>
 80091da:	6821      	ldr	r1, [r4, #0]
 80091dc:	f021 0104 	bic.w	r1, r1, #4
 80091e0:	6021      	str	r1, [r4, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d13d      	bne.n	8009262 <_printf_i+0x16a>
 80091e6:	2d00      	cmp	r5, #0
 80091e8:	f040 808e 	bne.w	8009308 <_printf_i+0x210>
 80091ec:	4665      	mov	r5, ip
 80091ee:	2a08      	cmp	r2, #8
 80091f0:	d10b      	bne.n	800920a <_printf_i+0x112>
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	07db      	lsls	r3, r3, #31
 80091f6:	d508      	bpl.n	800920a <_printf_i+0x112>
 80091f8:	6923      	ldr	r3, [r4, #16]
 80091fa:	6862      	ldr	r2, [r4, #4]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	bfde      	ittt	le
 8009200:	2330      	movle	r3, #48	; 0x30
 8009202:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009206:	f105 35ff 	addle.w	r5, r5, #4294967295
 800920a:	ebac 0305 	sub.w	r3, ip, r5
 800920e:	6123      	str	r3, [r4, #16]
 8009210:	f8cd 8000 	str.w	r8, [sp]
 8009214:	463b      	mov	r3, r7
 8009216:	aa03      	add	r2, sp, #12
 8009218:	4621      	mov	r1, r4
 800921a:	4630      	mov	r0, r6
 800921c:	f7ff fef6 	bl	800900c <_printf_common>
 8009220:	3001      	adds	r0, #1
 8009222:	d14d      	bne.n	80092c0 <_printf_i+0x1c8>
 8009224:	f04f 30ff 	mov.w	r0, #4294967295
 8009228:	b005      	add	sp, #20
 800922a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800922e:	4839      	ldr	r0, [pc, #228]	; (8009314 <_printf_i+0x21c>)
 8009230:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009234:	6813      	ldr	r3, [r2, #0]
 8009236:	6821      	ldr	r1, [r4, #0]
 8009238:	1d1d      	adds	r5, r3, #4
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6015      	str	r5, [r2, #0]
 800923e:	060a      	lsls	r2, r1, #24
 8009240:	d50b      	bpl.n	800925a <_printf_i+0x162>
 8009242:	07ca      	lsls	r2, r1, #31
 8009244:	bf44      	itt	mi
 8009246:	f041 0120 	orrmi.w	r1, r1, #32
 800924a:	6021      	strmi	r1, [r4, #0]
 800924c:	b91b      	cbnz	r3, 8009256 <_printf_i+0x15e>
 800924e:	6822      	ldr	r2, [r4, #0]
 8009250:	f022 0220 	bic.w	r2, r2, #32
 8009254:	6022      	str	r2, [r4, #0]
 8009256:	2210      	movs	r2, #16
 8009258:	e7b7      	b.n	80091ca <_printf_i+0xd2>
 800925a:	064d      	lsls	r5, r1, #25
 800925c:	bf48      	it	mi
 800925e:	b29b      	uxthmi	r3, r3
 8009260:	e7ef      	b.n	8009242 <_printf_i+0x14a>
 8009262:	4665      	mov	r5, ip
 8009264:	fbb3 f1f2 	udiv	r1, r3, r2
 8009268:	fb02 3311 	mls	r3, r2, r1, r3
 800926c:	5cc3      	ldrb	r3, [r0, r3]
 800926e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009272:	460b      	mov	r3, r1
 8009274:	2900      	cmp	r1, #0
 8009276:	d1f5      	bne.n	8009264 <_printf_i+0x16c>
 8009278:	e7b9      	b.n	80091ee <_printf_i+0xf6>
 800927a:	6813      	ldr	r3, [r2, #0]
 800927c:	6825      	ldr	r5, [r4, #0]
 800927e:	6961      	ldr	r1, [r4, #20]
 8009280:	1d18      	adds	r0, r3, #4
 8009282:	6010      	str	r0, [r2, #0]
 8009284:	0628      	lsls	r0, r5, #24
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	d501      	bpl.n	800928e <_printf_i+0x196>
 800928a:	6019      	str	r1, [r3, #0]
 800928c:	e002      	b.n	8009294 <_printf_i+0x19c>
 800928e:	066a      	lsls	r2, r5, #25
 8009290:	d5fb      	bpl.n	800928a <_printf_i+0x192>
 8009292:	8019      	strh	r1, [r3, #0]
 8009294:	2300      	movs	r3, #0
 8009296:	6123      	str	r3, [r4, #16]
 8009298:	4665      	mov	r5, ip
 800929a:	e7b9      	b.n	8009210 <_printf_i+0x118>
 800929c:	6813      	ldr	r3, [r2, #0]
 800929e:	1d19      	adds	r1, r3, #4
 80092a0:	6011      	str	r1, [r2, #0]
 80092a2:	681d      	ldr	r5, [r3, #0]
 80092a4:	6862      	ldr	r2, [r4, #4]
 80092a6:	2100      	movs	r1, #0
 80092a8:	4628      	mov	r0, r5
 80092aa:	f7f6 ff99 	bl	80001e0 <memchr>
 80092ae:	b108      	cbz	r0, 80092b4 <_printf_i+0x1bc>
 80092b0:	1b40      	subs	r0, r0, r5
 80092b2:	6060      	str	r0, [r4, #4]
 80092b4:	6863      	ldr	r3, [r4, #4]
 80092b6:	6123      	str	r3, [r4, #16]
 80092b8:	2300      	movs	r3, #0
 80092ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092be:	e7a7      	b.n	8009210 <_printf_i+0x118>
 80092c0:	6923      	ldr	r3, [r4, #16]
 80092c2:	462a      	mov	r2, r5
 80092c4:	4639      	mov	r1, r7
 80092c6:	4630      	mov	r0, r6
 80092c8:	47c0      	blx	r8
 80092ca:	3001      	adds	r0, #1
 80092cc:	d0aa      	beq.n	8009224 <_printf_i+0x12c>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	079b      	lsls	r3, r3, #30
 80092d2:	d413      	bmi.n	80092fc <_printf_i+0x204>
 80092d4:	68e0      	ldr	r0, [r4, #12]
 80092d6:	9b03      	ldr	r3, [sp, #12]
 80092d8:	4298      	cmp	r0, r3
 80092da:	bfb8      	it	lt
 80092dc:	4618      	movlt	r0, r3
 80092de:	e7a3      	b.n	8009228 <_printf_i+0x130>
 80092e0:	2301      	movs	r3, #1
 80092e2:	464a      	mov	r2, r9
 80092e4:	4639      	mov	r1, r7
 80092e6:	4630      	mov	r0, r6
 80092e8:	47c0      	blx	r8
 80092ea:	3001      	adds	r0, #1
 80092ec:	d09a      	beq.n	8009224 <_printf_i+0x12c>
 80092ee:	3501      	adds	r5, #1
 80092f0:	68e3      	ldr	r3, [r4, #12]
 80092f2:	9a03      	ldr	r2, [sp, #12]
 80092f4:	1a9b      	subs	r3, r3, r2
 80092f6:	42ab      	cmp	r3, r5
 80092f8:	dcf2      	bgt.n	80092e0 <_printf_i+0x1e8>
 80092fa:	e7eb      	b.n	80092d4 <_printf_i+0x1dc>
 80092fc:	2500      	movs	r5, #0
 80092fe:	f104 0919 	add.w	r9, r4, #25
 8009302:	e7f5      	b.n	80092f0 <_printf_i+0x1f8>
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1ac      	bne.n	8009262 <_printf_i+0x16a>
 8009308:	7803      	ldrb	r3, [r0, #0]
 800930a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800930e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009312:	e76c      	b.n	80091ee <_printf_i+0xf6>
 8009314:	08009905 	.word	0x08009905
 8009318:	08009916 	.word	0x08009916

0800931c <memmove>:
 800931c:	4288      	cmp	r0, r1
 800931e:	b510      	push	{r4, lr}
 8009320:	eb01 0302 	add.w	r3, r1, r2
 8009324:	d807      	bhi.n	8009336 <memmove+0x1a>
 8009326:	1e42      	subs	r2, r0, #1
 8009328:	4299      	cmp	r1, r3
 800932a:	d00a      	beq.n	8009342 <memmove+0x26>
 800932c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009330:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009334:	e7f8      	b.n	8009328 <memmove+0xc>
 8009336:	4283      	cmp	r3, r0
 8009338:	d9f5      	bls.n	8009326 <memmove+0xa>
 800933a:	1881      	adds	r1, r0, r2
 800933c:	1ad2      	subs	r2, r2, r3
 800933e:	42d3      	cmn	r3, r2
 8009340:	d100      	bne.n	8009344 <memmove+0x28>
 8009342:	bd10      	pop	{r4, pc}
 8009344:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009348:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800934c:	e7f7      	b.n	800933e <memmove+0x22>
	...

08009350 <_free_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4605      	mov	r5, r0
 8009354:	2900      	cmp	r1, #0
 8009356:	d045      	beq.n	80093e4 <_free_r+0x94>
 8009358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800935c:	1f0c      	subs	r4, r1, #4
 800935e:	2b00      	cmp	r3, #0
 8009360:	bfb8      	it	lt
 8009362:	18e4      	addlt	r4, r4, r3
 8009364:	f000 f8d2 	bl	800950c <__malloc_lock>
 8009368:	4a1f      	ldr	r2, [pc, #124]	; (80093e8 <_free_r+0x98>)
 800936a:	6813      	ldr	r3, [r2, #0]
 800936c:	4610      	mov	r0, r2
 800936e:	b933      	cbnz	r3, 800937e <_free_r+0x2e>
 8009370:	6063      	str	r3, [r4, #4]
 8009372:	6014      	str	r4, [r2, #0]
 8009374:	4628      	mov	r0, r5
 8009376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800937a:	f000 b8c8 	b.w	800950e <__malloc_unlock>
 800937e:	42a3      	cmp	r3, r4
 8009380:	d90c      	bls.n	800939c <_free_r+0x4c>
 8009382:	6821      	ldr	r1, [r4, #0]
 8009384:	1862      	adds	r2, r4, r1
 8009386:	4293      	cmp	r3, r2
 8009388:	bf04      	itt	eq
 800938a:	681a      	ldreq	r2, [r3, #0]
 800938c:	685b      	ldreq	r3, [r3, #4]
 800938e:	6063      	str	r3, [r4, #4]
 8009390:	bf04      	itt	eq
 8009392:	1852      	addeq	r2, r2, r1
 8009394:	6022      	streq	r2, [r4, #0]
 8009396:	6004      	str	r4, [r0, #0]
 8009398:	e7ec      	b.n	8009374 <_free_r+0x24>
 800939a:	4613      	mov	r3, r2
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	b10a      	cbz	r2, 80093a4 <_free_r+0x54>
 80093a0:	42a2      	cmp	r2, r4
 80093a2:	d9fa      	bls.n	800939a <_free_r+0x4a>
 80093a4:	6819      	ldr	r1, [r3, #0]
 80093a6:	1858      	adds	r0, r3, r1
 80093a8:	42a0      	cmp	r0, r4
 80093aa:	d10b      	bne.n	80093c4 <_free_r+0x74>
 80093ac:	6820      	ldr	r0, [r4, #0]
 80093ae:	4401      	add	r1, r0
 80093b0:	1858      	adds	r0, r3, r1
 80093b2:	4282      	cmp	r2, r0
 80093b4:	6019      	str	r1, [r3, #0]
 80093b6:	d1dd      	bne.n	8009374 <_free_r+0x24>
 80093b8:	6810      	ldr	r0, [r2, #0]
 80093ba:	6852      	ldr	r2, [r2, #4]
 80093bc:	605a      	str	r2, [r3, #4]
 80093be:	4401      	add	r1, r0
 80093c0:	6019      	str	r1, [r3, #0]
 80093c2:	e7d7      	b.n	8009374 <_free_r+0x24>
 80093c4:	d902      	bls.n	80093cc <_free_r+0x7c>
 80093c6:	230c      	movs	r3, #12
 80093c8:	602b      	str	r3, [r5, #0]
 80093ca:	e7d3      	b.n	8009374 <_free_r+0x24>
 80093cc:	6820      	ldr	r0, [r4, #0]
 80093ce:	1821      	adds	r1, r4, r0
 80093d0:	428a      	cmp	r2, r1
 80093d2:	bf04      	itt	eq
 80093d4:	6811      	ldreq	r1, [r2, #0]
 80093d6:	6852      	ldreq	r2, [r2, #4]
 80093d8:	6062      	str	r2, [r4, #4]
 80093da:	bf04      	itt	eq
 80093dc:	1809      	addeq	r1, r1, r0
 80093de:	6021      	streq	r1, [r4, #0]
 80093e0:	605c      	str	r4, [r3, #4]
 80093e2:	e7c7      	b.n	8009374 <_free_r+0x24>
 80093e4:	bd38      	pop	{r3, r4, r5, pc}
 80093e6:	bf00      	nop
 80093e8:	20001a1c 	.word	0x20001a1c

080093ec <_malloc_r>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	1ccd      	adds	r5, r1, #3
 80093f0:	f025 0503 	bic.w	r5, r5, #3
 80093f4:	3508      	adds	r5, #8
 80093f6:	2d0c      	cmp	r5, #12
 80093f8:	bf38      	it	cc
 80093fa:	250c      	movcc	r5, #12
 80093fc:	2d00      	cmp	r5, #0
 80093fe:	4606      	mov	r6, r0
 8009400:	db01      	blt.n	8009406 <_malloc_r+0x1a>
 8009402:	42a9      	cmp	r1, r5
 8009404:	d903      	bls.n	800940e <_malloc_r+0x22>
 8009406:	230c      	movs	r3, #12
 8009408:	6033      	str	r3, [r6, #0]
 800940a:	2000      	movs	r0, #0
 800940c:	bd70      	pop	{r4, r5, r6, pc}
 800940e:	f000 f87d 	bl	800950c <__malloc_lock>
 8009412:	4a21      	ldr	r2, [pc, #132]	; (8009498 <_malloc_r+0xac>)
 8009414:	6814      	ldr	r4, [r2, #0]
 8009416:	4621      	mov	r1, r4
 8009418:	b991      	cbnz	r1, 8009440 <_malloc_r+0x54>
 800941a:	4c20      	ldr	r4, [pc, #128]	; (800949c <_malloc_r+0xb0>)
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	b91b      	cbnz	r3, 8009428 <_malloc_r+0x3c>
 8009420:	4630      	mov	r0, r6
 8009422:	f000 f863 	bl	80094ec <_sbrk_r>
 8009426:	6020      	str	r0, [r4, #0]
 8009428:	4629      	mov	r1, r5
 800942a:	4630      	mov	r0, r6
 800942c:	f000 f85e 	bl	80094ec <_sbrk_r>
 8009430:	1c43      	adds	r3, r0, #1
 8009432:	d124      	bne.n	800947e <_malloc_r+0x92>
 8009434:	230c      	movs	r3, #12
 8009436:	6033      	str	r3, [r6, #0]
 8009438:	4630      	mov	r0, r6
 800943a:	f000 f868 	bl	800950e <__malloc_unlock>
 800943e:	e7e4      	b.n	800940a <_malloc_r+0x1e>
 8009440:	680b      	ldr	r3, [r1, #0]
 8009442:	1b5b      	subs	r3, r3, r5
 8009444:	d418      	bmi.n	8009478 <_malloc_r+0x8c>
 8009446:	2b0b      	cmp	r3, #11
 8009448:	d90f      	bls.n	800946a <_malloc_r+0x7e>
 800944a:	600b      	str	r3, [r1, #0]
 800944c:	50cd      	str	r5, [r1, r3]
 800944e:	18cc      	adds	r4, r1, r3
 8009450:	4630      	mov	r0, r6
 8009452:	f000 f85c 	bl	800950e <__malloc_unlock>
 8009456:	f104 000b 	add.w	r0, r4, #11
 800945a:	1d23      	adds	r3, r4, #4
 800945c:	f020 0007 	bic.w	r0, r0, #7
 8009460:	1ac3      	subs	r3, r0, r3
 8009462:	d0d3      	beq.n	800940c <_malloc_r+0x20>
 8009464:	425a      	negs	r2, r3
 8009466:	50e2      	str	r2, [r4, r3]
 8009468:	e7d0      	b.n	800940c <_malloc_r+0x20>
 800946a:	428c      	cmp	r4, r1
 800946c:	684b      	ldr	r3, [r1, #4]
 800946e:	bf16      	itet	ne
 8009470:	6063      	strne	r3, [r4, #4]
 8009472:	6013      	streq	r3, [r2, #0]
 8009474:	460c      	movne	r4, r1
 8009476:	e7eb      	b.n	8009450 <_malloc_r+0x64>
 8009478:	460c      	mov	r4, r1
 800947a:	6849      	ldr	r1, [r1, #4]
 800947c:	e7cc      	b.n	8009418 <_malloc_r+0x2c>
 800947e:	1cc4      	adds	r4, r0, #3
 8009480:	f024 0403 	bic.w	r4, r4, #3
 8009484:	42a0      	cmp	r0, r4
 8009486:	d005      	beq.n	8009494 <_malloc_r+0xa8>
 8009488:	1a21      	subs	r1, r4, r0
 800948a:	4630      	mov	r0, r6
 800948c:	f000 f82e 	bl	80094ec <_sbrk_r>
 8009490:	3001      	adds	r0, #1
 8009492:	d0cf      	beq.n	8009434 <_malloc_r+0x48>
 8009494:	6025      	str	r5, [r4, #0]
 8009496:	e7db      	b.n	8009450 <_malloc_r+0x64>
 8009498:	20001a1c 	.word	0x20001a1c
 800949c:	20001a20 	.word	0x20001a20

080094a0 <_realloc_r>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	4607      	mov	r7, r0
 80094a4:	4614      	mov	r4, r2
 80094a6:	460e      	mov	r6, r1
 80094a8:	b921      	cbnz	r1, 80094b4 <_realloc_r+0x14>
 80094aa:	4611      	mov	r1, r2
 80094ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094b0:	f7ff bf9c 	b.w	80093ec <_malloc_r>
 80094b4:	b922      	cbnz	r2, 80094c0 <_realloc_r+0x20>
 80094b6:	f7ff ff4b 	bl	8009350 <_free_r>
 80094ba:	4625      	mov	r5, r4
 80094bc:	4628      	mov	r0, r5
 80094be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c0:	f000 f826 	bl	8009510 <_malloc_usable_size_r>
 80094c4:	42a0      	cmp	r0, r4
 80094c6:	d20f      	bcs.n	80094e8 <_realloc_r+0x48>
 80094c8:	4621      	mov	r1, r4
 80094ca:	4638      	mov	r0, r7
 80094cc:	f7ff ff8e 	bl	80093ec <_malloc_r>
 80094d0:	4605      	mov	r5, r0
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d0f2      	beq.n	80094bc <_realloc_r+0x1c>
 80094d6:	4631      	mov	r1, r6
 80094d8:	4622      	mov	r2, r4
 80094da:	f7ff fc01 	bl	8008ce0 <memcpy>
 80094de:	4631      	mov	r1, r6
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7ff ff35 	bl	8009350 <_free_r>
 80094e6:	e7e9      	b.n	80094bc <_realloc_r+0x1c>
 80094e8:	4635      	mov	r5, r6
 80094ea:	e7e7      	b.n	80094bc <_realloc_r+0x1c>

080094ec <_sbrk_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4c06      	ldr	r4, [pc, #24]	; (8009508 <_sbrk_r+0x1c>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4605      	mov	r5, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	6023      	str	r3, [r4, #0]
 80094f8:	f7f9 fb88 	bl	8002c0c <_sbrk>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d102      	bne.n	8009506 <_sbrk_r+0x1a>
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	b103      	cbz	r3, 8009506 <_sbrk_r+0x1a>
 8009504:	602b      	str	r3, [r5, #0]
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	20001d5c 	.word	0x20001d5c

0800950c <__malloc_lock>:
 800950c:	4770      	bx	lr

0800950e <__malloc_unlock>:
 800950e:	4770      	bx	lr

08009510 <_malloc_usable_size_r>:
 8009510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009514:	1f18      	subs	r0, r3, #4
 8009516:	2b00      	cmp	r3, #0
 8009518:	bfbc      	itt	lt
 800951a:	580b      	ldrlt	r3, [r1, r0]
 800951c:	18c0      	addlt	r0, r0, r3
 800951e:	4770      	bx	lr

08009520 <sqrt>:
 8009520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009524:	ed2d 8b02 	vpush	{d8}
 8009528:	b08b      	sub	sp, #44	; 0x2c
 800952a:	ec55 4b10 	vmov	r4, r5, d0
 800952e:	f000 f851 	bl	80095d4 <__ieee754_sqrt>
 8009532:	4b26      	ldr	r3, [pc, #152]	; (80095cc <sqrt+0xac>)
 8009534:	eeb0 8a40 	vmov.f32	s16, s0
 8009538:	eef0 8a60 	vmov.f32	s17, s1
 800953c:	f993 6000 	ldrsb.w	r6, [r3]
 8009540:	1c73      	adds	r3, r6, #1
 8009542:	d02a      	beq.n	800959a <sqrt+0x7a>
 8009544:	4622      	mov	r2, r4
 8009546:	462b      	mov	r3, r5
 8009548:	4620      	mov	r0, r4
 800954a:	4629      	mov	r1, r5
 800954c:	f7f7 faee 	bl	8000b2c <__aeabi_dcmpun>
 8009550:	4607      	mov	r7, r0
 8009552:	bb10      	cbnz	r0, 800959a <sqrt+0x7a>
 8009554:	f04f 0800 	mov.w	r8, #0
 8009558:	f04f 0900 	mov.w	r9, #0
 800955c:	4642      	mov	r2, r8
 800955e:	464b      	mov	r3, r9
 8009560:	4620      	mov	r0, r4
 8009562:	4629      	mov	r1, r5
 8009564:	f7f7 faba 	bl	8000adc <__aeabi_dcmplt>
 8009568:	b1b8      	cbz	r0, 800959a <sqrt+0x7a>
 800956a:	2301      	movs	r3, #1
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	4b18      	ldr	r3, [pc, #96]	; (80095d0 <sqrt+0xb0>)
 8009570:	9301      	str	r3, [sp, #4]
 8009572:	9708      	str	r7, [sp, #32]
 8009574:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009578:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800957c:	b9b6      	cbnz	r6, 80095ac <sqrt+0x8c>
 800957e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009582:	4668      	mov	r0, sp
 8009584:	f000 f8d6 	bl	8009734 <matherr>
 8009588:	b1d0      	cbz	r0, 80095c0 <sqrt+0xa0>
 800958a:	9b08      	ldr	r3, [sp, #32]
 800958c:	b11b      	cbz	r3, 8009596 <sqrt+0x76>
 800958e:	f7ff fb7d 	bl	8008c8c <__errno>
 8009592:	9b08      	ldr	r3, [sp, #32]
 8009594:	6003      	str	r3, [r0, #0]
 8009596:	ed9d 8b06 	vldr	d8, [sp, #24]
 800959a:	eeb0 0a48 	vmov.f32	s0, s16
 800959e:	eef0 0a68 	vmov.f32	s1, s17
 80095a2:	b00b      	add	sp, #44	; 0x2c
 80095a4:	ecbd 8b02 	vpop	{d8}
 80095a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095ac:	4642      	mov	r2, r8
 80095ae:	464b      	mov	r3, r9
 80095b0:	4640      	mov	r0, r8
 80095b2:	4649      	mov	r1, r9
 80095b4:	f7f7 f94a 	bl	800084c <__aeabi_ddiv>
 80095b8:	2e02      	cmp	r6, #2
 80095ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80095be:	d1e0      	bne.n	8009582 <sqrt+0x62>
 80095c0:	f7ff fb64 	bl	8008c8c <__errno>
 80095c4:	2321      	movs	r3, #33	; 0x21
 80095c6:	6003      	str	r3, [r0, #0]
 80095c8:	e7df      	b.n	800958a <sqrt+0x6a>
 80095ca:	bf00      	nop
 80095cc:	200000b4 	.word	0x200000b4
 80095d0:	08009927 	.word	0x08009927

080095d4 <__ieee754_sqrt>:
 80095d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d8:	4955      	ldr	r1, [pc, #340]	; (8009730 <__ieee754_sqrt+0x15c>)
 80095da:	ec55 4b10 	vmov	r4, r5, d0
 80095de:	43a9      	bics	r1, r5
 80095e0:	462b      	mov	r3, r5
 80095e2:	462a      	mov	r2, r5
 80095e4:	d112      	bne.n	800960c <__ieee754_sqrt+0x38>
 80095e6:	ee10 2a10 	vmov	r2, s0
 80095ea:	ee10 0a10 	vmov	r0, s0
 80095ee:	4629      	mov	r1, r5
 80095f0:	f7f7 f802 	bl	80005f8 <__aeabi_dmul>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	4620      	mov	r0, r4
 80095fa:	4629      	mov	r1, r5
 80095fc:	f7f6 fe46 	bl	800028c <__adddf3>
 8009600:	4604      	mov	r4, r0
 8009602:	460d      	mov	r5, r1
 8009604:	ec45 4b10 	vmov	d0, r4, r5
 8009608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800960c:	2d00      	cmp	r5, #0
 800960e:	ee10 0a10 	vmov	r0, s0
 8009612:	4621      	mov	r1, r4
 8009614:	dc0f      	bgt.n	8009636 <__ieee754_sqrt+0x62>
 8009616:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800961a:	4330      	orrs	r0, r6
 800961c:	d0f2      	beq.n	8009604 <__ieee754_sqrt+0x30>
 800961e:	b155      	cbz	r5, 8009636 <__ieee754_sqrt+0x62>
 8009620:	ee10 2a10 	vmov	r2, s0
 8009624:	4620      	mov	r0, r4
 8009626:	4629      	mov	r1, r5
 8009628:	f7f6 fe2e 	bl	8000288 <__aeabi_dsub>
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	f7f7 f90c 	bl	800084c <__aeabi_ddiv>
 8009634:	e7e4      	b.n	8009600 <__ieee754_sqrt+0x2c>
 8009636:	151b      	asrs	r3, r3, #20
 8009638:	d073      	beq.n	8009722 <__ieee754_sqrt+0x14e>
 800963a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800963e:	07dd      	lsls	r5, r3, #31
 8009640:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009644:	bf48      	it	mi
 8009646:	0fc8      	lsrmi	r0, r1, #31
 8009648:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800964c:	bf44      	itt	mi
 800964e:	0049      	lslmi	r1, r1, #1
 8009650:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009654:	2500      	movs	r5, #0
 8009656:	1058      	asrs	r0, r3, #1
 8009658:	0fcb      	lsrs	r3, r1, #31
 800965a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800965e:	0049      	lsls	r1, r1, #1
 8009660:	2316      	movs	r3, #22
 8009662:	462c      	mov	r4, r5
 8009664:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009668:	19a7      	adds	r7, r4, r6
 800966a:	4297      	cmp	r7, r2
 800966c:	bfde      	ittt	le
 800966e:	19bc      	addle	r4, r7, r6
 8009670:	1bd2      	suble	r2, r2, r7
 8009672:	19ad      	addle	r5, r5, r6
 8009674:	0fcf      	lsrs	r7, r1, #31
 8009676:	3b01      	subs	r3, #1
 8009678:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800967c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009680:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009684:	d1f0      	bne.n	8009668 <__ieee754_sqrt+0x94>
 8009686:	f04f 0c20 	mov.w	ip, #32
 800968a:	469e      	mov	lr, r3
 800968c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009690:	42a2      	cmp	r2, r4
 8009692:	eb06 070e 	add.w	r7, r6, lr
 8009696:	dc02      	bgt.n	800969e <__ieee754_sqrt+0xca>
 8009698:	d112      	bne.n	80096c0 <__ieee754_sqrt+0xec>
 800969a:	428f      	cmp	r7, r1
 800969c:	d810      	bhi.n	80096c0 <__ieee754_sqrt+0xec>
 800969e:	2f00      	cmp	r7, #0
 80096a0:	eb07 0e06 	add.w	lr, r7, r6
 80096a4:	da42      	bge.n	800972c <__ieee754_sqrt+0x158>
 80096a6:	f1be 0f00 	cmp.w	lr, #0
 80096aa:	db3f      	blt.n	800972c <__ieee754_sqrt+0x158>
 80096ac:	f104 0801 	add.w	r8, r4, #1
 80096b0:	1b12      	subs	r2, r2, r4
 80096b2:	428f      	cmp	r7, r1
 80096b4:	bf88      	it	hi
 80096b6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80096ba:	1bc9      	subs	r1, r1, r7
 80096bc:	4433      	add	r3, r6
 80096be:	4644      	mov	r4, r8
 80096c0:	0052      	lsls	r2, r2, #1
 80096c2:	f1bc 0c01 	subs.w	ip, ip, #1
 80096c6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80096ca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80096ce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80096d2:	d1dd      	bne.n	8009690 <__ieee754_sqrt+0xbc>
 80096d4:	430a      	orrs	r2, r1
 80096d6:	d006      	beq.n	80096e6 <__ieee754_sqrt+0x112>
 80096d8:	1c5c      	adds	r4, r3, #1
 80096da:	bf13      	iteet	ne
 80096dc:	3301      	addne	r3, #1
 80096de:	3501      	addeq	r5, #1
 80096e0:	4663      	moveq	r3, ip
 80096e2:	f023 0301 	bicne.w	r3, r3, #1
 80096e6:	106a      	asrs	r2, r5, #1
 80096e8:	085b      	lsrs	r3, r3, #1
 80096ea:	07e9      	lsls	r1, r5, #31
 80096ec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80096f0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80096f4:	bf48      	it	mi
 80096f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80096fa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80096fe:	461c      	mov	r4, r3
 8009700:	e780      	b.n	8009604 <__ieee754_sqrt+0x30>
 8009702:	0aca      	lsrs	r2, r1, #11
 8009704:	3815      	subs	r0, #21
 8009706:	0549      	lsls	r1, r1, #21
 8009708:	2a00      	cmp	r2, #0
 800970a:	d0fa      	beq.n	8009702 <__ieee754_sqrt+0x12e>
 800970c:	02d6      	lsls	r6, r2, #11
 800970e:	d50a      	bpl.n	8009726 <__ieee754_sqrt+0x152>
 8009710:	f1c3 0420 	rsb	r4, r3, #32
 8009714:	fa21 f404 	lsr.w	r4, r1, r4
 8009718:	1e5d      	subs	r5, r3, #1
 800971a:	4099      	lsls	r1, r3
 800971c:	4322      	orrs	r2, r4
 800971e:	1b43      	subs	r3, r0, r5
 8009720:	e78b      	b.n	800963a <__ieee754_sqrt+0x66>
 8009722:	4618      	mov	r0, r3
 8009724:	e7f0      	b.n	8009708 <__ieee754_sqrt+0x134>
 8009726:	0052      	lsls	r2, r2, #1
 8009728:	3301      	adds	r3, #1
 800972a:	e7ef      	b.n	800970c <__ieee754_sqrt+0x138>
 800972c:	46a0      	mov	r8, r4
 800972e:	e7bf      	b.n	80096b0 <__ieee754_sqrt+0xdc>
 8009730:	7ff00000 	.word	0x7ff00000

08009734 <matherr>:
 8009734:	2000      	movs	r0, #0
 8009736:	4770      	bx	lr

08009738 <_init>:
 8009738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973a:	bf00      	nop
 800973c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973e:	bc08      	pop	{r3}
 8009740:	469e      	mov	lr, r3
 8009742:	4770      	bx	lr

08009744 <_fini>:
 8009744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009746:	bf00      	nop
 8009748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974a:	bc08      	pop	{r3}
 800974c:	469e      	mov	lr, r3
 800974e:	4770      	bx	lr
