
ProjectGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008108  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08008298  08008298  00018298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008430  08008430  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008430  08008430  00018430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008438  08008438  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008438  08008438  00018438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800843c  0800843c  0001843c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08008440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c50  200000a8  080084e8  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cf8  080084e8  00021cf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002484a  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000414a  00000000  00000000  00044922  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e70  00000000  00000000  00048a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c88  00000000  00000000  0004a8e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a909  00000000  00000000  0004c568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017581  00000000  00000000  00076e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010582c  00000000  00000000  0008e3f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00193c1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083b8  00000000  00000000  00193c9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008280 	.word	0x08008280

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08008280 	.word	0x08008280

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800058a:	2300      	movs	r3, #0
 800058c:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800058e:	f000 faa9 	bl	8000ae4 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000598:	f107 030f 	add.w	r3, r7, #15
 800059c:	2201      	movs	r2, #1
 800059e:	2120      	movs	r1, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fb3f 	bl	8000c24 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	0a1b      	lsrs	r3, r3, #8
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80005b0:	f107 030f 	add.w	r3, r7, #15
 80005b4:	2201      	movs	r2, #1
 80005b6:	2123      	movs	r1, #35	; 0x23
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fb33 	bl	8000c24 <GYRO_IO_Write>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80005da:	f000 fa83 	bl	8000ae4 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	2201      	movs	r2, #1
 80005e2:	210f      	movs	r1, #15
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fb59 	bl	8000c9c <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	2201      	movs	r2, #1
 80005fe:	2124      	movs	r1, #36	; 0x24
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fb4b 	bl	8000c9c <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800060c:	b2db      	uxtb	r3, r3
 800060e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	2201      	movs	r2, #1
 8000614:	2124      	movs	r1, #36	; 0x24
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fb04 	bl	8000c24 <GYRO_IO_Write>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800062e:	2300      	movs	r3, #0
 8000630:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000638:	f107 030f 	add.w	r3, r7, #15
 800063c:	2201      	movs	r2, #1
 800063e:	2120      	movs	r1, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f000 faef 	bl	8000c24 <GYRO_IO_Write>
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	2300      	movs	r3, #0
 800065e:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000660:	f107 030f 	add.w	r3, r7, #15
 8000664:	2201      	movs	r2, #1
 8000666:	2130      	movs	r1, #48	; 0x30
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fb17 	bl	8000c9c <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800066e:	f107 030e 	add.w	r3, r7, #14
 8000672:	2201      	movs	r2, #1
 8000674:	2122      	movs	r1, #34	; 0x22
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fb10 	bl	8000c9c <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000682:	b2db      	uxtb	r3, r3
 8000684:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	121b      	asrs	r3, r3, #8
 800068c:	b25a      	sxtb	r2, r3
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	b25b      	sxtb	r3, r3
 8000692:	4313      	orrs	r3, r2
 8000694:	b25b      	sxtb	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 800069a:	7bbb      	ldrb	r3, [r7, #14]
 800069c:	f023 0320 	bic.w	r3, r3, #32
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80006b0:	f107 030f 	add.w	r3, r7, #15
 80006b4:	2201      	movs	r2, #1
 80006b6:	2130      	movs	r1, #48	; 0x30
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fab3 	bl	8000c24 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80006be:	f107 030e 	add.w	r3, r7, #14
 80006c2:	2201      	movs	r2, #1
 80006c4:	2122      	movs	r1, #34	; 0x22
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 faac 	bl	8000c24 <GYRO_IO_Write>
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80006de:	f107 030f 	add.w	r3, r7, #15
 80006e2:	2201      	movs	r2, #1
 80006e4:	2122      	movs	r1, #34	; 0x22
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fad8 	bl	8000c9c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d10a      	bne.n	8000708 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000702:	b2db      	uxtb	r3, r3
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	e00c      	b.n	8000722 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d109      	bne.n	8000722 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	f023 0308 	bic.w	r3, r3, #8
 8000714:	b2db      	uxtb	r3, r3
 8000716:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	b2db      	uxtb	r3, r3
 8000720:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000722:	f107 030f 	add.w	r3, r7, #15
 8000726:	2201      	movs	r2, #1
 8000728:	2122      	movs	r1, #34	; 0x22
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fa7a 	bl	8000c24 <GYRO_IO_Write>
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000742:	f107 030f 	add.w	r3, r7, #15
 8000746:	2201      	movs	r2, #1
 8000748:	2122      	movs	r1, #34	; 0x22
 800074a:	4618      	mov	r0, r3
 800074c:	f000 faa6 	bl	8000c9c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d107      	bne.n	8000766 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800075c:	b2db      	uxtb	r3, r3
 800075e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	e009      	b.n	800077a <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d106      	bne.n	800077a <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	f023 0308 	bic.w	r3, r3, #8
 8000772:	b2db      	uxtb	r3, r3
 8000774:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800077a:	f107 030f 	add.w	r3, r7, #15
 800077e:	2201      	movs	r2, #1
 8000780:	2122      	movs	r1, #34	; 0x22
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fa4e 	bl	8000c24 <GYRO_IO_Write>
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800079a:	f107 030f 	add.w	r3, r7, #15
 800079e:	2201      	movs	r2, #1
 80007a0:	2121      	movs	r1, #33	; 0x21
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fa7a 	bl	8000c9c <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80007b2:	7bfa      	ldrb	r2, [r7, #15]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80007bc:	f107 030f 	add.w	r3, r7, #15
 80007c0:	2201      	movs	r2, #1
 80007c2:	2121      	movs	r1, #33	; 0x21
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fa2d 	bl	8000c24 <GYRO_IO_Write>
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b084      	sub	sp, #16
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80007dc:	f107 030f 	add.w	r3, r7, #15
 80007e0:	2201      	movs	r2, #1
 80007e2:	2124      	movs	r1, #36	; 0x24
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fa59 	bl	8000c9c <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	f023 0310 	bic.w	r3, r3, #16
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80007f4:	7bfa      	ldrb	r2, [r7, #15]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80007fe:	f107 030f 	add.w	r3, r7, #15
 8000802:	2201      	movs	r2, #1
 8000804:	2124      	movs	r1, #36	; 0x24
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fa0c 	bl	8000c24 <GYRO_IO_Write>
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800081c:	f107 0318 	add.w	r3, r7, #24
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8000834:	f04f 0300 	mov.w	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800083e:	f107 030f 	add.w	r3, r7, #15
 8000842:	2201      	movs	r2, #1
 8000844:	2123      	movs	r1, #35	; 0x23
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fa28 	bl	8000c9c <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800084c:	f107 0318 	add.w	r3, r7, #24
 8000850:	2206      	movs	r2, #6
 8000852:	2128      	movs	r1, #40	; 0x28
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fa21 	bl	8000c9c <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000860:	2b00      	cmp	r3, #0
 8000862:	d126      	bne.n	80008b2 <L3GD20_ReadXYZAngRate+0x9e>
  {
    for(i=0; i<3; i++)
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
 8000868:	e01f      	b.n	80008aa <L3GD20_ReadXYZAngRate+0x96>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800086a:	6a3b      	ldr	r3, [r7, #32]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	3301      	adds	r3, #1
 8000870:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000874:	4413      	add	r3, r2
 8000876:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800087a:	b29b      	uxth	r3, r3
 800087c:	021b      	lsls	r3, r3, #8
 800087e:	b29a      	uxth	r2, r3
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000888:	440b      	add	r3, r1
 800088a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800088e:	b29b      	uxth	r3, r3
 8000890:	4413      	add	r3, r2
 8000892:	b29b      	uxth	r3, r3
 8000894:	b21a      	sxth	r2, r3
 8000896:	6a3b      	ldr	r3, [r7, #32]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800089e:	440b      	add	r3, r1
 80008a0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	3301      	adds	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	dddc      	ble.n	800086a <L3GD20_ReadXYZAngRate+0x56>
 80008b0:	e025      	b.n	80008fe <L3GD20_ReadXYZAngRate+0xea>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
 80008b6:	e01f      	b.n	80008f8 <L3GD20_ReadXYZAngRate+0xe4>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008c0:	4413      	add	r3, r2
 80008c2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	021b      	lsls	r3, r3, #8
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	6a3b      	ldr	r3, [r7, #32]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	3301      	adds	r3, #1
 80008d2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80008d6:	440b      	add	r3, r1
 80008d8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	4413      	add	r3, r2
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	b21a      	sxth	r2, r3
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80008ec:	440b      	add	r3, r1
 80008ee:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80008f2:	6a3b      	ldr	r3, [r7, #32]
 80008f4:	3301      	adds	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
 80008f8:	6a3b      	ldr	r3, [r7, #32]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	dddc      	ble.n	80008b8 <L3GD20_ReadXYZAngRate+0xa4>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000904:	2b10      	cmp	r3, #16
 8000906:	d006      	beq.n	8000916 <L3GD20_ReadXYZAngRate+0x102>
 8000908:	2b20      	cmp	r3, #32
 800090a:	d007      	beq.n	800091c <L3GD20_ReadXYZAngRate+0x108>
 800090c:	2b00      	cmp	r3, #0
 800090e:	d108      	bne.n	8000922 <L3GD20_ReadXYZAngRate+0x10e>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <L3GD20_ReadXYZAngRate+0x154>)
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000914:	e005      	b.n	8000922 <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <L3GD20_ReadXYZAngRate+0x158>)
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800091a:	e002      	b.n	8000922 <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <L3GD20_ReadXYZAngRate+0x15c>)
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8000920:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
 8000926:	e017      	b.n	8000958 <L3GD20_ReadXYZAngRate+0x144>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8000928:	6a3b      	ldr	r3, [r7, #32]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000930:	4413      	add	r3, r2
 8000932:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8000936:	ee07 3a90 	vmov	s15, r3
 800093a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800094a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800094e:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8000952:	6a3b      	ldr	r3, [r7, #32]
 8000954:	3301      	adds	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	2b02      	cmp	r3, #2
 800095c:	dde4      	ble.n	8000928 <L3GD20_ReadXYZAngRate+0x114>
  }
}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	410c0000 	.word	0x410c0000
 800096c:	418c0000 	.word	0x418c0000
 8000970:	428c0000 	.word	0x428c0000

08000974 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000978:	481a      	ldr	r0, [pc, #104]	; (80009e4 <SPIx_Init+0x70>)
 800097a:	f003 facb 	bl	8003f14 <HAL_SPI_GetState>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d12c      	bne.n	80009de <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <SPIx_Init+0x70>)
 8000986:	4a18      	ldr	r2, [pc, #96]	; (80009e8 <SPIx_Init+0x74>)
 8000988:	601a      	str	r2, [r3, #0]
    /* SPI baudrate is set to 10 MHz (PCLK1/SPI_BaudRatePrescaler = 80/8 = 10 MHz)
      to verify these constraints:
      lsm303c SPI interface max baudrate is 10MHz for write/read
      PCLK1 max frequency is set to 80 MHz
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <SPIx_Init+0x70>)
 800098c:	2210      	movs	r2, #16
 800098e:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <SPIx_Init+0x70>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <SPIx_Init+0x70>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <SPIx_Init+0x70>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <SPIx_Init+0x70>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <SPIx_Init+0x70>)
 80009aa:	2207      	movs	r2, #7
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <SPIx_Init+0x70>)
 80009b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009b4:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <SPIx_Init+0x70>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <SPIx_Init+0x70>)
 80009be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c2:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <SPIx_Init+0x70>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SPIx_Init+0x70>)
 80009cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d0:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80009d2:	4804      	ldr	r0, [pc, #16]	; (80009e4 <SPIx_Init+0x70>)
 80009d4:	f000 f80a 	bl	80009ec <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <SPIx_Init+0x70>)
 80009da:	f003 fa11 	bl	8003e00 <HAL_SPI_Init>
  }
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000c4 	.word	0x200000c4
 80009e8:	40003800 	.word	0x40003800

080009ec <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <SPIx_MspInit+0x60>)
 80009f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <SPIx_MspInit+0x60>)
 80009fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fe:	6593      	str	r3, [r2, #88]	; 0x58
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <SPIx_MspInit+0x60>)
 8000a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]

  /* enable SPIx gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <SPIx_MspInit+0x60>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <SPIx_MspInit+0x60>)
 8000a12:	f043 0308 	orr.w	r3, r3, #8
 8000a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <SPIx_MspInit+0x60>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	f003 0308 	and.w	r3, r3, #8
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]

  /* configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000a24:	231a      	movs	r3, #26
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; // GPIO_PULLDOWN;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a30:	2302      	movs	r3, #2
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000a34:	2305      	movs	r3, #5
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4804      	ldr	r0, [pc, #16]	; (8000a50 <SPIx_MspInit+0x64>)
 8000a40:	f001 fb58 	bl	80020f4 <HAL_GPIO_Init>
}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	48000c00 	.word	0x48000c00

08000a54 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval none.
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte;

  /* Enable the SPI */
  __HAL_SPI_ENABLE(&SpiHandle);
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <SPIx_WriteRead+0x8c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <SPIx_WriteRead+0x8c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a6c:	601a      	str	r2, [r3, #0]
  /* check TXE flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8000a6e:	bf00      	nop
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <SPIx_WriteRead+0x8c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d1f8      	bne.n	8000a70 <SPIx_WriteRead+0x1c>

  /* Write the data */
  *((__IO uint8_t *)&SpiHandle.Instance->DR) = Byte;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <SPIx_WriteRead+0x8c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	330c      	adds	r3, #12
 8000a84:	79fa      	ldrb	r2, [r7, #7]
 8000a86:	701a      	strb	r2, [r3, #0]

  while ((SpiHandle.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8000a88:	bf00      	nop
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <SPIx_WriteRead+0x8c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d1f8      	bne.n	8000a8a <SPIx_WriteRead+0x36>
  receivedbyte = *((__IO uint8_t *)&SpiHandle.Instance->DR);
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <SPIx_WriteRead+0x8c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	330c      	adds	r3, #12
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	73fb      	strb	r3, [r7, #15]

  /* Wait BSY flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 8000aa2:	bf00      	nop
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <SPIx_WriteRead+0x8c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1f8      	bne.n	8000aa4 <SPIx_WriteRead+0x50>
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8000ab2:	bf00      	nop
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <SPIx_WriteRead+0x8c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000abe:	2b80      	cmp	r3, #128	; 0x80
 8000ac0:	d0f8      	beq.n	8000ab4 <SPIx_WriteRead+0x60>

  /* disable the SPI */
  __HAL_SPI_DISABLE(&SpiHandle);
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <SPIx_WriteRead+0x8c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SPIx_WriteRead+0x8c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ad0:	601a      	str	r2, [r3, #0]

  return receivedbyte;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	200000c4 	.word	0x200000c4

08000ae4 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYRO SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0

  /* Case GYRO not used in the demonstration software except being set in
     low power mode.
     To avoid access conflicts with accelerometer and magnetometer,
     initialize  XL_CS and MAG_CS pins then deselect these I/O */
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8000aea:	4b49      	ldr	r3, [pc, #292]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a48      	ldr	r2, [pc, #288]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000af0:	f043 0310 	orr.w	r3, r3, #16
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0310 	and.w	r3, r3, #16
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	483e      	ldr	r0, [pc, #248]	; (8000c14 <GYRO_IO_Init+0x130>)
 8000b1a:	f001 faeb 	bl	80020f4 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  ACCELERO_CS_HIGH();
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2101      	movs	r1, #1
 8000b22:	483c      	ldr	r0, [pc, #240]	; (8000c14 <GYRO_IO_Init+0x130>)
 8000b24:	f001 fc8e 	bl	8002444 <HAL_GPIO_WritePin>

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  MAGNETO_CS_GPIO_CLK_ENABLE();
 8000b28:	4b39      	ldr	r3, [pc, #228]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2c:	4a38      	ldr	r2, [pc, #224]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b34:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStructure.Pin = MAGNETO_CS_PIN;
 8000b40:	2301      	movs	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAGNETO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4830      	ldr	r0, [pc, #192]	; (8000c18 <GYRO_IO_Init+0x134>)
 8000b58:	f001 facc 	bl	80020f4 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  MAGNETO_CS_HIGH();
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2101      	movs	r1, #1
 8000b60:	482d      	ldr	r0, [pc, #180]	; (8000c18 <GYRO_IO_Init+0x134>)
 8000b62:	f001 fc6f 	bl	8002444 <HAL_GPIO_WritePin>


  /* Configure the Gyroscope Control pins ---------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 8000b66:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a29      	ldr	r2, [pc, #164]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000b6c:	f043 0308 	orr.w	r3, r3, #8
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b27      	ldr	r3, [pc, #156]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8000b7e:	2380      	movs	r3, #128	; 0x80
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	4821      	ldr	r0, [pc, #132]	; (8000c1c <GYRO_IO_Init+0x138>)
 8000b96:	f001 faad 	bl	80020f4 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	481f      	ldr	r0, [pc, #124]	; (8000c1c <GYRO_IO_Init+0x138>)
 8000ba0:	f001 fc50 	bl	8002444 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT1_GPIO_CLK_ENABLE();
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba8:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT1_GPIO_PORT, &GPIO_InitStructure);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4812      	ldr	r0, [pc, #72]	; (8000c1c <GYRO_IO_Init+0x138>)
 8000bd4:	f001 fa8e 	bl	80020f4 <HAL_GPIO_Init>

  GYRO_INT2_GPIO_CLK_ENABLE();
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bdc:	4a0c      	ldr	r2, [pc, #48]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <GYRO_IO_Init+0x12c>)
 8000be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = GYRO_INT2_PIN;
 8000bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT2_GPIO_PORT, &GPIO_InitStructure);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4808      	ldr	r0, [pc, #32]	; (8000c20 <GYRO_IO_Init+0x13c>)
 8000bfe:	f001 fa79 	bl	80020f4 <HAL_GPIO_Init>

  SPIx_Init();
 8000c02:	f7ff feb7 	bl	8000974 <SPIx_Init>

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48001000 	.word	0x48001000
 8000c18:	48000800 	.word	0x48000800
 8000c1c:	48000c00 	.word	0x48000c00
 8000c20:	48000400 	.word	0x48000400

08000c24 <GYRO_IO_Write>:
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
 8000c30:	4613      	mov	r3, r2
 8000c32:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8000c34:	883b      	ldrh	r3, [r7, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d903      	bls.n	8000c42 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8000c3a:	78fb      	ldrb	r3, [r7, #3]
 8000c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c40:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8000c42:	2200      	movs	r2, #0
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	4813      	ldr	r0, [pc, #76]	; (8000c94 <GYRO_IO_Write+0x70>)
 8000c48:	f001 fbfc 	bl	8002444 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <GYRO_IO_Write+0x74>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <GYRO_IO_Write+0x74>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8000c5a:	601a      	str	r2, [r3, #0]

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fef8 	bl	8000a54 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8000c64:	e00a      	b.n	8000c7c <GYRO_IO_Write+0x58>
  {
    SPIx_WriteRead(*pBuffer);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fef2 	bl	8000a54 <SPIx_WriteRead>
    NumByteToWrite--;
 8000c70:	883b      	ldrh	r3, [r7, #0]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8000c7c:	883b      	ldrh	r3, [r7, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f1      	bne.n	8000c66 <GYRO_IO_Write+0x42>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8000c82:	2201      	movs	r2, #1
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	4803      	ldr	r0, [pc, #12]	; (8000c94 <GYRO_IO_Write+0x70>)
 8000c88:	f001 fbdc 	bl	8002444 <HAL_GPIO_WritePin>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	48000c00 	.word	0x48000c00
 8000c98:	200000c4 	.word	0x200000c4

08000c9c <GYRO_IO_Read>:
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8000cac:	883b      	ldrh	r3, [r7, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d904      	bls.n	8000cbc <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000cb8:	70fb      	strb	r3, [r7, #3]
 8000cba:	e003      	b.n	8000cc4 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cc2:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	4814      	ldr	r0, [pc, #80]	; (8000d1c <GYRO_IO_Read+0x80>)
 8000cca:	f001 fbbb 	bl	8002444 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <GYRO_IO_Read+0x84>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <GYRO_IO_Read+0x84>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8000cdc:	601a      	str	r2, [r3, #0]
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8000cde:	78fb      	ldrb	r3, [r7, #3]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff feb7 	bl	8000a54 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 8000ce6:	e00c      	b.n	8000d02 <GYRO_IO_Read+0x66>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(0x00);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff feb3 	bl	8000a54 <SPIx_WriteRead>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8000cf6:	883b      	ldrh	r3, [r7, #0]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8000d02:	883b      	ldrh	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1ef      	bne.n	8000ce8 <GYRO_IO_Read+0x4c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <GYRO_IO_Read+0x80>)
 8000d0e:	f001 fb99 	bl	8002444 <HAL_GPIO_WritePin>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	48000c00 	.word	0x48000c00
 8000d20:	200000c4 	.word	0x200000c4

08000d24 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure = {0, 0};
 8000d32:	2300      	movs	r3, #0
 8000d34:	703b      	strb	r3, [r7, #0]
 8000d36:	2300      	movs	r3, #0
 8000d38:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <BSP_GYRO_Init+0xcc>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	4798      	blx	r3
 8000d40:	4603      	mov	r3, r0
 8000d42:	2bd4      	cmp	r3, #212	; 0xd4
 8000d44:	d005      	beq.n	8000d52 <BSP_GYRO_Init+0x2e>
 8000d46:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <BSP_GYRO_Init+0xcc>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	4798      	blx	r3
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2bd5      	cmp	r3, #213	; 0xd5
 8000d50:	d146      	bne.n	8000de0 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8000d52:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <BSP_GYRO_Init+0xd0>)
 8000d54:	4a26      	ldr	r2, [pc, #152]	; (8000df0 <BSP_GYRO_Init+0xcc>)
 8000d56:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8000d60:	2307      	movs	r3, #7
 8000d62:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8000d64:	2330      	movs	r3, #48	; 0x30
 8000d66:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500;
 8000d70:	2310      	movs	r3, #16
 8000d72:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8000d74:	793a      	ldrb	r2, [r7, #4]
 8000d76:	797b      	ldrb	r3, [r7, #5]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8000d82:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8000d8a:	7a3a      	ldrb	r2, [r7, #8]
 8000d8c:	7a7b      	ldrb	r3, [r7, #9]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	b2da      	uxtb	r2, r3
                        L3GD20_InitStructure.Full_Scale) << 8);
 8000d92:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	021b      	lsls	r3, r3, #8
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	89bb      	ldrh	r3, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <BSP_GYRO_Init+0xd0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	89ba      	ldrh	r2, [r7, #12]
 8000dac:	4610      	mov	r0, r2
 8000dae:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 8000db0:	2300      	movs	r3, #0
 8000db2:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 8000db8:	783a      	ldrb	r2, [r7, #0]
                      L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 8000dba:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	81bb      	strh	r3, [r7, #12]

    /* Configure component filter */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <BSP_GYRO_Init+0xd0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc8:	89ba      	ldrh	r2, [r7, #12]
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	4610      	mov	r0, r2
 8000dce:	4798      	blx	r3

    /* Enable component filter */
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <BSP_GYRO_Init+0xd0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	2010      	movs	r0, #16
 8000dd8:	4798      	blx	r3

    ret = GYRO_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e001      	b.n	8000de4 <BSP_GYRO_Init+0xc0>
  }
  else
  {
    ret = GYRO_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000128 	.word	0x20000128

08000df8 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <BSP_GYRO_GetXYZ+0x24>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d004      	beq.n	8000e14 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <BSP_GYRO_GetXYZ+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	4798      	blx	r3
  }
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000128 	.word	0x20000128

08000e20 <noiseFilter>:
	if (num1 > num2){
		return num1;
	} else return num2;
}

int noiseFilter(int rawValue, int noiseLevel){
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	if (abs(rawValue) >= noiseLevel){
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bfb8      	it	lt
 8000e30:	425b      	neglt	r3, r3
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	dc01      	bgt.n	8000e3c <noiseFilter+0x1c>
		return rawValue;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	e000      	b.n	8000e3e <noiseFilter+0x1e>
	} else return 0;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <returnPosChar>:

char* returnPosChar(int index){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

	pos_char_string[1] = '\0';
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <returnPosChar+0x28>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	705a      	strb	r2, [r3, #1]

	pos_char_string[0] = pos_chars[index];
 8000e5a:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <returnPosChar+0x2c>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	781a      	ldrb	r2, [r3, #0]
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <returnPosChar+0x28>)
 8000e64:	701a      	strb	r2, [r3, #0]
	return pos_char_string;
 8000e66:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <returnPosChar+0x28>)

}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	20001a10 	.word	0x20001a10
 8000e78:	080083b0 	.word	0x080083b0

08000e7c <isXPositionOccupied>:

int isXPositionOccupied(int index){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < 4; i++){
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	e00d      	b.n	8000ea6 <isXPositionOccupied+0x2a>
		if(index == (ROWS_DISPLAY - positions[i].x + 1)){
 8000e8a:	4a0c      	ldr	r2, [pc, #48]	; (8000ebc <isXPositionOccupied+0x40>)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e92:	f1c3 0316 	rsb	r3, r3, #22
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d101      	bne.n	8000ea0 <isXPositionOccupied+0x24>
			return i;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	e007      	b.n	8000eb0 <isXPositionOccupied+0x34>
	for(int i = 0; i < 4; i++){
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	ddee      	ble.n	8000e8a <isXPositionOccupied+0xe>
		}
	}

	return -1;
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	20001bd0 	.word	0x20001bd0

08000ec0 <isXZPositionOccupied>:

int isXZPositionOccupied(int x, int z){
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]

	for(int i = 0; i < 4; i++){
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	e015      	b.n	8000efc <isXZPositionOccupied+0x3c>
		if((ROWS_DISPLAY - positions[i].x + 1) == x && positions[i].z == z){
 8000ed0:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <isXZPositionOccupied+0x54>)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ed8:	f1c3 0316 	rsb	r3, r3, #22
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d109      	bne.n	8000ef6 <isXZPositionOccupied+0x36>
 8000ee2:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <isXZPositionOccupied+0x54>)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	4413      	add	r3, r2
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d101      	bne.n	8000ef6 <isXZPositionOccupied+0x36>
			return i;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	e007      	b.n	8000f06 <isXZPositionOccupied+0x46>
	for(int i = 0; i < 4; i++){
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	dde6      	ble.n	8000ed0 <isXZPositionOccupied+0x10>
		}
	}

	return -1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20001bd0 	.word	0x20001bd0

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	center.x = (ROWS_DISPLAY / 2) + 1;
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	; (800100c <main+0xf4>)
 8000f20:	220b      	movs	r2, #11
 8000f22:	601a      	str	r2, [r3, #0]
	center.z = (COLS_DISPLAY / 2) + 1;
 8000f24:	4b39      	ldr	r3, [pc, #228]	; (800100c <main+0xf4>)
 8000f26:	2215      	movs	r2, #21
 8000f28:	605a      	str	r2, [r3, #4]


	for(int i = 0; i < 4; i++){
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	e00c      	b.n	8000f4a <main+0x32>
		positions[i] = center;
 8000f30:	4a37      	ldr	r2, [pc, #220]	; (8001010 <main+0xf8>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4935      	ldr	r1, [pc, #212]	; (800100c <main+0xf4>)
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	460a      	mov	r2, r1
 8000f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f40:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i = 0; i < 4; i++){
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3301      	adds	r3, #1
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b03      	cmp	r3, #3
 8000f4e:	ddef      	ble.n	8000f30 <main+0x18>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f000 ffb0 	bl	8001eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f874 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 fa14 	bl	8001384 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f5c:	f000 f910 	bl	8001180 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f60:	f000 f94e 	bl	8001200 <MX_I2C2_Init>
  MX_RNG_Init();
 8000f64:	f000 f98c 	bl	8001280 <MX_RNG_Init>
  MX_SPI2_Init();
 8000f68:	f000 f99e 	bl	80012a8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000f6c:	f000 f9da 	bl	8001324 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Init the uart Buffers */
	for (unsigned char i = 0; i < UART_BUFFER_SIZE; i++)  {
 8000f70:	2300      	movs	r3, #0
 8000f72:	70fb      	strb	r3, [r7, #3]
 8000f74:	e00c      	b.n	8000f90 <main+0x78>
       gbl_uart2_transmitBuffer[i] = '0' + i;
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	78fa      	ldrb	r2, [r7, #3]
 8000f7a:	3230      	adds	r2, #48	; 0x30
 8000f7c:	b2d1      	uxtb	r1, r2
 8000f7e:	4a25      	ldr	r2, [pc, #148]	; (8001014 <main+0xfc>)
 8000f80:	54d1      	strb	r1, [r2, r3]
       gbl_uart2_receiveBuffer[i] = 0;
 8000f82:	78fb      	ldrb	r3, [r7, #3]
 8000f84:	4a24      	ldr	r2, [pc, #144]	; (8001018 <main+0x100>)
 8000f86:	2100      	movs	r1, #0
 8000f88:	54d1      	strb	r1, [r2, r3]
	for (unsigned char i = 0; i < UART_BUFFER_SIZE; i++)  {
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	70fb      	strb	r3, [r7, #3]
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	2b4f      	cmp	r3, #79	; 0x4f
 8000f94:	d9ef      	bls.n	8000f76 <main+0x5e>
    }
	sprintf((char*)gbl_uart2_transmitBuffer,"Project Game Startup\a\n\r");
 8000f96:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <main+0xfc>)
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <main+0x104>)
 8000f9a:	4615      	mov	r5, r2
 8000f9c:	461c      	mov	r4, r3
 8000f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa0:	6028      	str	r0, [r5, #0]
 8000fa2:	6069      	str	r1, [r5, #4]
 8000fa4:	60aa      	str	r2, [r5, #8]
 8000fa6:	60eb      	str	r3, [r5, #12]
 8000fa8:	cc03      	ldmia	r4!, {r0, r1}
 8000faa:	6128      	str	r0, [r5, #16]
 8000fac:	6169      	str	r1, [r5, #20]
	HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8000fae:	4819      	ldr	r0, [pc, #100]	; (8001014 <main+0xfc>)
 8000fb0:	f7ff f90e 	bl	80001d0 <strlen>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	4916      	ldr	r1, [pc, #88]	; (8001014 <main+0xfc>)
 8000fbc:	4818      	ldr	r0, [pc, #96]	; (8001020 <main+0x108>)
 8000fbe:	f003 fa65 	bl	800448c <HAL_UART_Transmit>

	sprintf((char*)gbl_uart2_transmitBuffer,"\x1b[2J");
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <main+0xfc>)
 8000fc4:	4a17      	ldr	r2, [pc, #92]	; (8001024 <main+0x10c>)
 8000fc6:	6810      	ldr	r0, [r2, #0]
 8000fc8:	6018      	str	r0, [r3, #0]
 8000fca:	7912      	ldrb	r2, [r2, #4]
 8000fcc:	711a      	strb	r2, [r3, #4]
	    HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8000fce:	4811      	ldr	r0, [pc, #68]	; (8001014 <main+0xfc>)
 8000fd0:	f7ff f8fe 	bl	80001d0 <strlen>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	490e      	ldr	r1, [pc, #56]	; (8001014 <main+0xfc>)
 8000fdc:	4810      	ldr	r0, [pc, #64]	; (8001020 <main+0x108>)
 8000fde:	f003 fa55 	bl	800448c <HAL_UART_Transmit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fe2:	f003 ffc3 	bl	8004f6c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <main+0x110>)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4810      	ldr	r0, [pc, #64]	; (800102c <main+0x114>)
 8000fec:	f004 f828 	bl	8005040 <osThreadNew>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <main+0x118>)
 8000ff4:	601a      	str	r2, [r3, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartTask02, NULL, &displayTask_attributes);
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <main+0x11c>)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	480f      	ldr	r0, [pc, #60]	; (8001038 <main+0x120>)
 8000ffc:	f004 f820 	bl	8005040 <osThreadNew>
 8001000:	4602      	mov	r2, r0
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <main+0x124>)
 8001004:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001006:	f003 ffe5 	bl	8004fd4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800100a:	e7fe      	b.n	800100a <main+0xf2>
 800100c:	20001b68 	.word	0x20001b68
 8001010:	20001bd0 	.word	0x20001bd0
 8001014:	20001b80 	.word	0x20001b80
 8001018:	20001b18 	.word	0x20001b18
 800101c:	080082b0 	.word	0x080082b0
 8001020:	20001bf0 	.word	0x20001bf0
 8001024:	080082c8 	.word	0x080082c8
 8001028:	08008368 	.word	0x08008368
 800102c:	08001721 	.word	0x08001721
 8001030:	20001a14 	.word	0x20001a14
 8001034:	0800838c 	.word	0x0800838c
 8001038:	080017cd 	.word	0x080017cd
 800103c:	20001b14 	.word	0x20001b14

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b0b8      	sub	sp, #224	; 0xe0
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800104a:	2244      	movs	r2, #68	; 0x44
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f006 fd01 	bl	8007a56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001064:	463b      	mov	r3, r7
 8001066:	2288      	movs	r2, #136	; 0x88
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f006 fcf3 	bl	8007a56 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001070:	f001 fb26 	bl	80026c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001074:	4b40      	ldr	r3, [pc, #256]	; (8001178 <SystemClock_Config+0x138>)
 8001076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800107a:	4a3f      	ldr	r2, [pc, #252]	; (8001178 <SystemClock_Config+0x138>)
 800107c:	f023 0318 	bic.w	r3, r3, #24
 8001080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001084:	2314      	movs	r3, #20
 8001086:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800108a:	2301      	movs	r3, #1
 800108c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001090:	2301      	movs	r3, #1
 8001092:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800109c:	2360      	movs	r3, #96	; 0x60
 800109e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010a8:	2301      	movs	r3, #1
 80010aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010b4:	2328      	movs	r3, #40	; 0x28
 80010b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010ba:	2307      	movs	r3, #7
 80010bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fb69 	bl	80027a8 <HAL_RCC_OscConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80010dc:	f000 fc98 	bl	8001a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	230f      	movs	r3, #15
 80010e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e6:	2303      	movs	r3, #3
 80010e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001102:	2104      	movs	r1, #4
 8001104:	4618      	mov	r0, r3
 8001106:	f001 ff35 	bl	8002f74 <HAL_RCC_ClockConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001110:	f000 fc7e 	bl	8001a10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <SystemClock_Config+0x13c>)
 8001116:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_RNG;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001118:	2300      	movs	r3, #0
 800111a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800111c:	2300      	movs	r3, #0
 800111e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001120:	2300      	movs	r3, #0
 8001122:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001124:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001128:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800112a:	2301      	movs	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800112e:	2301      	movs	r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001132:	2310      	movs	r3, #16
 8001134:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001136:	2307      	movs	r3, #7
 8001138:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800113a:	2302      	movs	r3, #2
 800113c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001142:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001146:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	4618      	mov	r0, r3
 800114c:	f002 f948 	bl	80033e0 <HAL_RCCEx_PeriphCLKConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8001156:	f000 fc5b 	bl	8001a10 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800115a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800115e:	f001 facd 	bl	80026fc <HAL_PWREx_ControlVoltageScaling>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001168:	f000 fc52 	bl	8001a10 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800116c:	f002 fc1e 	bl	80039ac <HAL_RCCEx_EnableMSIPLLMode>
}
 8001170:	bf00      	nop
 8001172:	37e0      	adds	r7, #224	; 0xe0
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000
 800117c:	000400c2 	.word	0x000400c2

08001180 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <MX_I2C1_Init+0x78>)
 8001188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_I2C1_Init+0x74>)
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <MX_I2C1_Init+0x7c>)
 800118e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001198:	2201      	movs	r2, #1
 800119a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_I2C1_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ba:	480e      	ldr	r0, [pc, #56]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011bc:	f001 f95a 	bl	8002474 <HAL_I2C_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011c6:	f000 fc23 	bl	8001a10 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ca:	2100      	movs	r1, #0
 80011cc:	4809      	ldr	r0, [pc, #36]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011ce:	f001 f9e0 	bl	8002592 <HAL_I2CEx_ConfigAnalogFilter>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011d8:	f000 fc1a 	bl	8001a10 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011dc:	2100      	movs	r1, #0
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011e0:	f001 fa22 	bl	8002628 <HAL_I2CEx_ConfigDigitalFilter>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ea:	f000 fc11 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20001a7c 	.word	0x20001a7c
 80011f8:	40005400 	.word	0x40005400
 80011fc:	10909cec 	.word	0x10909cec

08001200 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_I2C2_Init+0x74>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_I2C2_Init+0x78>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_I2C2_Init+0x74>)
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <MX_I2C2_Init+0x7c>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_I2C2_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_I2C2_Init+0x74>)
 8001218:	2201      	movs	r2, #1
 800121a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_I2C2_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_I2C2_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C2_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C2_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C2_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <MX_I2C2_Init+0x74>)
 800123c:	f001 f91a 	bl	8002474 <HAL_I2C_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001246:	f000 fbe3 	bl	8001a10 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	4809      	ldr	r0, [pc, #36]	; (8001274 <MX_I2C2_Init+0x74>)
 800124e:	f001 f9a0 	bl	8002592 <HAL_I2CEx_ConfigAnalogFilter>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001258:	f000 fbda 	bl	8001a10 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800125c:	2100      	movs	r1, #0
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_I2C2_Init+0x74>)
 8001260:	f001 f9e2 	bl	8002628 <HAL_I2CEx_ConfigDigitalFilter>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 fbd1 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20001ac8 	.word	0x20001ac8
 8001278:	40005800 	.word	0x40005800
 800127c:	10909cec 	.word	0x10909cec

08001280 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_RNG_Init+0x20>)
 8001286:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <MX_RNG_Init+0x24>)
 8001288:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_RNG_Init+0x20>)
 800128c:	f002 fd68 	bl	8003d60 <HAL_RNG_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001296:	f000 fbbb 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20001b70 	.word	0x20001b70
 80012a4:	50060800 	.word	0x50060800

080012a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <MX_SPI2_Init+0x74>)
 80012ae:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <MX_SPI2_Init+0x78>)
 80012b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_SPI2_Init+0x74>)
 80012b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_SPI2_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_SPI2_Init+0x74>)
 80012c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_SPI2_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_SPI2_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_SPI2_Init+0x74>)
 80012d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_SPI2_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_SPI2_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_SPI2_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_SPI2_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_SPI2_Init+0x74>)
 80012f6:	2207      	movs	r2, #7
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_SPI2_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_SPI2_Init+0x74>)
 8001302:	2208      	movs	r2, #8
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_SPI2_Init+0x74>)
 8001308:	f002 fd7a 	bl	8003e00 <HAL_SPI_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001312:	f000 fb7d 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20001a18 	.word	0x20001a18
 8001320:	40003800 	.word	0x40003800

08001324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_USART2_UART_Init+0x58>)
 800132a:	4a15      	ldr	r2, [pc, #84]	; (8001380 <MX_USART2_UART_Init+0x5c>)
 800132c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <MX_USART2_UART_Init+0x58>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_USART2_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_USART2_UART_Init+0x58>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_USART2_UART_Init+0x58>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_USART2_UART_Init+0x58>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <MX_USART2_UART_Init+0x58>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_USART2_UART_Init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <MX_USART2_UART_Init+0x58>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_USART2_UART_Init+0x58>)
 8001362:	2200      	movs	r2, #0
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_USART2_UART_Init+0x58>)
 8001368:	f003 f842 	bl	80043f0 <HAL_UART_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001372:	f000 fb4d 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20001bf0 	.word	0x20001bf0
 8001380:	40004400 	.word	0x40004400

08001384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	; 0x30
 8001388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800139a:	4bb7      	ldr	r3, [pc, #732]	; (8001678 <MX_GPIO_Init+0x2f4>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4ab6      	ldr	r2, [pc, #728]	; (8001678 <MX_GPIO_Init+0x2f4>)
 80013a0:	f043 0310 	orr.w	r3, r3, #16
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4bb4      	ldr	r3, [pc, #720]	; (8001678 <MX_GPIO_Init+0x2f4>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	4bb1      	ldr	r3, [pc, #708]	; (8001678 <MX_GPIO_Init+0x2f4>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	4ab0      	ldr	r2, [pc, #704]	; (8001678 <MX_GPIO_Init+0x2f4>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013be:	4bae      	ldr	r3, [pc, #696]	; (8001678 <MX_GPIO_Init+0x2f4>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ca:	4bab      	ldr	r3, [pc, #684]	; (8001678 <MX_GPIO_Init+0x2f4>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	4aaa      	ldr	r2, [pc, #680]	; (8001678 <MX_GPIO_Init+0x2f4>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d6:	4ba8      	ldr	r3, [pc, #672]	; (8001678 <MX_GPIO_Init+0x2f4>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4ba5      	ldr	r3, [pc, #660]	; (8001678 <MX_GPIO_Init+0x2f4>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4aa4      	ldr	r2, [pc, #656]	; (8001678 <MX_GPIO_Init+0x2f4>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4ba2      	ldr	r3, [pc, #648]	; (8001678 <MX_GPIO_Init+0x2f4>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b9f      	ldr	r3, [pc, #636]	; (8001678 <MX_GPIO_Init+0x2f4>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a9e      	ldr	r2, [pc, #632]	; (8001678 <MX_GPIO_Init+0x2f4>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b9c      	ldr	r3, [pc, #624]	; (8001678 <MX_GPIO_Init+0x2f4>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001412:	4b99      	ldr	r3, [pc, #612]	; (8001678 <MX_GPIO_Init+0x2f4>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a98      	ldr	r2, [pc, #608]	; (8001678 <MX_GPIO_Init+0x2f4>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b96      	ldr	r3, [pc, #600]	; (8001678 <MX_GPIO_Init+0x2f4>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f240 1109 	movw	r1, #265	; 0x109
 8001430:	4892      	ldr	r0, [pc, #584]	; (800167c <MX_GPIO_Init+0x2f8>)
 8001432:	f001 f807 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	210c      	movs	r1, #12
 800143a:	4891      	ldr	r0, [pc, #580]	; (8001680 <MX_GPIO_Init+0x2fc>)
 800143c:	f001 f802 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001446:	488f      	ldr	r0, [pc, #572]	; (8001684 <MX_GPIO_Init+0x300>)
 8001448:	f000 fffc 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001452:	488c      	ldr	r0, [pc, #560]	; (8001684 <MX_GPIO_Init+0x300>)
 8001454:	f000 fff6 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	488a      	ldr	r0, [pc, #552]	; (8001688 <MX_GPIO_Init+0x304>)
 800145e:	f000 fff1 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_MCK_Pin SAI1_FS_Pin SAI1_SCK_Pin SAI1_SD_Pin 
                           AUDIO_DIN_Pin */
  GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin 
 8001462:	23f4      	movs	r3, #244	; 0xf4
 8001464:	61fb      	str	r3, [r7, #28]
                          |AUDIO_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001472:	230d      	movs	r3, #13
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	487f      	ldr	r0, [pc, #508]	; (800167c <MX_GPIO_Init+0x2f8>)
 800147e:	f000 fe39 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8001482:	2308      	movs	r3, #8
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	2301      	movs	r3, #1
 8001488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148e:	2302      	movs	r3, #2
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	4619      	mov	r1, r3
 8001498:	4878      	ldr	r0, [pc, #480]	; (800167c <MX_GPIO_Init+0x2f8>)
 800149a:	f000 fe2b 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 800149e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80014a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014a4:	4b79      	ldr	r3, [pc, #484]	; (800168c <MX_GPIO_Init+0x308>)
 80014a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	4874      	ldr	r0, [pc, #464]	; (8001684 <MX_GPIO_Init+0x300>)
 80014b4:	f000 fe1e 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 80014b8:	2307      	movs	r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	486e      	ldr	r0, [pc, #440]	; (8001684 <MX_GPIO_Init+0x300>)
 80014cc:	f000 fe12 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VLCD_Pin SEG22_Pin SEG1_Pin SEG14_Pin 
                           SEG9_Pin SEG13_Pin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 80014d0:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80014d4:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80014e2:	230b      	movs	r3, #11
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	4865      	ldr	r0, [pc, #404]	; (8001684 <MX_GPIO_Init+0x300>)
 80014ee:	f000 fe01 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin 
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 80014f2:	232f      	movs	r3, #47	; 0x2f
 80014f4:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014fa:	2302      	movs	r3, #2
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001508:	f000 fdf4 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800150c:	2310      	movs	r3, #16
 800150e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001510:	4b5e      	ldr	r3, [pc, #376]	; (800168c <MX_GPIO_Init+0x308>)
 8001512:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001522:	f000 fde7 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG23_Pin SEG0_Pin COM0_Pin COM1_Pin 
                           COM2_Pin SEG10_Pin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 8001526:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800152a:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001538:	230b      	movs	r3, #11
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001546:	f000 fdd5 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG21_Pin SEG2_Pin SEG20_Pin SEG3_Pin 
                           SEG19_Pin SEG4_Pin SEG11_Pin SEG12_Pin 
                           COM3_Pin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 800154a:	f24f 2333 	movw	r3, #62003	; 0xf233
 800154e:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800155c:	230b      	movs	r3, #11
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	4846      	ldr	r0, [pc, #280]	; (8001680 <MX_GPIO_Init+0x2fc>)
 8001568:	f000 fdc4 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 800156c:	2304      	movs	r3, #4
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001574:	2301      	movs	r3, #1
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	483f      	ldr	r0, [pc, #252]	; (8001680 <MX_GPIO_Init+0x2fc>)
 8001584:	f000 fdb6 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8001588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001592:	2301      	movs	r3, #1
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	4619      	mov	r1, r3
 80015a0:	4836      	ldr	r0, [pc, #216]	; (800167c <MX_GPIO_Init+0x2f8>)
 80015a2:	f000 fda7 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_CLK_Pin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 80015a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80015b8:	230d      	movs	r3, #13
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	482e      	ldr	r0, [pc, #184]	; (800167c <MX_GPIO_Init+0x2f8>)
 80015c4:	f000 fd96 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CLK_Pin QSPI_CS_Pin QSPI_D0_Pin QSPI_D1_Pin 
                           QSPI_D2_Pin QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 80015c8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80015cc:	61fb      	str	r3, [r7, #28]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015da:	230a      	movs	r3, #10
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	4825      	ldr	r0, [pc, #148]	; (800167c <MX_GPIO_Init+0x2f8>)
 80015e6:	f000 fd85 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG18_Pin SEG5_Pin SEG17_Pin SEG6_Pin 
                           SEG16_Pin SEG7_Pin SEG15_Pin SEG8_Pin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 80015ea:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80015ee:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80015fc:	230b      	movs	r3, #11
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4820      	ldr	r0, [pc, #128]	; (8001688 <MX_GPIO_Init+0x304>)
 8001608:	f000 fd74 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 800160c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	4817      	ldr	r0, [pc, #92]	; (8001684 <MX_GPIO_Init+0x300>)
 8001626:	f000 fd65 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800162a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800163c:	230a      	movs	r3, #10
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164a:	f000 fd53 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 800164e:	2305      	movs	r3, #5
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_GPIO_Init+0x308>)
 8001654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4809      	ldr	r0, [pc, #36]	; (8001688 <MX_GPIO_Init+0x304>)
 8001662:	f000 fd47 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	e00c      	b.n	8001690 <MX_GPIO_Init+0x30c>
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	48001000 	.word	0x48001000
 8001680:	48000400 	.word	0x48000400
 8001684:	48000800 	.word	0x48000800
 8001688:	48000c00 	.word	0x48000c00
 800168c:	10120000 	.word	0x10120000
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	481d      	ldr	r0, [pc, #116]	; (8001710 <MX_GPIO_Init+0x38c>)
 800169a:	f000 fd2b 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 800169e:	2308      	movs	r3, #8
 80016a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4817      	ldr	r0, [pc, #92]	; (8001714 <MX_GPIO_Init+0x390>)
 80016b6:	f000 fd1d 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80016ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <MX_GPIO_Init+0x394>)
 80016c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	4811      	ldr	r0, [pc, #68]	; (8001714 <MX_GPIO_Init+0x390>)
 80016d0:	f000 fd10 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	480c      	ldr	r0, [pc, #48]	; (800171c <MX_GPIO_Init+0x398>)
 80016ec:	f000 fd02 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 80016f0:	2302      	movs	r3, #2
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <MX_GPIO_Init+0x394>)
 80016f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	4806      	ldr	r0, [pc, #24]	; (800171c <MX_GPIO_Init+0x398>)
 8001704:	f000 fcf6 	bl	80020f4 <HAL_GPIO_Init>

}
 8001708:	bf00      	nop
 800170a:	3730      	adds	r7, #48	; 0x30
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	48000c00 	.word	0x48000c00
 8001714:	48000400 	.word	0x48000400
 8001718:	10120000 	.word	0x10120000
 800171c:	48001000 	.word	0x48001000

08001720 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	if(BSP_GYRO_Init() != HAL_OK)  {
 8001728:	f7ff fafc 	bl	8000d24 <BSP_GYRO_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <StartDefaultTask+0x16>
		    /* Initialization Error */
		Error_Handler();
 8001732:	f000 f96d 	bl	8001a10 <Error_Handler>
	}
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001736:	2001      	movs	r0, #1
 8001738:	f003 fd28 	bl	800518c <osDelay>

    /* Get Raw values */
    BSP_GYRO_GetXYZ(gbl_buffer);
 800173c:	481f      	ldr	r0, [pc, #124]	; (80017bc <StartDefaultTask+0x9c>)
 800173e:	f7ff fb5b 	bl	8000df8 <BSP_GYRO_GetXYZ>

    //processing of data with offset and noise filter
    x_accum += noiseFilter((int32_t)gbl_buffer[0] - X_RAW_OFFSET, X_NOISE_LEVEL);
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <StartDefaultTask+0x9c>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800174c:	ee17 3a90 	vmov	r3, s15
 8001750:	f2a3 7319 	subw	r3, r3, #1817	; 0x719
 8001754:	f241 2198 	movw	r1, #4760	; 0x1298
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fb61 	bl	8000e20 <noiseFilter>
 800175e:	4602      	mov	r2, r0
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <StartDefaultTask+0xa0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4413      	add	r3, r2
 8001766:	4a16      	ldr	r2, [pc, #88]	; (80017c0 <StartDefaultTask+0xa0>)
 8001768:	6013      	str	r3, [r2, #0]
    y_accum += noiseFilter((int32_t)gbl_buffer[1] - Y_RAW_OFFSET, Y_NOISE_LEVEL);
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <StartDefaultTask+0x9c>)
 800176c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001774:	ee17 3a90 	vmov	r3, s15
 8001778:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 800177c:	f241 415a 	movw	r1, #5210	; 0x145a
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fb4d 	bl	8000e20 <noiseFilter>
 8001786:	4602      	mov	r2, r0
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <StartDefaultTask+0xa4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4413      	add	r3, r2
 800178e:	4a0d      	ldr	r2, [pc, #52]	; (80017c4 <StartDefaultTask+0xa4>)
 8001790:	6013      	str	r3, [r2, #0]
    z_accum += noiseFilter((int32_t)gbl_buffer[2] - Z_RAW_OFFSET, Z_NOISE_LEVEL);
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <StartDefaultTask+0x9c>)
 8001794:	edd3 7a02 	vldr	s15, [r3, #8]
 8001798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800179c:	ee17 3a90 	vmov	r3, s15
 80017a0:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80017a4:	f640 713c 	movw	r1, #3900	; 0xf3c
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fb39 	bl	8000e20 <noiseFilter>
 80017ae:	4602      	mov	r2, r0
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <StartDefaultTask+0xa8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <StartDefaultTask+0xa8>)
 80017b8:	6013      	str	r3, [r2, #0]
    osDelay(1);
 80017ba:	e7bc      	b.n	8001736 <StartDefaultTask+0x16>
 80017bc:	2000012c 	.word	0x2000012c
 80017c0:	20000138 	.word	0x20000138
 80017c4:	2000013c 	.word	0x2000013c
 80017c8:	20000140 	.word	0x20000140

080017cc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08c      	sub	sp, #48	; 0x30
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(67); //67 for 15FPS
 80017d4:	2043      	movs	r0, #67	; 0x43
 80017d6:	f003 fcd9 	bl	800518c <osDelay>
    int disp_accum_x = (int) round(((float) x_accum) / num_points);
    int disp_accum_y = (int) round(((float) y_accum) / num_points);
    int disp_accum_z = (int) round(((float) z_accum) / num_points);
	*/

    sprintf((char*)gbl_uart2_transmitBuffer,"\x1b[0;0H");
 80017da:	4b73      	ldr	r3, [pc, #460]	; (80019a8 <StartTask02+0x1dc>)
 80017dc:	4a73      	ldr	r2, [pc, #460]	; (80019ac <StartTask02+0x1e0>)
 80017de:	6810      	ldr	r0, [r2, #0]
 80017e0:	6018      	str	r0, [r3, #0]
 80017e2:	8891      	ldrh	r1, [r2, #4]
 80017e4:	7992      	ldrb	r2, [r2, #6]
 80017e6:	8099      	strh	r1, [r3, #4]
 80017e8:	719a      	strb	r2, [r3, #6]
    HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 80017ea:	486f      	ldr	r0, [pc, #444]	; (80019a8 <StartTask02+0x1dc>)
 80017ec:	f7fe fcf0 	bl	80001d0 <strlen>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	2364      	movs	r3, #100	; 0x64
 80017f6:	496c      	ldr	r1, [pc, #432]	; (80019a8 <StartTask02+0x1dc>)
 80017f8:	486d      	ldr	r0, [pc, #436]	; (80019b0 <StartTask02+0x1e4>)
 80017fa:	f002 fe47 	bl	800448c <HAL_UART_Transmit>
    //ascii display

    int x_char_index;
    int z_char_index;

    int disp_accum_x = x_accum / X_ANGLE_CONV;
 80017fe:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <StartTask02+0x1e8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a6d      	ldr	r2, [pc, #436]	; (80019b8 <StartTask02+0x1ec>)
 8001804:	fb82 1203 	smull	r1, r2, r2, r3
 8001808:	1492      	asrs	r2, r2, #18
 800180a:	17db      	asrs	r3, r3, #31
 800180c:	1a9b      	subs	r3, r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
    int disp_accum_y = y_accum / Y_ANGLE_CONV;
 8001810:	4b6a      	ldr	r3, [pc, #424]	; (80019bc <StartTask02+0x1f0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a6a      	ldr	r2, [pc, #424]	; (80019c0 <StartTask02+0x1f4>)
 8001816:	fb82 1203 	smull	r1, r2, r2, r3
 800181a:	13d2      	asrs	r2, r2, #15
 800181c:	17db      	asrs	r3, r3, #31
 800181e:	1a9b      	subs	r3, r3, r2
 8001820:	617b      	str	r3, [r7, #20]
    int disp_accum_z = z_accum / Z_ANGLE_CONV;
 8001822:	4b68      	ldr	r3, [pc, #416]	; (80019c4 <StartTask02+0x1f8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a66      	ldr	r2, [pc, #408]	; (80019c0 <StartTask02+0x1f4>)
 8001828:	fb82 1203 	smull	r1, r2, r2, r3
 800182c:	13d2      	asrs	r2, r2, #15
 800182e:	17db      	asrs	r3, r3, #31
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	613b      	str	r3, [r7, #16]

    positions[0].x = center.x + (disp_accum_x * x_dot_step);
 8001834:	4b64      	ldr	r3, [pc, #400]	; (80019c8 <StartTask02+0x1fc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184a:	eddf 6a60 	vldr	s13, [pc, #384]	; 80019cc <StartTask02+0x200>
 800184e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185a:	ee17 2a90 	vmov	r2, s15
 800185e:	4b5c      	ldr	r3, [pc, #368]	; (80019d0 <StartTask02+0x204>)
 8001860:	601a      	str	r2, [r3, #0]
    positions[0].z = center.z + (disp_accum_z * z_dot_step);
 8001862:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <StartTask02+0x1fc>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	ee07 3a90 	vmov	s15, r3
 800186a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001878:	eddf 6a56 	vldr	s13, [pc, #344]	; 80019d4 <StartTask02+0x208>
 800187c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001888:	ee17 2a90 	vmov	r2, s15
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <StartTask02+0x204>)
 800188e:	605a      	str	r2, [r3, #4]
    //for(int i = 0; i < 4; i++){
    //	temp_pos[i] = positions[i];
    //}


    	for(int i = 1; i <= ROWS_DISPLAY; i++){
 8001890:	2301      	movs	r3, #1
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
 8001894:	e05b      	b.n	800194e <StartTask02+0x182>

    		if((x_char_index = isXPositionOccupied(i)) != -1){
 8001896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001898:	f7ff faf0 	bl	8000e7c <isXPositionOccupied>
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d040      	beq.n	8001928 <StartTask02+0x15c>

					sprintf((char*)gbl_uart2_transmitBuffer,"\0");
 80018a6:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <StartTask02+0x1dc>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
					for (int j = 1; j <= COLS_DISPLAY; j++){
 80018ac:	2301      	movs	r3, #1
 80018ae:	623b      	str	r3, [r7, #32]
 80018b0:	e020      	b.n	80018f4 <StartTask02+0x128>
						if((z_char_index = isXZPositionOccupied(i,j)) != -1){
 80018b2:	6a39      	ldr	r1, [r7, #32]
 80018b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018b6:	f7ff fb03 	bl	8000ec0 <isXZPositionOccupied>
 80018ba:	60b8      	str	r0, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c2:	d008      	beq.n	80018d6 <StartTask02+0x10a>
							strcat((char*)gbl_uart2_transmitBuffer,returnPosChar(z_char_index));
 80018c4:	68b8      	ldr	r0, [r7, #8]
 80018c6:	f7ff fac1 	bl	8000e4c <returnPosChar>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4619      	mov	r1, r3
 80018ce:	4836      	ldr	r0, [pc, #216]	; (80019a8 <StartTask02+0x1dc>)
 80018d0:	f006 f8ea 	bl	8007aa8 <strcat>
 80018d4:	e00b      	b.n	80018ee <StartTask02+0x122>
							//z_char_index_tick = z_char_index;
						} else {
							strcat((char*)gbl_uart2_transmitBuffer,"-");
 80018d6:	4834      	ldr	r0, [pc, #208]	; (80019a8 <StartTask02+0x1dc>)
 80018d8:	f7fe fc7a 	bl	80001d0 <strlen>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <StartTask02+0x1dc>)
 80018e2:	4413      	add	r3, r2
 80018e4:	493c      	ldr	r1, [pc, #240]	; (80019d8 <StartTask02+0x20c>)
 80018e6:	461a      	mov	r2, r3
 80018e8:	460b      	mov	r3, r1
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	8013      	strh	r3, [r2, #0]
					for (int j = 1; j <= COLS_DISPLAY; j++){
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	3301      	adds	r3, #1
 80018f2:	623b      	str	r3, [r7, #32]
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	2b29      	cmp	r3, #41	; 0x29
 80018f8:	dddb      	ble.n	80018b2 <StartTask02+0xe6>
						}
					}

    			strcat((char*)gbl_uart2_transmitBuffer,"\r\n");
 80018fa:	482b      	ldr	r0, [pc, #172]	; (80019a8 <StartTask02+0x1dc>)
 80018fc:	f7fe fc68 	bl	80001d0 <strlen>
 8001900:	4603      	mov	r3, r0
 8001902:	461a      	mov	r2, r3
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <StartTask02+0x1dc>)
 8001906:	4413      	add	r3, r2
 8001908:	4a34      	ldr	r2, [pc, #208]	; (80019dc <StartTask02+0x210>)
 800190a:	8811      	ldrh	r1, [r2, #0]
 800190c:	7892      	ldrb	r2, [r2, #2]
 800190e:	8019      	strh	r1, [r3, #0]
 8001910:	709a      	strb	r2, [r3, #2]
    			HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8001912:	4825      	ldr	r0, [pc, #148]	; (80019a8 <StartTask02+0x1dc>)
 8001914:	f7fe fc5c 	bl	80001d0 <strlen>
 8001918:	4603      	mov	r3, r0
 800191a:	b29a      	uxth	r2, r3
 800191c:	2364      	movs	r3, #100	; 0x64
 800191e:	4922      	ldr	r1, [pc, #136]	; (80019a8 <StartTask02+0x1dc>)
 8001920:	4823      	ldr	r0, [pc, #140]	; (80019b0 <StartTask02+0x1e4>)
 8001922:	f002 fdb3 	bl	800448c <HAL_UART_Transmit>
 8001926:	e00f      	b.n	8001948 <StartTask02+0x17c>
    		} else {

    				sprintf((char*)gbl_uart2_transmitBuffer,"%.*s\r\n", COLS_DISPLAY, "--------------------------------------------------------------------------");
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <StartTask02+0x214>)
 800192a:	2229      	movs	r2, #41	; 0x29
 800192c:	492d      	ldr	r1, [pc, #180]	; (80019e4 <StartTask02+0x218>)
 800192e:	481e      	ldr	r0, [pc, #120]	; (80019a8 <StartTask02+0x1dc>)
 8001930:	f006 f89a 	bl	8007a68 <siprintf>
    				HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8001934:	481c      	ldr	r0, [pc, #112]	; (80019a8 <StartTask02+0x1dc>)
 8001936:	f7fe fc4b 	bl	80001d0 <strlen>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	2364      	movs	r3, #100	; 0x64
 8001940:	4919      	ldr	r1, [pc, #100]	; (80019a8 <StartTask02+0x1dc>)
 8001942:	481b      	ldr	r0, [pc, #108]	; (80019b0 <StartTask02+0x1e4>)
 8001944:	f002 fda2 	bl	800448c <HAL_UART_Transmit>
    	for(int i = 1; i <= ROWS_DISPLAY; i++){
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	3301      	adds	r3, #1
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	2b15      	cmp	r3, #21
 8001952:	dda0      	ble.n	8001896 <StartTask02+0xca>
    		}

    	}

    	for(int i = 3; i > 0; i--){
 8001954:	2303      	movs	r3, #3
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	e00f      	b.n	800197a <StartTask02+0x1ae>
    		positions[i] = positions[i - 1];
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	1e5a      	subs	r2, r3, #1
 800195e:	481c      	ldr	r0, [pc, #112]	; (80019d0 <StartTask02+0x204>)
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	491b      	ldr	r1, [pc, #108]	; (80019d0 <StartTask02+0x204>)
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4403      	add	r3, r0
 8001968:	00d2      	lsls	r2, r2, #3
 800196a:	440a      	add	r2, r1
 800196c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001970:	e883 0003 	stmia.w	r3, {r0, r1}
    	for(int i = 3; i > 0; i--){
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	3b01      	subs	r3, #1
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	2b00      	cmp	r3, #0
 800197e:	dcec      	bgt.n	800195a <StartTask02+0x18e>
    	}

    sprintf((char*)gbl_uart2_transmitBuffer,"X:%d   \r\nY:%d   \r\nZ:%d   \r\n", disp_accum_x, disp_accum_y, disp_accum_z);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4917      	ldr	r1, [pc, #92]	; (80019e8 <StartTask02+0x21c>)
 800198a:	4807      	ldr	r0, [pc, #28]	; (80019a8 <StartTask02+0x1dc>)
 800198c:	f006 f86c 	bl	8007a68 <siprintf>
    HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <StartTask02+0x1dc>)
 8001992:	f7fe fc1d 	bl	80001d0 <strlen>
 8001996:	4603      	mov	r3, r0
 8001998:	b29a      	uxth	r2, r3
 800199a:	2364      	movs	r3, #100	; 0x64
 800199c:	4902      	ldr	r1, [pc, #8]	; (80019a8 <StartTask02+0x1dc>)
 800199e:	4804      	ldr	r0, [pc, #16]	; (80019b0 <StartTask02+0x1e4>)
 80019a0:	f002 fd74 	bl	800448c <HAL_UART_Transmit>
  {
 80019a4:	e716      	b.n	80017d4 <StartTask02+0x8>
 80019a6:	bf00      	nop
 80019a8:	20001b80 	.word	0x20001b80
 80019ac:	080082d0 	.word	0x080082d0
 80019b0:	20001bf0 	.word	0x20001bf0
 80019b4:	20000138 	.word	0x20000138
 80019b8:	425f14cf 	.word	0x425f14cf
 80019bc:	2000013c 	.word	0x2000013c
 80019c0:	08ad88b7 	.word	0x08ad88b7
 80019c4:	20000140 	.word	0x20000140
 80019c8:	20001b68 	.word	0x20001b68
 80019cc:	3e6eeeef 	.word	0x3e6eeeef
 80019d0:	20001bd0 	.word	0x20001bd0
 80019d4:	3ee93e94 	.word	0x3ee93e94
 80019d8:	080082d8 	.word	0x080082d8
 80019dc:	080082dc 	.word	0x080082dc
 80019e0:	080082e0 	.word	0x080082e0
 80019e4:	0800832c 	.word	0x0800832c
 80019e8:	08008334 	.word	0x08008334

080019ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019fe:	f000 fa79 	bl	8001ef4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40012c00 	.word	0x40012c00

08001a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2a:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6613      	str	r3, [r2, #96]	; 0x60
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a48:	6593      	str	r3, [r2, #88]	; 0x58
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	210f      	movs	r1, #15
 8001a5a:	f06f 0001 	mvn.w	r0, #1
 8001a5e:	f000 fb1f 	bl	80020a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000

08001a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	; 0x30
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a2e      	ldr	r2, [pc, #184]	; (8001b48 <HAL_I2C_MspInit+0xd8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d128      	bne.n	8001ae4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <HAL_I2C_MspInit+0xdc>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	4a2d      	ldr	r2, [pc, #180]	; (8001b4c <HAL_I2C_MspInit+0xdc>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <HAL_I2C_MspInit+0xdc>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001aaa:	23c0      	movs	r3, #192	; 0xc0
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aae:	2312      	movs	r3, #18
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aba:	2304      	movs	r3, #4
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4822      	ldr	r0, [pc, #136]	; (8001b50 <HAL_I2C_MspInit+0xe0>)
 8001ac6:	f000 fb15 	bl	80020f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_I2C_MspInit+0xdc>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	4a1f      	ldr	r2, [pc, #124]	; (8001b4c <HAL_I2C_MspInit+0xdc>)
 8001ad0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_I2C_MspInit+0xdc>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ae2:	e02d      	b.n	8001b40 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1a      	ldr	r2, [pc, #104]	; (8001b54 <HAL_I2C_MspInit+0xe4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d128      	bne.n	8001b40 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <HAL_I2C_MspInit+0xdc>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	4a16      	ldr	r2, [pc, #88]	; (8001b4c <HAL_I2C_MspInit+0xdc>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <HAL_I2C_MspInit+0xdc>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8001b06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0c:	2312      	movs	r3, #18
 8001b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b18:	2304      	movs	r3, #4
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	480b      	ldr	r0, [pc, #44]	; (8001b50 <HAL_I2C_MspInit+0xe0>)
 8001b24:	f000 fae6 	bl	80020f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_I2C_MspInit+0xdc>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_I2C_MspInit+0xdc>)
 8001b2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b32:	6593      	str	r3, [r2, #88]	; 0x58
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_I2C_MspInit+0xdc>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3730      	adds	r7, #48	; 0x30
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	48000400 	.word	0x48000400
 8001b54:	40005800 	.word	0x40005800

08001b58 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <HAL_RNG_MspInit+0x38>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d10b      	bne.n	8001b82 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_RNG_MspInit+0x3c>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <HAL_RNG_MspInit+0x3c>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <HAL_RNG_MspInit+0x3c>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	50060800 	.word	0x50060800
 8001b94:	40021000 	.word	0x40021000

08001b98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <HAL_SPI_MspInit+0x7c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d127      	bne.n	8001c0a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_SPI_MspInit+0x80>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_SPI_MspInit+0x80>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_SPI_MspInit+0x80>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_SPI_MspInit+0x80>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_SPI_MspInit+0x80>)
 8001bd8:	f043 0308 	orr.w	r3, r3, #8
 8001bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_SPI_MspInit+0x80>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001bea:	231a      	movs	r3, #26
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	; (8001c1c <HAL_SPI_MspInit+0x84>)
 8001c06:	f000 fa75 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	; 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40003800 	.word	0x40003800
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48000c00 	.word	0x48000c00

08001c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a17      	ldr	r2, [pc, #92]	; (8001c9c <HAL_UART_MspInit+0x7c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d127      	bne.n	8001c92 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <HAL_UART_MspInit+0x80>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	4a16      	ldr	r2, [pc, #88]	; (8001ca0 <HAL_UART_MspInit+0x80>)
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_UART_MspInit+0x80>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_UART_MspInit+0x80>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_UART_MspInit+0x80>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_UART_MspInit+0x80>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c72:	2360      	movs	r3, #96	; 0x60
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c82:	2307      	movs	r3, #7
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <HAL_UART_MspInit+0x84>)
 8001c8e:	f000 fa31 	bl	80020f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	; 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	48000c00 	.word	0x48000c00

08001ca8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001cb8:	2200      	movs	r2, #0
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	2019      	movs	r0, #25
 8001cbe:	f000 f9ef 	bl	80020a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8001cc2:	2019      	movs	r0, #25
 8001cc4:	f000 fa08 	bl	80020d8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_InitTick+0x9c>)
 8001cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ccc:	4a1d      	ldr	r2, [pc, #116]	; (8001d44 <HAL_InitTick+0x9c>)
 8001cce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cd2:	6613      	str	r3, [r2, #96]	; 0x60
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_InitTick+0x9c>)
 8001cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ce0:	f107 0210 	add.w	r2, r7, #16
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 fae6 	bl	80032bc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cf0:	f001 face 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 8001cf4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf8:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <HAL_InitTick+0xa0>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	0c9b      	lsrs	r3, r3, #18
 8001d00:	3b01      	subs	r3, #1
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_InitTick+0xa4>)
 8001d06:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <HAL_InitTick+0xa8>)
 8001d08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_InitTick+0xa4>)
 8001d0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d10:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d12:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <HAL_InitTick+0xa4>)
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <HAL_InitTick+0xa4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_InitTick+0xa4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d24:	4809      	ldr	r0, [pc, #36]	; (8001d4c <HAL_InitTick+0xa4>)
 8001d26:	f002 f903 	bl	8003f30 <HAL_TIM_Base_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d104      	bne.n	8001d3a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001d30:	4806      	ldr	r0, [pc, #24]	; (8001d4c <HAL_InitTick+0xa4>)
 8001d32:	f002 f933 	bl	8003f9c <HAL_TIM_Base_Start_IT>
 8001d36:	4603      	mov	r3, r0
 8001d38:	e000      	b.n	8001d3c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3730      	adds	r7, #48	; 0x30
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000
 8001d48:	431bde83 	.word	0x431bde83
 8001d4c:	20001c70 	.word	0x20001c70
 8001d50:	40012c00 	.word	0x40012c00

08001d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <MemManage_Handler+0x4>

08001d6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d8e:	f002 f92f 	bl	8003ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20001c70 	.word	0x20001c70

08001d9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <_sbrk+0x50>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <_sbrk+0x16>
		heap_end = &end;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <_sbrk+0x50>)
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <_sbrk+0x54>)
 8001db0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <_sbrk+0x50>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <_sbrk+0x50>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	466a      	mov	r2, sp
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d907      	bls.n	8001dd6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001dc6:	f005 fe11 	bl	80079ec <__errno>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	230c      	movs	r3, #12
 8001dce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	e006      	b.n	8001de4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <_sbrk+0x50>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a03      	ldr	r2, [pc, #12]	; (8001dec <_sbrk+0x50>)
 8001de0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000144 	.word	0x20000144
 8001df0:	20001cf8 	.word	0x20001cf8

08001df4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <SystemInit+0x64>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	4a16      	ldr	r2, [pc, #88]	; (8001e58 <SystemInit+0x64>)
 8001e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <SystemInit+0x68>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <SystemInit+0x68>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <SystemInit+0x68>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <SystemInit+0x68>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <SystemInit+0x68>)
 8001e20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <SystemInit+0x68>)
 8001e2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <SystemInit+0x68>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <SystemInit+0x68>)
 8001e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <SystemInit+0x68>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <SystemInit+0x64>)
 8001e46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e4a:	609a      	str	r2, [r3, #8]
#endif
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00
 8001e5c:	40021000 	.word	0x40021000

08001e60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e66:	e003      	b.n	8001e70 <LoopCopyDataInit>

08001e68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e6e:	3104      	adds	r1, #4

08001e70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e70:	480b      	ldr	r0, [pc, #44]	; (8001ea0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e78:	d3f6      	bcc.n	8001e68 <CopyDataInit>
	ldr	r2, =_sbss
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e7c:	e002      	b.n	8001e84 <LoopFillZerobss>

08001e7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e80:	f842 3b04 	str.w	r3, [r2], #4

08001e84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <LoopForever+0x16>)
	cmp	r2, r3
 8001e86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e88:	d3f9      	bcc.n	8001e7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e8a:	f7ff ffb3 	bl	8001df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f005 fdb3 	bl	80079f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e92:	f7ff f841 	bl	8000f18 <main>

08001e96 <LoopForever>:

LoopForever:
    b LoopForever
 8001e96:	e7fe      	b.n	8001e96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e98:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001e9c:	08008440 	.word	0x08008440
	ldr	r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ea4:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 8001ea8:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 8001eac:	20001cf8 	.word	0x20001cf8

08001eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC1_2_IRQHandler>
	...

08001eb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <HAL_Init+0x3c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <HAL_Init+0x3c>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eca:	2003      	movs	r0, #3
 8001ecc:	f000 f8dd 	bl	800208a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff fee9 	bl	8001ca8 <HAL_InitTick>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	e001      	b.n	8001ee6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ee2:	f7ff fd9d 	bl	8001a20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40022000 	.word	0x40022000

08001ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_IncTick+0x1c>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_IncTick+0x20>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4413      	add	r3, r2
 8001f02:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <HAL_IncTick+0x1c>)
 8001f04:	6013      	str	r3, [r2, #0]
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	20001cb0 	.word	0x20001cb0
 8001f14:	2000003c 	.word	0x2000003c

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20001cb0 	.word	0x20001cb0

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db0b      	blt.n	8001fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 021f 	and.w	r2, r3, #31
 8001fac:	4907      	ldr	r1, [pc, #28]	; (8001fcc <__NVIC_EnableIRQ+0x38>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	db0a      	blt.n	8001ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	490c      	ldr	r1, [pc, #48]	; (800201c <__NVIC_SetPriority+0x4c>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	0112      	lsls	r2, r2, #4
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff8:	e00a      	b.n	8002010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4908      	ldr	r1, [pc, #32]	; (8002020 <__NVIC_SetPriority+0x50>)
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3b04      	subs	r3, #4
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	440b      	add	r3, r1
 800200e:	761a      	strb	r2, [r3, #24]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	bf28      	it	cs
 8002042:	2304      	movcs	r3, #4
 8002044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	2b06      	cmp	r3, #6
 800204c:	d902      	bls.n	8002054 <NVIC_EncodePriority+0x30>
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3b03      	subs	r3, #3
 8002052:	e000      	b.n	8002056 <NVIC_EncodePriority+0x32>
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	f04f 32ff 	mov.w	r2, #4294967295
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	43d9      	mvns	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	4313      	orrs	r3, r2
         );
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ff4c 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020b2:	f7ff ff61 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020b6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	6978      	ldr	r0, [r7, #20]
 80020be:	f7ff ffb1 	bl	8002024 <NVIC_EncodePriority>
 80020c2:	4602      	mov	r2, r0
 80020c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff80 	bl	8001fd0 <__NVIC_SetPriority>
}
 80020d0:	bf00      	nop
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff ff54 	bl	8001f94 <__NVIC_EnableIRQ>
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002102:	e17f      	b.n	8002404 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2101      	movs	r1, #1
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8171 	beq.w	80023fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d00b      	beq.n	800213c <HAL_GPIO_Init+0x48>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d007      	beq.n	800213c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002130:	2b11      	cmp	r3, #17
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d130      	bne.n	800219e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002172:	2201      	movs	r2, #1
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 0201 	and.w	r2, r3, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d118      	bne.n	80021dc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021b0:	2201      	movs	r2, #1
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	f003 0201 	and.w	r2, r3, #1
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x128>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b12      	cmp	r3, #18
 800221a:	d123      	bne.n	8002264 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	08da      	lsrs	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3208      	adds	r2, #8
 8002224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	220f      	movs	r2, #15
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	08da      	lsrs	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3208      	adds	r2, #8
 800225e:	6939      	ldr	r1, [r7, #16]
 8002260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0203 	and.w	r2, r3, #3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80ac 	beq.w	80023fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a6:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <HAL_GPIO_Init+0x32c>)
 80022a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022aa:	4a5d      	ldr	r2, [pc, #372]	; (8002420 <HAL_GPIO_Init+0x32c>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6613      	str	r3, [r2, #96]	; 0x60
 80022b2:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <HAL_GPIO_Init+0x32c>)
 80022b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022be:	4a59      	ldr	r2, [pc, #356]	; (8002424 <HAL_GPIO_Init+0x330>)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3302      	adds	r3, #2
 80022c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	220f      	movs	r2, #15
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022e8:	d025      	beq.n	8002336 <HAL_GPIO_Init+0x242>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4e      	ldr	r2, [pc, #312]	; (8002428 <HAL_GPIO_Init+0x334>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01f      	beq.n	8002332 <HAL_GPIO_Init+0x23e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4d      	ldr	r2, [pc, #308]	; (800242c <HAL_GPIO_Init+0x338>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d019      	beq.n	800232e <HAL_GPIO_Init+0x23a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4c      	ldr	r2, [pc, #304]	; (8002430 <HAL_GPIO_Init+0x33c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_GPIO_Init+0x236>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4b      	ldr	r2, [pc, #300]	; (8002434 <HAL_GPIO_Init+0x340>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d00d      	beq.n	8002326 <HAL_GPIO_Init+0x232>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <HAL_GPIO_Init+0x344>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <HAL_GPIO_Init+0x22e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a49      	ldr	r2, [pc, #292]	; (800243c <HAL_GPIO_Init+0x348>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_GPIO_Init+0x22a>
 800231a:	2306      	movs	r3, #6
 800231c:	e00c      	b.n	8002338 <HAL_GPIO_Init+0x244>
 800231e:	2307      	movs	r3, #7
 8002320:	e00a      	b.n	8002338 <HAL_GPIO_Init+0x244>
 8002322:	2305      	movs	r3, #5
 8002324:	e008      	b.n	8002338 <HAL_GPIO_Init+0x244>
 8002326:	2304      	movs	r3, #4
 8002328:	e006      	b.n	8002338 <HAL_GPIO_Init+0x244>
 800232a:	2303      	movs	r3, #3
 800232c:	e004      	b.n	8002338 <HAL_GPIO_Init+0x244>
 800232e:	2302      	movs	r3, #2
 8002330:	e002      	b.n	8002338 <HAL_GPIO_Init+0x244>
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_GPIO_Init+0x244>
 8002336:	2300      	movs	r3, #0
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	f002 0203 	and.w	r2, r2, #3
 800233e:	0092      	lsls	r2, r2, #2
 8002340:	4093      	lsls	r3, r2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002348:	4936      	ldr	r1, [pc, #216]	; (8002424 <HAL_GPIO_Init+0x330>)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	3302      	adds	r3, #2
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002356:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <HAL_GPIO_Init+0x34c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	43db      	mvns	r3, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800237a:	4a31      	ldr	r2, [pc, #196]	; (8002440 <HAL_GPIO_Init+0x34c>)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002380:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <HAL_GPIO_Init+0x34c>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023a4:	4a26      	ldr	r2, [pc, #152]	; (8002440 <HAL_GPIO_Init+0x34c>)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023aa:	4b25      	ldr	r3, [pc, #148]	; (8002440 <HAL_GPIO_Init+0x34c>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023ce:	4a1c      	ldr	r2, [pc, #112]	; (8002440 <HAL_GPIO_Init+0x34c>)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_GPIO_Init+0x34c>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023f8:	4a11      	ldr	r2, [pc, #68]	; (8002440 <HAL_GPIO_Init+0x34c>)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3301      	adds	r3, #1
 8002402:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa22 f303 	lsr.w	r3, r2, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	f47f ae78 	bne.w	8002104 <HAL_GPIO_Init+0x10>
  }
}
 8002414:	bf00      	nop
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40021000 	.word	0x40021000
 8002424:	40010000 	.word	0x40010000
 8002428:	48000400 	.word	0x48000400
 800242c:	48000800 	.word	0x48000800
 8002430:	48000c00 	.word	0x48000c00
 8002434:	48001000 	.word	0x48001000
 8002438:	48001400 	.word	0x48001400
 800243c:	48001800 	.word	0x48001800
 8002440:	40010400 	.word	0x40010400

08002444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
 8002450:	4613      	mov	r3, r2
 8002452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002454:	787b      	ldrb	r3, [r7, #1]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002460:	e002      	b.n	8002468 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002462:	887a      	ldrh	r2, [r7, #2]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e081      	b.n	800258a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff fae8 	bl	8001a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2224      	movs	r2, #36	; 0x24
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	e006      	b.n	80024fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d104      	bne.n	800250e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800250c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800251c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002520:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002530:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	ea42 0103 	orr.w	r1, r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	021a      	lsls	r2, r3, #8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69d9      	ldr	r1, [r3, #28]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1a      	ldr	r2, [r3, #32]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	d138      	bne.n	800261a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e032      	b.n	800261c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2224      	movs	r2, #36	; 0x24
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0201 	bic.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e000      	b.n	800261c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800261a:	2302      	movs	r3, #2
  }
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b20      	cmp	r3, #32
 800263c:	d139      	bne.n	80026b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002648:	2302      	movs	r3, #2
 800264a:	e033      	b.n	80026b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2224      	movs	r2, #36	; 0x24
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800267a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0201 	orr.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e000      	b.n	80026b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026b2:	2302      	movs	r3, #2
  }
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a04      	ldr	r2, [pc, #16]	; (80026dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ce:	6013      	str	r3, [r2, #0]
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40007000 	.word	0x40007000

080026e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40007000 	.word	0x40007000

080026fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800270a:	d130      	bne.n	800276e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002718:	d038      	beq.n	800278c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002722:	4a1e      	ldr	r2, [pc, #120]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002728:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800272a:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2232      	movs	r2, #50	; 0x32
 8002730:	fb02 f303 	mul.w	r3, r2, r3
 8002734:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002736:	fba2 2303 	umull	r2, r3, r2, r3
 800273a:	0c9b      	lsrs	r3, r3, #18
 800273c:	3301      	adds	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002740:	e002      	b.n	8002748 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3b01      	subs	r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002754:	d102      	bne.n	800275c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f2      	bne.n	8002742 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002768:	d110      	bne.n	800278c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e00f      	b.n	800278e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277a:	d007      	beq.n	800278c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002784:	4a05      	ldr	r2, [pc, #20]	; (800279c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800278a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40007000 	.word	0x40007000
 80027a0:	20000034 	.word	0x20000034
 80027a4:	431bde83 	.word	0x431bde83

080027a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e3d4      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ba:	4ba1      	ldr	r3, [pc, #644]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027c4:	4b9e      	ldr	r3, [pc, #632]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80e4 	beq.w	80029a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <HAL_RCC_OscConfig+0x4a>
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	f040 808b 	bne.w	8002900 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	f040 8087 	bne.w	8002900 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027f2:	4b93      	ldr	r3, [pc, #588]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_RCC_OscConfig+0x62>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e3ac      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1a      	ldr	r2, [r3, #32]
 800280e:	4b8c      	ldr	r3, [pc, #560]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d004      	beq.n	8002824 <HAL_RCC_OscConfig+0x7c>
 800281a:	4b89      	ldr	r3, [pc, #548]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002822:	e005      	b.n	8002830 <HAL_RCC_OscConfig+0x88>
 8002824:	4b86      	ldr	r3, [pc, #536]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002830:	4293      	cmp	r3, r2
 8002832:	d223      	bcs.n	800287c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fd71 	bl	8003320 <RCC_SetFlashLatencyFromMSIRange>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e38d      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002848:	4b7d      	ldr	r3, [pc, #500]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a7c      	ldr	r2, [pc, #496]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 800284e:	f043 0308 	orr.w	r3, r3, #8
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b7a      	ldr	r3, [pc, #488]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4977      	ldr	r1, [pc, #476]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	4972      	ldr	r1, [pc, #456]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
 800287a:	e025      	b.n	80028c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800287c:	4b70      	ldr	r3, [pc, #448]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a6f      	ldr	r2, [pc, #444]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002882:	f043 0308 	orr.w	r3, r3, #8
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b6d      	ldr	r3, [pc, #436]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	496a      	ldr	r1, [pc, #424]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800289a:	4b69      	ldr	r3, [pc, #420]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	4965      	ldr	r1, [pc, #404]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fd31 	bl	8003320 <RCC_SetFlashLatencyFromMSIRange>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e34d      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028c8:	f000 fc36 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80028cc:	4601      	mov	r1, r0
 80028ce:	4b5c      	ldr	r3, [pc, #368]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	4a5a      	ldr	r2, [pc, #360]	; (8002a44 <HAL_RCC_OscConfig+0x29c>)
 80028da:	5cd3      	ldrb	r3, [r2, r3]
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	fa21 f303 	lsr.w	r3, r1, r3
 80028e4:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_RCC_OscConfig+0x2a0>)
 80028e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028e8:	4b58      	ldr	r3, [pc, #352]	; (8002a4c <HAL_RCC_OscConfig+0x2a4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff f9db 	bl	8001ca8 <HAL_InitTick>
 80028f2:	4603      	mov	r3, r0
 80028f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d052      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	e331      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d032      	beq.n	800296e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002908:	4b4d      	ldr	r3, [pc, #308]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a4c      	ldr	r2, [pc, #304]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002914:	f7ff fb00 	bl	8001f18 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800291c:	f7ff fafc 	bl	8001f18 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e31a      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800292e:	4b44      	ldr	r3, [pc, #272]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a40      	ldr	r2, [pc, #256]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002940:	f043 0308 	orr.w	r3, r3, #8
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	493b      	ldr	r1, [pc, #236]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002958:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	4936      	ldr	r1, [pc, #216]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
 800296c:	e01a      	b.n	80029a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800296e:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a33      	ldr	r2, [pc, #204]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800297a:	f7ff facd 	bl	8001f18 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002982:	f7ff fac9 	bl	8001f18 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e2e7      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002994:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1f0      	bne.n	8002982 <HAL_RCC_OscConfig+0x1da>
 80029a0:	e000      	b.n	80029a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d074      	beq.n	8002a9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d005      	beq.n	80029c2 <HAL_RCC_OscConfig+0x21a>
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b0c      	cmp	r3, #12
 80029ba:	d10e      	bne.n	80029da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d10b      	bne.n	80029da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c2:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d064      	beq.n	8002a98 <HAL_RCC_OscConfig+0x2f0>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d160      	bne.n	8002a98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e2c4      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x24a>
 80029e4:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 80029ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	e01d      	b.n	8002a2e <HAL_RCC_OscConfig+0x286>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029fa:	d10c      	bne.n	8002a16 <HAL_RCC_OscConfig+0x26e>
 80029fc:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a0f      	ldr	r2, [pc, #60]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002a02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	e00b      	b.n	8002a2e <HAL_RCC_OscConfig+0x286>
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a09      	ldr	r2, [pc, #36]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a06      	ldr	r2, [pc, #24]	; (8002a40 <HAL_RCC_OscConfig+0x298>)
 8002a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a36:	f7ff fa6f 	bl	8001f18 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3c:	e011      	b.n	8002a62 <HAL_RCC_OscConfig+0x2ba>
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	080083b4 	.word	0x080083b4
 8002a48:	20000034 	.word	0x20000034
 8002a4c:	20000038 	.word	0x20000038
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a50:	f7ff fa62 	bl	8001f18 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e280      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a62:	4baf      	ldr	r3, [pc, #700]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x2a8>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7ff fa52 	bl	8001f18 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7ff fa4e 	bl	8001f18 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e26c      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a8a:	4ba5      	ldr	r3, [pc, #660]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x2d0>
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d060      	beq.n	8002b68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x310>
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d119      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d116      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab8:	4b99      	ldr	r3, [pc, #612]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x328>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e249      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	4b93      	ldr	r3, [pc, #588]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	4990      	ldr	r1, [pc, #576]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae4:	e040      	b.n	8002b68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d023      	beq.n	8002b36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aee:	4b8c      	ldr	r3, [pc, #560]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a8b      	ldr	r2, [pc, #556]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afa:	f7ff fa0d 	bl	8001f18 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b02:	f7ff fa09 	bl	8001f18 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e227      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b14:	4b82      	ldr	r3, [pc, #520]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b20:	4b7f      	ldr	r3, [pc, #508]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	061b      	lsls	r3, r3, #24
 8002b2e:	497c      	ldr	r1, [pc, #496]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
 8002b34:	e018      	b.n	8002b68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b36:	4b7a      	ldr	r3, [pc, #488]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a79      	ldr	r2, [pc, #484]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7ff f9e9 	bl	8001f18 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7ff f9e5 	bl	8001f18 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e203      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b5c:	4b70      	ldr	r3, [pc, #448]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f0      	bne.n	8002b4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d03c      	beq.n	8002bee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01c      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7c:	4b68      	ldr	r3, [pc, #416]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b82:	4a67      	ldr	r2, [pc, #412]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7ff f9c4 	bl	8001f18 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b94:	f7ff f9c0 	bl	8001f18 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e1de      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ba6:	4b5e      	ldr	r3, [pc, #376]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0ef      	beq.n	8002b94 <HAL_RCC_OscConfig+0x3ec>
 8002bb4:	e01b      	b.n	8002bee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb6:	4b5a      	ldr	r3, [pc, #360]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bbc:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc6:	f7ff f9a7 	bl	8001f18 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bce:	f7ff f9a3 	bl	8001f18 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1c1      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002be0:	4b4f      	ldr	r3, [pc, #316]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1ef      	bne.n	8002bce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80a6 	beq.w	8002d48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c00:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10d      	bne.n	8002c28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0c:	4b44      	ldr	r3, [pc, #272]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	4a43      	ldr	r2, [pc, #268]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c16:	6593      	str	r3, [r2, #88]	; 0x58
 8002c18:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c24:	2301      	movs	r3, #1
 8002c26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c28:	4b3e      	ldr	r3, [pc, #248]	; (8002d24 <HAL_RCC_OscConfig+0x57c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d118      	bne.n	8002c66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c34:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <HAL_RCC_OscConfig+0x57c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a3a      	ldr	r2, [pc, #232]	; (8002d24 <HAL_RCC_OscConfig+0x57c>)
 8002c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c40:	f7ff f96a 	bl	8001f18 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c48:	f7ff f966 	bl	8001f18 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e184      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5a:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <HAL_RCC_OscConfig+0x57c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d108      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4d8>
 8002c6e:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	4a2a      	ldr	r2, [pc, #168]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c7e:	e024      	b.n	8002cca <HAL_RCC_OscConfig+0x522>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	d110      	bne.n	8002caa <HAL_RCC_OscConfig+0x502>
 8002c88:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8e:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002c90:	f043 0304 	orr.w	r3, r3, #4
 8002c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	4a20      	ldr	r2, [pc, #128]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ca8:	e00f      	b.n	8002cca <HAL_RCC_OscConfig+0x522>
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002cb2:	f023 0301 	bic.w	r3, r3, #1
 8002cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cba:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002cc2:	f023 0304 	bic.w	r3, r3, #4
 8002cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d016      	beq.n	8002d00 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd2:	f7ff f921 	bl	8001f18 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7ff f91d 	bl	8001f18 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e139      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_OscConfig+0x578>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0ed      	beq.n	8002cda <HAL_RCC_OscConfig+0x532>
 8002cfe:	e01a      	b.n	8002d36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7ff f90a 	bl	8001f18 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d06:	e00f      	b.n	8002d28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7ff f906 	bl	8001f18 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d906      	bls.n	8002d28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e122      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d28:	4b90      	ldr	r3, [pc, #576]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e8      	bne.n	8002d08 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d36:	7ffb      	ldrb	r3, [r7, #31]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d105      	bne.n	8002d48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3c:	4b8b      	ldr	r3, [pc, #556]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	4a8a      	ldr	r2, [pc, #552]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8108 	beq.w	8002f62 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	f040 80d0 	bne.w	8002efc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d5c:	4b83      	ldr	r3, [pc, #524]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 0203 	and.w	r2, r3, #3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d130      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d127      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d11f      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d9c:	2a07      	cmp	r2, #7
 8002d9e:	bf14      	ite	ne
 8002da0:	2201      	movne	r2, #1
 8002da2:	2200      	moveq	r2, #0
 8002da4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d113      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	3b01      	subs	r3, #1
 8002db8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	085b      	lsrs	r3, r3, #1
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d06e      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d069      	beq.n	8002eac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dd8:	4b64      	ldr	r3, [pc, #400]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002de4:	4b61      	ldr	r3, [pc, #388]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0b7      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002df4:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a5c      	ldr	r2, [pc, #368]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dfe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e00:	f7ff f88a 	bl	8001f18 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e08:	f7ff f886 	bl	8001f18 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e0a4      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e1a:	4b54      	ldr	r3, [pc, #336]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e26:	4b51      	ldr	r3, [pc, #324]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	4b51      	ldr	r3, [pc, #324]	; (8002f70 <HAL_RCC_OscConfig+0x7c8>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e36:	3a01      	subs	r2, #1
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	4311      	orrs	r1, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e40:	0212      	lsls	r2, r2, #8
 8002e42:	4311      	orrs	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e48:	0852      	lsrs	r2, r2, #1
 8002e4a:	3a01      	subs	r2, #1
 8002e4c:	0552      	lsls	r2, r2, #21
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e54:	0852      	lsrs	r2, r2, #1
 8002e56:	3a01      	subs	r2, #1
 8002e58:	0652      	lsls	r2, r2, #25
 8002e5a:	4311      	orrs	r1, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e60:	0912      	lsrs	r2, r2, #4
 8002e62:	0452      	lsls	r2, r2, #17
 8002e64:	430a      	orrs	r2, r1
 8002e66:	4941      	ldr	r1, [pc, #260]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e6c:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a3e      	ldr	r2, [pc, #248]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e78:	4b3c      	ldr	r3, [pc, #240]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a3b      	ldr	r2, [pc, #236]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e84:	f7ff f848 	bl	8001f18 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7ff f844 	bl	8001f18 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e062      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9e:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eaa:	e05a      	b.n	8002f62 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e059      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb0:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d152      	bne.n	8002f62 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a2a      	ldr	r2, [pc, #168]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ec8:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ed4:	f7ff f820 	bl	8001f18 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002edc:	f7ff f81c 	bl	8001f18 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e03a      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eee:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x734>
 8002efa:	e032      	b.n	8002f62 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d02d      	beq.n	8002f5e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f02:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002f08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f0c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f0e:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d105      	bne.n	8002f26 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f1a:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	4a13      	ldr	r2, [pc, #76]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002f20:	f023 0303 	bic.w	r3, r3, #3
 8002f24:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f26:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	4a10      	ldr	r2, [pc, #64]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002f2c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f34:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fe ffef 	bl	8001f18 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3e:	f7fe ffeb 	bl	8001f18 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e009      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_RCC_OscConfig+0x7c4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f0      	bne.n	8002f3e <HAL_RCC_OscConfig+0x796>
 8002f5c:	e001      	b.n	8002f62 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3720      	adds	r7, #32
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	f99d808c 	.word	0xf99d808c

08002f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0c8      	b.n	800311a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b66      	ldr	r3, [pc, #408]	; (8003124 <HAL_RCC_ClockConfig+0x1b0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b63      	ldr	r3, [pc, #396]	; (8003124 <HAL_RCC_ClockConfig+0x1b0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 0207 	bic.w	r2, r3, #7
 8002f9e:	4961      	ldr	r1, [pc, #388]	; (8003124 <HAL_RCC_ClockConfig+0x1b0>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b5f      	ldr	r3, [pc, #380]	; (8003124 <HAL_RCC_ClockConfig+0x1b0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0b0      	b.n	800311a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d04c      	beq.n	800305e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d107      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fcc:	4b56      	ldr	r3, [pc, #344]	; (8003128 <HAL_RCC_ClockConfig+0x1b4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d121      	bne.n	800301c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e09e      	b.n	800311a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d107      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe4:	4b50      	ldr	r3, [pc, #320]	; (8003128 <HAL_RCC_ClockConfig+0x1b4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d115      	bne.n	800301c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e092      	b.n	800311a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ffc:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <HAL_RCC_ClockConfig+0x1b4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e086      	b.n	800311a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800300c:	4b46      	ldr	r3, [pc, #280]	; (8003128 <HAL_RCC_ClockConfig+0x1b4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e07e      	b.n	800311a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800301c:	4b42      	ldr	r3, [pc, #264]	; (8003128 <HAL_RCC_ClockConfig+0x1b4>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f023 0203 	bic.w	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	493f      	ldr	r1, [pc, #252]	; (8003128 <HAL_RCC_ClockConfig+0x1b4>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302e:	f7fe ff73 	bl	8001f18 <HAL_GetTick>
 8003032:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003034:	e00a      	b.n	800304c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003036:	f7fe ff6f 	bl	8001f18 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	; 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e066      	b.n	800311a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304c:	4b36      	ldr	r3, [pc, #216]	; (8003128 <HAL_RCC_ClockConfig+0x1b4>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 020c 	and.w	r2, r3, #12
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	429a      	cmp	r2, r3
 800305c:	d1eb      	bne.n	8003036 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d008      	beq.n	800307c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <HAL_RCC_ClockConfig+0x1b4>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	492c      	ldr	r1, [pc, #176]	; (8003128 <HAL_RCC_ClockConfig+0x1b4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800307c:	4b29      	ldr	r3, [pc, #164]	; (8003124 <HAL_RCC_ClockConfig+0x1b0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d210      	bcs.n	80030ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b26      	ldr	r3, [pc, #152]	; (8003124 <HAL_RCC_ClockConfig+0x1b0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 0207 	bic.w	r2, r3, #7
 8003092:	4924      	ldr	r1, [pc, #144]	; (8003124 <HAL_RCC_ClockConfig+0x1b0>)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b22      	ldr	r3, [pc, #136]	; (8003124 <HAL_RCC_ClockConfig+0x1b0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e036      	b.n	800311a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b8:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <HAL_RCC_ClockConfig+0x1b4>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4918      	ldr	r1, [pc, #96]	; (8003128 <HAL_RCC_ClockConfig+0x1b4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d6:	4b14      	ldr	r3, [pc, #80]	; (8003128 <HAL_RCC_ClockConfig+0x1b4>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4910      	ldr	r1, [pc, #64]	; (8003128 <HAL_RCC_ClockConfig+0x1b4>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ea:	f000 f825 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030ee:	4601      	mov	r1, r0
 80030f0:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <HAL_RCC_ClockConfig+0x1b4>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	4a0c      	ldr	r2, [pc, #48]	; (800312c <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	5cd3      	ldrb	r3, [r2, r3]
 80030fe:	f003 031f 	and.w	r3, r3, #31
 8003102:	fa21 f303 	lsr.w	r3, r1, r3
 8003106:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <HAL_RCC_ClockConfig+0x1bc>)
 8003108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fdca 	bl	8001ca8 <HAL_InitTick>
 8003114:	4603      	mov	r3, r0
 8003116:	72fb      	strb	r3, [r7, #11]

  return status;
 8003118:	7afb      	ldrb	r3, [r7, #11]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40022000 	.word	0x40022000
 8003128:	40021000 	.word	0x40021000
 800312c:	080083b4 	.word	0x080083b4
 8003130:	20000034 	.word	0x20000034
 8003134:	20000038 	.word	0x20000038

08003138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003146:	4b3d      	ldr	r3, [pc, #244]	; (800323c <HAL_RCC_GetSysClockFreq+0x104>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003150:	4b3a      	ldr	r3, [pc, #232]	; (800323c <HAL_RCC_GetSysClockFreq+0x104>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x34>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b0c      	cmp	r3, #12
 8003164:	d121      	bne.n	80031aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d11e      	bne.n	80031aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800316c:	4b33      	ldr	r3, [pc, #204]	; (800323c <HAL_RCC_GetSysClockFreq+0x104>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d107      	bne.n	8003188 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003178:	4b30      	ldr	r3, [pc, #192]	; (800323c <HAL_RCC_GetSysClockFreq+0x104>)
 800317a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	e005      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003188:	4b2c      	ldr	r3, [pc, #176]	; (800323c <HAL_RCC_GetSysClockFreq+0x104>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003194:	4a2a      	ldr	r2, [pc, #168]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10d      	bne.n	80031c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d102      	bne.n	80031b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031b0:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	e004      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031bc:	4b22      	ldr	r3, [pc, #136]	; (8003248 <HAL_RCC_GetSysClockFreq+0x110>)
 80031be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	d133      	bne.n	800322e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <HAL_RCC_GetSysClockFreq+0x104>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d002      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0xa4>
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d003      	beq.n	80031e2 <HAL_RCC_GetSysClockFreq+0xaa>
 80031da:	e005      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031dc:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031de:	617b      	str	r3, [r7, #20]
      break;
 80031e0:	e005      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_GetSysClockFreq+0x110>)
 80031e4:	617b      	str	r3, [r7, #20]
      break;
 80031e6:	e002      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	617b      	str	r3, [r7, #20]
      break;
 80031ec:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <HAL_RCC_GetSysClockFreq+0x104>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	3301      	adds	r3, #1
 80031fa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <HAL_RCC_GetSysClockFreq+0x104>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	fb02 f203 	mul.w	r2, r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003212:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_GetSysClockFreq+0x104>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	0e5b      	lsrs	r3, r3, #25
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	3301      	adds	r3, #1
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800322e:	69bb      	ldr	r3, [r7, #24]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3724      	adds	r7, #36	; 0x24
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40021000 	.word	0x40021000
 8003240:	080083cc 	.word	0x080083cc
 8003244:	00f42400 	.word	0x00f42400
 8003248:	007a1200 	.word	0x007a1200

0800324c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <HAL_RCC_GetHCLKFreq+0x14>)
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20000034 	.word	0x20000034

08003264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003268:	f7ff fff0 	bl	800324c <HAL_RCC_GetHCLKFreq>
 800326c:	4601      	mov	r1, r0
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	4a04      	ldr	r2, [pc, #16]	; (800328c <HAL_RCC_GetPCLK1Freq+0x28>)
 800327a:	5cd3      	ldrb	r3, [r2, r3]
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40021000 	.word	0x40021000
 800328c:	080083c4 	.word	0x080083c4

08003290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003294:	f7ff ffda 	bl	800324c <HAL_RCC_GetHCLKFreq>
 8003298:	4601      	mov	r1, r0
 800329a:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	0adb      	lsrs	r3, r3, #11
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032a6:	5cd3      	ldrb	r3, [r2, r3]
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40021000 	.word	0x40021000
 80032b8:	080083c4 	.word	0x080083c4

080032bc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	220f      	movs	r2, #15
 80032ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_RCC_GetClockConfig+0x5c>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0203 	and.w	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <HAL_RCC_GetClockConfig+0x5c>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <HAL_RCC_GetClockConfig+0x5c>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80032f0:	4b09      	ldr	r3, [pc, #36]	; (8003318 <HAL_RCC_GetClockConfig+0x5c>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	08db      	lsrs	r3, r3, #3
 80032f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80032fe:	4b07      	ldr	r3, [pc, #28]	; (800331c <HAL_RCC_GetClockConfig+0x60>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0207 	and.w	r2, r3, #7
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	601a      	str	r2, [r3, #0]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	40022000 	.word	0x40022000

08003320 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800332c:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003338:	f7ff f9d2 	bl	80026e0 <HAL_PWREx_GetVoltageRange>
 800333c:	6178      	str	r0, [r7, #20]
 800333e:	e014      	b.n	800336a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003340:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	4a24      	ldr	r2, [pc, #144]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334a:	6593      	str	r3, [r2, #88]	; 0x58
 800334c:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003358:	f7ff f9c2 	bl	80026e0 <HAL_PWREx_GetVoltageRange>
 800335c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800335e:	4b1e      	ldr	r3, [pc, #120]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003362:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003368:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003370:	d10b      	bne.n	800338a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b80      	cmp	r3, #128	; 0x80
 8003376:	d919      	bls.n	80033ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2ba0      	cmp	r3, #160	; 0xa0
 800337c:	d902      	bls.n	8003384 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800337e:	2302      	movs	r3, #2
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	e013      	b.n	80033ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003384:	2301      	movs	r3, #1
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	e010      	b.n	80033ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d902      	bls.n	8003396 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003390:	2303      	movs	r3, #3
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	e00a      	b.n	80033ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b80      	cmp	r3, #128	; 0x80
 800339a:	d102      	bne.n	80033a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800339c:	2302      	movs	r3, #2
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	e004      	b.n	80033ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b70      	cmp	r3, #112	; 0x70
 80033a6:	d101      	bne.n	80033ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033a8:	2301      	movs	r3, #1
 80033aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 0207 	bic.w	r2, r3, #7
 80033b4:	4909      	ldr	r1, [pc, #36]	; (80033dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033bc:	4b07      	ldr	r3, [pc, #28]	; (80033dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d001      	beq.n	80033ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40022000 	.word	0x40022000

080033e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033e8:	2300      	movs	r3, #0
 80033ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033ec:	2300      	movs	r3, #0
 80033ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d03f      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003404:	d01c      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340a:	d802      	bhi.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00e      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003410:	e01f      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003412:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003416:	d003      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003418:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800341c:	d01c      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800341e:	e018      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003420:	4b85      	ldr	r3, [pc, #532]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a84      	ldr	r2, [pc, #528]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800342c:	e015      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3304      	adds	r3, #4
 8003432:	2100      	movs	r1, #0
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fac9 	bl	80039cc <RCCEx_PLLSAI1_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800343e:	e00c      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3320      	adds	r3, #32
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fbb0 	bl	8003bac <RCCEx_PLLSAI2_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003450:	e003      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	74fb      	strb	r3, [r7, #19]
      break;
 8003456:	e000      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800345a:	7cfb      	ldrb	r3, [r7, #19]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10b      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003460:	4b75      	ldr	r3, [pc, #468]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003466:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800346e:	4972      	ldr	r1, [pc, #456]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003476:	e001      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d03f      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003490:	d01c      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003492:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003496:	d802      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00e      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xda>
 800349c:	e01f      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800349e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034a2:	d003      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80034a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034a8:	d01c      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80034aa:	e018      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034ac:	4b62      	ldr	r3, [pc, #392]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a61      	ldr	r2, [pc, #388]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034b8:	e015      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fa83 	bl	80039cc <RCCEx_PLLSAI1_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ca:	e00c      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3320      	adds	r3, #32
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fb6a 	bl	8003bac <RCCEx_PLLSAI2_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034dc:	e003      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	74fb      	strb	r3, [r7, #19]
      break;
 80034e2:	e000      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80034e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10b      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034ec:	4b52      	ldr	r3, [pc, #328]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034fa:	494f      	ldr	r1, [pc, #316]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003502:	e001      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a0 	beq.w	8003656 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800352a:	2300      	movs	r3, #0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00d      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003530:	4b41      	ldr	r3, [pc, #260]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	4a40      	ldr	r2, [pc, #256]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353a:	6593      	str	r3, [r2, #88]	; 0x58
 800353c:	4b3e      	ldr	r3, [pc, #248]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800353e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003548:	2301      	movs	r3, #1
 800354a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800354c:	4b3b      	ldr	r3, [pc, #236]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a3a      	ldr	r2, [pc, #232]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003556:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003558:	f7fe fcde 	bl	8001f18 <HAL_GetTick>
 800355c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800355e:	e009      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003560:	f7fe fcda 	bl	8001f18 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d902      	bls.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	74fb      	strb	r3, [r7, #19]
        break;
 8003572:	e005      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003574:	4b31      	ldr	r3, [pc, #196]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ef      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003580:	7cfb      	ldrb	r3, [r7, #19]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d15c      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003586:	4b2c      	ldr	r3, [pc, #176]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003590:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01f      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d019      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035a4:	4b24      	ldr	r3, [pc, #144]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035b0:	4b21      	ldr	r3, [pc, #132]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b6:	4a20      	ldr	r2, [pc, #128]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035d0:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fe fc99 	bl	8001f18 <HAL_GetTick>
 80035e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e8:	e00b      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ea:	f7fe fc95 	bl	8001f18 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d902      	bls.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003600:	e006      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003602:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ec      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10c      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003616:	4b08      	ldr	r3, [pc, #32]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003626:	4904      	ldr	r1, [pc, #16]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800362e:	e009      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	74bb      	strb	r3, [r7, #18]
 8003634:	e006      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003644:	7c7b      	ldrb	r3, [r7, #17]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d105      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364a:	4b9e      	ldr	r3, [pc, #632]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	4a9d      	ldr	r2, [pc, #628]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003654:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003662:	4b98      	ldr	r3, [pc, #608]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003668:	f023 0203 	bic.w	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	4994      	ldr	r1, [pc, #592]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003684:	4b8f      	ldr	r3, [pc, #572]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368a:	f023 020c 	bic.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	498c      	ldr	r1, [pc, #560]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036a6:	4b87      	ldr	r3, [pc, #540]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	4983      	ldr	r1, [pc, #524]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036c8:	4b7e      	ldr	r3, [pc, #504]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	497b      	ldr	r1, [pc, #492]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036ea:	4b76      	ldr	r3, [pc, #472]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f8:	4972      	ldr	r1, [pc, #456]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800370c:	4b6d      	ldr	r3, [pc, #436]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	496a      	ldr	r1, [pc, #424]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800372e:	4b65      	ldr	r3, [pc, #404]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003734:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373c:	4961      	ldr	r1, [pc, #388]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003750:	4b5c      	ldr	r3, [pc, #368]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375e:	4959      	ldr	r1, [pc, #356]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003772:	4b54      	ldr	r3, [pc, #336]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	4950      	ldr	r1, [pc, #320]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003794:	4b4b      	ldr	r3, [pc, #300]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	4948      	ldr	r1, [pc, #288]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037b6:	4b43      	ldr	r3, [pc, #268]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	493f      	ldr	r1, [pc, #252]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d028      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037d8:	4b3a      	ldr	r3, [pc, #232]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e6:	4937      	ldr	r1, [pc, #220]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037f6:	d106      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f8:	4b32      	ldr	r3, [pc, #200]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4a31      	ldr	r2, [pc, #196]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003802:	60d3      	str	r3, [r2, #12]
 8003804:	e011      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800380e:	d10c      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	2101      	movs	r1, #1
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f8d8 	bl	80039cc <RCCEx_PLLSAI1_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d028      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003836:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	491f      	ldr	r1, [pc, #124]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003854:	d106      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	4a1a      	ldr	r2, [pc, #104]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800385c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003860:	60d3      	str	r3, [r2, #12]
 8003862:	e011      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800386c:	d10c      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3304      	adds	r3, #4
 8003872:	2101      	movs	r1, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f000 f8a9 	bl	80039cc <RCCEx_PLLSAI1_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800387e:	7cfb      	ldrb	r3, [r7, #19]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d02b      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a2:	4908      	ldr	r1, [pc, #32]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038b2:	d109      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4a02      	ldr	r2, [pc, #8]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038be:	60d3      	str	r3, [r2, #12]
 80038c0:	e014      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	2101      	movs	r1, #1
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 f877 	bl	80039cc <RCCEx_PLLSAI1_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d02f      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038f8:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003906:	4928      	ldr	r1, [pc, #160]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003916:	d10d      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	2102      	movs	r1, #2
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f854 	bl	80039cc <RCCEx_PLLSAI1_Config>
 8003924:	4603      	mov	r3, r0
 8003926:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003928:	7cfb      	ldrb	r3, [r7, #19]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d014      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800392e:	7cfb      	ldrb	r3, [r7, #19]
 8003930:	74bb      	strb	r3, [r7, #18]
 8003932:	e011      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800393c:	d10c      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3320      	adds	r3, #32
 8003942:	2102      	movs	r1, #2
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f931 	bl	8003bac <RCCEx_PLLSAI2_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800394e:	7cfb      	ldrb	r3, [r7, #19]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003964:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003972:	490d      	ldr	r1, [pc, #52]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003996:	4904      	ldr	r1, [pc, #16]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800399e:	7cbb      	ldrb	r3, [r7, #18]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000

080039ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039b6:	f043 0304 	orr.w	r3, r3, #4
 80039ba:	6013      	str	r3, [r2, #0]
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000

080039cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039da:	4b73      	ldr	r3, [pc, #460]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d018      	beq.n	8003a18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039e6:	4b70      	ldr	r3, [pc, #448]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0203 	and.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d10d      	bne.n	8003a12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
       ||
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039fe:	4b6a      	ldr	r3, [pc, #424]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d044      	beq.n	8003a9c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	e041      	b.n	8003a9c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d00c      	beq.n	8003a3a <RCCEx_PLLSAI1_Config+0x6e>
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d013      	beq.n	8003a4c <RCCEx_PLLSAI1_Config+0x80>
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d120      	bne.n	8003a6a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a28:	4b5f      	ldr	r3, [pc, #380]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d11d      	bne.n	8003a70 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a38:	e01a      	b.n	8003a70 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d116      	bne.n	8003a74 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4a:	e013      	b.n	8003a74 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a4c:	4b56      	ldr	r3, [pc, #344]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10f      	bne.n	8003a78 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a58:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a68:	e006      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a6e:	e004      	b.n	8003a7a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003a70:	bf00      	nop
 8003a72:	e002      	b.n	8003a7a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003a74:	bf00      	nop
 8003a76:	e000      	b.n	8003a7a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003a78:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10d      	bne.n	8003a9c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a80:	4b49      	ldr	r3, [pc, #292]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6819      	ldr	r1, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	430b      	orrs	r3, r1
 8003a96:	4944      	ldr	r1, [pc, #272]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d17d      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003aa2:	4b41      	ldr	r3, [pc, #260]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a40      	ldr	r2, [pc, #256]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aae:	f7fe fa33 	bl	8001f18 <HAL_GetTick>
 8003ab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ab4:	e009      	b.n	8003aca <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ab6:	f7fe fa2f 	bl	8001f18 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d902      	bls.n	8003aca <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	73fb      	strb	r3, [r7, #15]
        break;
 8003ac8:	e005      	b.n	8003ad6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aca:	4b37      	ldr	r3, [pc, #220]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1ef      	bne.n	8003ab6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d160      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d111      	bne.n	8003b06 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae2:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6892      	ldr	r2, [r2, #8]
 8003af2:	0211      	lsls	r1, r2, #8
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	68d2      	ldr	r2, [r2, #12]
 8003af8:	0912      	lsrs	r2, r2, #4
 8003afa:	0452      	lsls	r2, r2, #17
 8003afc:	430a      	orrs	r2, r1
 8003afe:	492a      	ldr	r1, [pc, #168]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	610b      	str	r3, [r1, #16]
 8003b04:	e027      	b.n	8003b56 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d112      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b0c:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6892      	ldr	r2, [r2, #8]
 8003b1c:	0211      	lsls	r1, r2, #8
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6912      	ldr	r2, [r2, #16]
 8003b22:	0852      	lsrs	r2, r2, #1
 8003b24:	3a01      	subs	r2, #1
 8003b26:	0552      	lsls	r2, r2, #21
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	491f      	ldr	r1, [pc, #124]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	610b      	str	r3, [r1, #16]
 8003b30:	e011      	b.n	8003b56 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b32:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6892      	ldr	r2, [r2, #8]
 8003b42:	0211      	lsls	r1, r2, #8
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6952      	ldr	r2, [r2, #20]
 8003b48:	0852      	lsrs	r2, r2, #1
 8003b4a:	3a01      	subs	r2, #1
 8003b4c:	0652      	lsls	r2, r2, #25
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	4915      	ldr	r1, [pc, #84]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b56:	4b14      	ldr	r3, [pc, #80]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a13      	ldr	r2, [pc, #76]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b62:	f7fe f9d9 	bl	8001f18 <HAL_GetTick>
 8003b66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b68:	e009      	b.n	8003b7e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b6a:	f7fe f9d5 	bl	8001f18 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d902      	bls.n	8003b7e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	73fb      	strb	r3, [r7, #15]
          break;
 8003b7c:	e005      	b.n	8003b8a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0ef      	beq.n	8003b6a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d106      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	4903      	ldr	r1, [pc, #12]	; (8003ba8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000

08003bac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bba:	4b68      	ldr	r3, [pc, #416]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d018      	beq.n	8003bf8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bc6:	4b65      	ldr	r3, [pc, #404]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0203 	and.w	r2, r3, #3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d10d      	bne.n	8003bf2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
       ||
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bde:	4b5f      	ldr	r3, [pc, #380]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
       ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d044      	beq.n	8003c7c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
 8003bf6:	e041      	b.n	8003c7c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d00c      	beq.n	8003c1a <RCCEx_PLLSAI2_Config+0x6e>
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d013      	beq.n	8003c2c <RCCEx_PLLSAI2_Config+0x80>
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d120      	bne.n	8003c4a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c08:	4b54      	ldr	r3, [pc, #336]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d11d      	bne.n	8003c50 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c18:	e01a      	b.n	8003c50 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c1a:	4b50      	ldr	r3, [pc, #320]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d116      	bne.n	8003c54 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c2a:	e013      	b.n	8003c54 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c2c:	4b4b      	ldr	r3, [pc, #300]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10f      	bne.n	8003c58 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c38:	4b48      	ldr	r3, [pc, #288]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c48:	e006      	b.n	8003c58 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c4e:	e004      	b.n	8003c5a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003c50:	bf00      	nop
 8003c52:	e002      	b.n	8003c5a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003c54:	bf00      	nop
 8003c56:	e000      	b.n	8003c5a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003c58:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10d      	bne.n	8003c7c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c60:	4b3e      	ldr	r3, [pc, #248]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6819      	ldr	r1, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	430b      	orrs	r3, r1
 8003c76:	4939      	ldr	r1, [pc, #228]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d167      	bne.n	8003d52 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c82:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a35      	ldr	r2, [pc, #212]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c8e:	f7fe f943 	bl	8001f18 <HAL_GetTick>
 8003c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c94:	e009      	b.n	8003caa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c96:	f7fe f93f 	bl	8001f18 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d902      	bls.n	8003caa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	73fb      	strb	r3, [r7, #15]
        break;
 8003ca8:	e005      	b.n	8003cb6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003caa:	4b2c      	ldr	r3, [pc, #176]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1ef      	bne.n	8003c96 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d14a      	bne.n	8003d52 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d111      	bne.n	8003ce6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cc2:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6892      	ldr	r2, [r2, #8]
 8003cd2:	0211      	lsls	r1, r2, #8
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	68d2      	ldr	r2, [r2, #12]
 8003cd8:	0912      	lsrs	r2, r2, #4
 8003cda:	0452      	lsls	r2, r2, #17
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	491f      	ldr	r1, [pc, #124]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	614b      	str	r3, [r1, #20]
 8003ce4:	e011      	b.n	8003d0a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ce6:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6892      	ldr	r2, [r2, #8]
 8003cf6:	0211      	lsls	r1, r2, #8
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6912      	ldr	r2, [r2, #16]
 8003cfc:	0852      	lsrs	r2, r2, #1
 8003cfe:	3a01      	subs	r2, #1
 8003d00:	0652      	lsls	r2, r2, #25
 8003d02:	430a      	orrs	r2, r1
 8003d04:	4915      	ldr	r1, [pc, #84]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d0a:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a13      	ldr	r2, [pc, #76]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d16:	f7fe f8ff 	bl	8001f18 <HAL_GetTick>
 8003d1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d1c:	e009      	b.n	8003d32 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d1e:	f7fe f8fb 	bl	8001f18 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d902      	bls.n	8003d32 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	73fb      	strb	r3, [r7, #15]
          break;
 8003d30:	e005      	b.n	8003d3e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0ef      	beq.n	8003d1e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d106      	bne.n	8003d52 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	4903      	ldr	r1, [pc, #12]	; (8003d5c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40021000 	.word	0x40021000

08003d60 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e042      	b.n	8003df8 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	795b      	ldrb	r3, [r3, #5]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7fd fee8 	bl	8001b58 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0204 	orr.w	r2, r2, #4
 8003d9c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d104      	bne.n	8003db6 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2204      	movs	r2, #4
 8003db0:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e020      	b.n	8003df8 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003db6:	f7fe f8af 	bl	8001f18 <HAL_GetTick>
 8003dba:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003dbc:	e00e      	b.n	8003ddc <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003dbe:	f7fe f8ab 	bl	8001f18 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d907      	bls.n	8003ddc <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2204      	movs	r2, #4
 8003dd0:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e00d      	b.n	8003df8 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d0e9      	beq.n	8003dbe <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e07c      	b.n	8003f0c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d106      	bne.n	8003e32 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fd feb3 	bl	8001b98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2202      	movs	r2, #2
 8003e36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e48:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e52:	d902      	bls.n	8003e5a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e002      	b.n	8003e60 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e5e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e68:	d007      	beq.n	8003e7a <HAL_SPI_Init+0x7a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e72:	d002      	beq.n	8003e7a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e8a:	d903      	bls.n	8003e94 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
 8003e92:	e002      	b.n	8003e9a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	ea42 0103 	orr.w	r1, r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	0c1b      	lsrs	r3, r3, #16
 8003eda:	f003 0204 	and.w	r2, r3, #4
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	ea42 0103 	orr.w	r1, r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f22:	b2db      	uxtb	r3, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e01d      	b.n	8003f7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f815 	bl	8003f86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	f000 f986 	bl	8004280 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HAL_TIM_Base_Start_IT+0x50>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b06      	cmp	r3, #6
 8003fc4:	d00b      	beq.n	8003fde <HAL_TIM_Base_Start_IT+0x42>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d007      	beq.n	8003fde <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0201 	orr.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	00010007 	.word	0x00010007

08003ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b02      	cmp	r3, #2
 8004004:	d122      	bne.n	800404c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	d11b      	bne.n	800404c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0202 	mvn.w	r2, #2
 800401c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f905 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 8004038:	e005      	b.n	8004046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f8f7 	bl	800422e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f908 	bl	8004256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b04      	cmp	r3, #4
 8004058:	d122      	bne.n	80040a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d11b      	bne.n	80040a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0204 	mvn.w	r2, #4
 8004070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f8db 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 800408c:	e005      	b.n	800409a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f8cd 	bl	800422e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f8de 	bl	8004256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d122      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d11b      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0208 	mvn.w	r2, #8
 80040c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2204      	movs	r2, #4
 80040ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8b1 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 80040e0:	e005      	b.n	80040ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8a3 	bl	800422e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f8b4 	bl	8004256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d122      	bne.n	8004148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b10      	cmp	r3, #16
 800410e:	d11b      	bne.n	8004148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0210 	mvn.w	r2, #16
 8004118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2208      	movs	r2, #8
 800411e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f887 	bl	8004242 <HAL_TIM_IC_CaptureCallback>
 8004134:	e005      	b.n	8004142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f879 	bl	800422e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f88a 	bl	8004256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b01      	cmp	r3, #1
 8004154:	d10e      	bne.n	8004174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d107      	bne.n	8004174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0201 	mvn.w	r2, #1
 800416c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fc3c 	bl	80019ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d10e      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f914 	bl	80043c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ae:	d10e      	bne.n	80041ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	2b80      	cmp	r3, #128	; 0x80
 80041bc:	d107      	bne.n	80041ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f907 	bl	80043dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d8:	2b40      	cmp	r3, #64	; 0x40
 80041da:	d10e      	bne.n	80041fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	d107      	bne.n	80041fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f838 	bl	800426a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b20      	cmp	r3, #32
 8004206:	d10e      	bne.n	8004226 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b20      	cmp	r3, #32
 8004214:	d107      	bne.n	8004226 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f06f 0220 	mvn.w	r2, #32
 800421e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f8c7 	bl	80043b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a40      	ldr	r2, [pc, #256]	; (8004394 <TIM_Base_SetConfig+0x114>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d013      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429e:	d00f      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a3d      	ldr	r2, [pc, #244]	; (8004398 <TIM_Base_SetConfig+0x118>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00b      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a3c      	ldr	r2, [pc, #240]	; (800439c <TIM_Base_SetConfig+0x11c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d007      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a3b      	ldr	r2, [pc, #236]	; (80043a0 <TIM_Base_SetConfig+0x120>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <TIM_Base_SetConfig+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a3a      	ldr	r2, [pc, #232]	; (80043a4 <TIM_Base_SetConfig+0x124>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d108      	bne.n	80042d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a2f      	ldr	r2, [pc, #188]	; (8004394 <TIM_Base_SetConfig+0x114>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01f      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e0:	d01b      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2c      	ldr	r2, [pc, #176]	; (8004398 <TIM_Base_SetConfig+0x118>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d017      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2b      	ldr	r2, [pc, #172]	; (800439c <TIM_Base_SetConfig+0x11c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a2a      	ldr	r2, [pc, #168]	; (80043a0 <TIM_Base_SetConfig+0x120>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00f      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a29      	ldr	r2, [pc, #164]	; (80043a4 <TIM_Base_SetConfig+0x124>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00b      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a28      	ldr	r2, [pc, #160]	; (80043a8 <TIM_Base_SetConfig+0x128>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d007      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a27      	ldr	r2, [pc, #156]	; (80043ac <TIM_Base_SetConfig+0x12c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d003      	beq.n	800431a <TIM_Base_SetConfig+0x9a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a26      	ldr	r2, [pc, #152]	; (80043b0 <TIM_Base_SetConfig+0x130>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d108      	bne.n	800432c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a10      	ldr	r2, [pc, #64]	; (8004394 <TIM_Base_SetConfig+0x114>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00f      	beq.n	8004378 <TIM_Base_SetConfig+0xf8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a12      	ldr	r2, [pc, #72]	; (80043a4 <TIM_Base_SetConfig+0x124>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00b      	beq.n	8004378 <TIM_Base_SetConfig+0xf8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a11      	ldr	r2, [pc, #68]	; (80043a8 <TIM_Base_SetConfig+0x128>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <TIM_Base_SetConfig+0xf8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a10      	ldr	r2, [pc, #64]	; (80043ac <TIM_Base_SetConfig+0x12c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_Base_SetConfig+0xf8>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a0f      	ldr	r2, [pc, #60]	; (80043b0 <TIM_Base_SetConfig+0x130>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d103      	bne.n	8004380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	615a      	str	r2, [r3, #20]
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40013400 	.word	0x40013400
 80043a8:	40014000 	.word	0x40014000
 80043ac:	40014400 	.word	0x40014400
 80043b0:	40014800 	.word	0x40014800

080043b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e040      	b.n	8004484 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fd fc04 	bl	8001c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2224      	movs	r2, #36	; 0x24
 800441c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0201 	bic.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8c0 	bl	80045b4 <UART_SetConfig>
 8004434:	4603      	mov	r3, r0
 8004436:	2b01      	cmp	r3, #1
 8004438:	d101      	bne.n	800443e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e022      	b.n	8004484 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fc26 	bl	8004c98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800445a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800446a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fcad 	bl	8004ddc <UART_CheckIdleState>
 8004482:	4603      	mov	r3, r0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	; 0x28
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	4613      	mov	r3, r2
 800449a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	f040 8081 	bne.w	80045a8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <HAL_UART_Transmit+0x26>
 80044ac:	88fb      	ldrh	r3, [r7, #6]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e079      	b.n	80045aa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_UART_Transmit+0x38>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e072      	b.n	80045aa <HAL_UART_Transmit+0x11e>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2221      	movs	r2, #33	; 0x21
 80044d6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80044d8:	f7fd fd1e 	bl	8001f18 <HAL_GetTick>
 80044dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	88fa      	ldrh	r2, [r7, #6]
 80044e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	88fa      	ldrh	r2, [r7, #6]
 80044ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f6:	d108      	bne.n	800450a <HAL_UART_Transmit+0x7e>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d104      	bne.n	800450a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	61bb      	str	r3, [r7, #24]
 8004508:	e003      	b.n	8004512 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800450e:	2300      	movs	r3, #0
 8004510:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800451a:	e02d      	b.n	8004578 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	2180      	movs	r1, #128	; 0x80
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fc9d 	bl	8004e66 <UART_WaitOnFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e039      	b.n	80045aa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10b      	bne.n	8004554 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	881a      	ldrh	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004548:	b292      	uxth	r2, r2
 800454a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	3302      	adds	r3, #2
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	e008      	b.n	8004566 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	781a      	ldrb	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	b292      	uxth	r2, r2
 800455e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	3301      	adds	r3, #1
 8004564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1cb      	bne.n	800451c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2200      	movs	r2, #0
 800458c:	2140      	movs	r1, #64	; 0x40
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 fc69 	bl	8004e66 <UART_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e005      	b.n	80045aa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e000      	b.n	80045aa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80045a8:	2302      	movs	r3, #2
  }
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80045b8:	b08a      	sub	sp, #40	; 0x28
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	4313      	orrs	r3, r2
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	4bb8      	ldr	r3, [pc, #736]	; (80048cc <UART_SetConfig+0x318>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045f2:	430b      	orrs	r3, r1
 80045f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4aae      	ldr	r2, [pc, #696]	; (80048d0 <UART_SetConfig+0x31c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004622:	4313      	orrs	r3, r2
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004636:	430a      	orrs	r2, r1
 8004638:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4aa5      	ldr	r2, [pc, #660]	; (80048d4 <UART_SetConfig+0x320>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d126      	bne.n	8004692 <UART_SetConfig+0xde>
 8004644:	4ba4      	ldr	r3, [pc, #656]	; (80048d8 <UART_SetConfig+0x324>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b03      	cmp	r3, #3
 8004650:	d81a      	bhi.n	8004688 <UART_SetConfig+0xd4>
 8004652:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0xa4>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	08004669 	.word	0x08004669
 800465c:	08004679 	.word	0x08004679
 8004660:	08004671 	.word	0x08004671
 8004664:	08004681 	.word	0x08004681
 8004668:	2301      	movs	r3, #1
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466e:	e105      	b.n	800487c <UART_SetConfig+0x2c8>
 8004670:	2302      	movs	r3, #2
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004676:	e101      	b.n	800487c <UART_SetConfig+0x2c8>
 8004678:	2304      	movs	r3, #4
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e0fd      	b.n	800487c <UART_SetConfig+0x2c8>
 8004680:	2308      	movs	r3, #8
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004686:	e0f9      	b.n	800487c <UART_SetConfig+0x2c8>
 8004688:	2310      	movs	r3, #16
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468e:	bf00      	nop
 8004690:	e0f4      	b.n	800487c <UART_SetConfig+0x2c8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a91      	ldr	r2, [pc, #580]	; (80048dc <UART_SetConfig+0x328>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d138      	bne.n	800470e <UART_SetConfig+0x15a>
 800469c:	4b8e      	ldr	r3, [pc, #568]	; (80048d8 <UART_SetConfig+0x324>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d82c      	bhi.n	8004704 <UART_SetConfig+0x150>
 80046aa:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <UART_SetConfig+0xfc>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046e5 	.word	0x080046e5
 80046b4:	08004705 	.word	0x08004705
 80046b8:	08004705 	.word	0x08004705
 80046bc:	08004705 	.word	0x08004705
 80046c0:	080046f5 	.word	0x080046f5
 80046c4:	08004705 	.word	0x08004705
 80046c8:	08004705 	.word	0x08004705
 80046cc:	08004705 	.word	0x08004705
 80046d0:	080046ed 	.word	0x080046ed
 80046d4:	08004705 	.word	0x08004705
 80046d8:	08004705 	.word	0x08004705
 80046dc:	08004705 	.word	0x08004705
 80046e0:	080046fd 	.word	0x080046fd
 80046e4:	2300      	movs	r3, #0
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ea:	e0c7      	b.n	800487c <UART_SetConfig+0x2c8>
 80046ec:	2302      	movs	r3, #2
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f2:	e0c3      	b.n	800487c <UART_SetConfig+0x2c8>
 80046f4:	2304      	movs	r3, #4
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fa:	e0bf      	b.n	800487c <UART_SetConfig+0x2c8>
 80046fc:	2308      	movs	r3, #8
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004702:	e0bb      	b.n	800487c <UART_SetConfig+0x2c8>
 8004704:	2310      	movs	r3, #16
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470a:	bf00      	nop
 800470c:	e0b6      	b.n	800487c <UART_SetConfig+0x2c8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a73      	ldr	r2, [pc, #460]	; (80048e0 <UART_SetConfig+0x32c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d125      	bne.n	8004764 <UART_SetConfig+0x1b0>
 8004718:	4b6f      	ldr	r3, [pc, #444]	; (80048d8 <UART_SetConfig+0x324>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004722:	2b10      	cmp	r3, #16
 8004724:	d011      	beq.n	800474a <UART_SetConfig+0x196>
 8004726:	2b10      	cmp	r3, #16
 8004728:	d802      	bhi.n	8004730 <UART_SetConfig+0x17c>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <UART_SetConfig+0x186>
 800472e:	e014      	b.n	800475a <UART_SetConfig+0x1a6>
 8004730:	2b20      	cmp	r3, #32
 8004732:	d006      	beq.n	8004742 <UART_SetConfig+0x18e>
 8004734:	2b30      	cmp	r3, #48	; 0x30
 8004736:	d00c      	beq.n	8004752 <UART_SetConfig+0x19e>
 8004738:	e00f      	b.n	800475a <UART_SetConfig+0x1a6>
 800473a:	2300      	movs	r3, #0
 800473c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004740:	e09c      	b.n	800487c <UART_SetConfig+0x2c8>
 8004742:	2302      	movs	r3, #2
 8004744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004748:	e098      	b.n	800487c <UART_SetConfig+0x2c8>
 800474a:	2304      	movs	r3, #4
 800474c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004750:	e094      	b.n	800487c <UART_SetConfig+0x2c8>
 8004752:	2308      	movs	r3, #8
 8004754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004758:	e090      	b.n	800487c <UART_SetConfig+0x2c8>
 800475a:	2310      	movs	r3, #16
 800475c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004760:	bf00      	nop
 8004762:	e08b      	b.n	800487c <UART_SetConfig+0x2c8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a5e      	ldr	r2, [pc, #376]	; (80048e4 <UART_SetConfig+0x330>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d125      	bne.n	80047ba <UART_SetConfig+0x206>
 800476e:	4b5a      	ldr	r3, [pc, #360]	; (80048d8 <UART_SetConfig+0x324>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004778:	2b40      	cmp	r3, #64	; 0x40
 800477a:	d011      	beq.n	80047a0 <UART_SetConfig+0x1ec>
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d802      	bhi.n	8004786 <UART_SetConfig+0x1d2>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <UART_SetConfig+0x1dc>
 8004784:	e014      	b.n	80047b0 <UART_SetConfig+0x1fc>
 8004786:	2b80      	cmp	r3, #128	; 0x80
 8004788:	d006      	beq.n	8004798 <UART_SetConfig+0x1e4>
 800478a:	2bc0      	cmp	r3, #192	; 0xc0
 800478c:	d00c      	beq.n	80047a8 <UART_SetConfig+0x1f4>
 800478e:	e00f      	b.n	80047b0 <UART_SetConfig+0x1fc>
 8004790:	2300      	movs	r3, #0
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e071      	b.n	800487c <UART_SetConfig+0x2c8>
 8004798:	2302      	movs	r3, #2
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479e:	e06d      	b.n	800487c <UART_SetConfig+0x2c8>
 80047a0:	2304      	movs	r3, #4
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a6:	e069      	b.n	800487c <UART_SetConfig+0x2c8>
 80047a8:	2308      	movs	r3, #8
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ae:	e065      	b.n	800487c <UART_SetConfig+0x2c8>
 80047b0:	2310      	movs	r3, #16
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b6:	bf00      	nop
 80047b8:	e060      	b.n	800487c <UART_SetConfig+0x2c8>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a4a      	ldr	r2, [pc, #296]	; (80048e8 <UART_SetConfig+0x334>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d129      	bne.n	8004818 <UART_SetConfig+0x264>
 80047c4:	4b44      	ldr	r3, [pc, #272]	; (80048d8 <UART_SetConfig+0x324>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d2:	d014      	beq.n	80047fe <UART_SetConfig+0x24a>
 80047d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d8:	d802      	bhi.n	80047e0 <UART_SetConfig+0x22c>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <UART_SetConfig+0x23a>
 80047de:	e016      	b.n	800480e <UART_SetConfig+0x25a>
 80047e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e4:	d007      	beq.n	80047f6 <UART_SetConfig+0x242>
 80047e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ea:	d00c      	beq.n	8004806 <UART_SetConfig+0x252>
 80047ec:	e00f      	b.n	800480e <UART_SetConfig+0x25a>
 80047ee:	2300      	movs	r3, #0
 80047f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f4:	e042      	b.n	800487c <UART_SetConfig+0x2c8>
 80047f6:	2302      	movs	r3, #2
 80047f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fc:	e03e      	b.n	800487c <UART_SetConfig+0x2c8>
 80047fe:	2304      	movs	r3, #4
 8004800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004804:	e03a      	b.n	800487c <UART_SetConfig+0x2c8>
 8004806:	2308      	movs	r3, #8
 8004808:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480c:	e036      	b.n	800487c <UART_SetConfig+0x2c8>
 800480e:	2310      	movs	r3, #16
 8004810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004814:	bf00      	nop
 8004816:	e031      	b.n	800487c <UART_SetConfig+0x2c8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a2c      	ldr	r2, [pc, #176]	; (80048d0 <UART_SetConfig+0x31c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d129      	bne.n	8004876 <UART_SetConfig+0x2c2>
 8004822:	4b2d      	ldr	r3, [pc, #180]	; (80048d8 <UART_SetConfig+0x324>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004830:	d014      	beq.n	800485c <UART_SetConfig+0x2a8>
 8004832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004836:	d802      	bhi.n	800483e <UART_SetConfig+0x28a>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <UART_SetConfig+0x298>
 800483c:	e016      	b.n	800486c <UART_SetConfig+0x2b8>
 800483e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004842:	d007      	beq.n	8004854 <UART_SetConfig+0x2a0>
 8004844:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004848:	d00c      	beq.n	8004864 <UART_SetConfig+0x2b0>
 800484a:	e00f      	b.n	800486c <UART_SetConfig+0x2b8>
 800484c:	2300      	movs	r3, #0
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004852:	e013      	b.n	800487c <UART_SetConfig+0x2c8>
 8004854:	2302      	movs	r3, #2
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485a:	e00f      	b.n	800487c <UART_SetConfig+0x2c8>
 800485c:	2304      	movs	r3, #4
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004862:	e00b      	b.n	800487c <UART_SetConfig+0x2c8>
 8004864:	2308      	movs	r3, #8
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486a:	e007      	b.n	800487c <UART_SetConfig+0x2c8>
 800486c:	2310      	movs	r3, #16
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004872:	bf00      	nop
 8004874:	e002      	b.n	800487c <UART_SetConfig+0x2c8>
 8004876:	2310      	movs	r3, #16
 8004878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <UART_SetConfig+0x31c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	f040 80fe 	bne.w	8004a84 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800488c:	2b08      	cmp	r3, #8
 800488e:	d837      	bhi.n	8004900 <UART_SetConfig+0x34c>
 8004890:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <UART_SetConfig+0x2e4>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048bd 	.word	0x080048bd
 800489c:	08004901 	.word	0x08004901
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	08004901 	.word	0x08004901
 80048a8:	080048f1 	.word	0x080048f1
 80048ac:	08004901 	.word	0x08004901
 80048b0:	08004901 	.word	0x08004901
 80048b4:	08004901 	.word	0x08004901
 80048b8:	080048f9 	.word	0x080048f9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80048bc:	f7fe fcd2 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 80048c0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048c2:	e020      	b.n	8004906 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <UART_SetConfig+0x338>)
 80048c6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048c8:	e01d      	b.n	8004906 <UART_SetConfig+0x352>
 80048ca:	bf00      	nop
 80048cc:	efff69f3 	.word	0xefff69f3
 80048d0:	40008000 	.word	0x40008000
 80048d4:	40013800 	.word	0x40013800
 80048d8:	40021000 	.word	0x40021000
 80048dc:	40004400 	.word	0x40004400
 80048e0:	40004800 	.word	0x40004800
 80048e4:	40004c00 	.word	0x40004c00
 80048e8:	40005000 	.word	0x40005000
 80048ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80048f0:	f7fe fc22 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80048f4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048f6:	e006      	b.n	8004906 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80048f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80048fe:	e002      	b.n	8004906 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	76fb      	strb	r3, [r7, #27]
        break;
 8004904:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 81b9 	beq.w	8004c80 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	4413      	add	r3, r2
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	429a      	cmp	r2, r3
 800491c:	d305      	bcc.n	800492a <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	429a      	cmp	r2, r3
 8004928:	d902      	bls.n	8004930 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	76fb      	strb	r3, [r7, #27]
 800492e:	e1a7      	b.n	8004c80 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004930:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004934:	2b08      	cmp	r3, #8
 8004936:	f200 8092 	bhi.w	8004a5e <UART_SetConfig+0x4aa>
 800493a:	a201      	add	r2, pc, #4	; (adr r2, 8004940 <UART_SetConfig+0x38c>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004965 	.word	0x08004965
 8004944:	08004a5f 	.word	0x08004a5f
 8004948:	080049b3 	.word	0x080049b3
 800494c:	08004a5f 	.word	0x08004a5f
 8004950:	080049e7 	.word	0x080049e7
 8004954:	08004a5f 	.word	0x08004a5f
 8004958:	08004a5f 	.word	0x08004a5f
 800495c:	08004a5f 	.word	0x08004a5f
 8004960:	08004a35 	.word	0x08004a35
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004964:	f7fe fc7e 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 8004968:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4619      	mov	r1, r3
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	f04f 0400 	mov.w	r4, #0
 800497a:	0214      	lsls	r4, r2, #8
 800497c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004980:	020b      	lsls	r3, r1, #8
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6852      	ldr	r2, [r2, #4]
 8004986:	0852      	lsrs	r2, r2, #1
 8004988:	4611      	mov	r1, r2
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	eb13 0b01 	adds.w	fp, r3, r1
 8004992:	eb44 0c02 	adc.w	ip, r4, r2
 8004996:	4658      	mov	r0, fp
 8004998:	4661      	mov	r1, ip
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f04f 0400 	mov.w	r4, #0
 80049a2:	461a      	mov	r2, r3
 80049a4:	4623      	mov	r3, r4
 80049a6:	f7fb fc6b 	bl	8000280 <__aeabi_uldivmod>
 80049aa:	4603      	mov	r3, r0
 80049ac:	460c      	mov	r4, r1
 80049ae:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80049b0:	e058      	b.n	8004a64 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	085b      	lsrs	r3, r3, #1
 80049b8:	f04f 0400 	mov.w	r4, #0
 80049bc:	49ae      	ldr	r1, [pc, #696]	; (8004c78 <UART_SetConfig+0x6c4>)
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	eb13 0b01 	adds.w	fp, r3, r1
 80049c6:	eb44 0c02 	adc.w	ip, r4, r2
 80049ca:	4658      	mov	r0, fp
 80049cc:	4661      	mov	r1, ip
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f04f 0400 	mov.w	r4, #0
 80049d6:	461a      	mov	r2, r3
 80049d8:	4623      	mov	r3, r4
 80049da:	f7fb fc51 	bl	8000280 <__aeabi_uldivmod>
 80049de:	4603      	mov	r3, r0
 80049e0:	460c      	mov	r4, r1
 80049e2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80049e4:	e03e      	b.n	8004a64 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80049e6:	f7fe fba7 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80049ea:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4619      	mov	r1, r3
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	f04f 0400 	mov.w	r4, #0
 80049fc:	0214      	lsls	r4, r2, #8
 80049fe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004a02:	020b      	lsls	r3, r1, #8
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6852      	ldr	r2, [r2, #4]
 8004a08:	0852      	lsrs	r2, r2, #1
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	eb13 0b01 	adds.w	fp, r3, r1
 8004a14:	eb44 0c02 	adc.w	ip, r4, r2
 8004a18:	4658      	mov	r0, fp
 8004a1a:	4661      	mov	r1, ip
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f04f 0400 	mov.w	r4, #0
 8004a24:	461a      	mov	r2, r3
 8004a26:	4623      	mov	r3, r4
 8004a28:	f7fb fc2a 	bl	8000280 <__aeabi_uldivmod>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	460c      	mov	r4, r1
 8004a30:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004a32:	e017      	b.n	8004a64 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	f04f 0400 	mov.w	r4, #0
 8004a3e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004a42:	f144 0100 	adc.w	r1, r4, #0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f04f 0400 	mov.w	r4, #0
 8004a4e:	461a      	mov	r2, r3
 8004a50:	4623      	mov	r3, r4
 8004a52:	f7fb fc15 	bl	8000280 <__aeabi_uldivmod>
 8004a56:	4603      	mov	r3, r0
 8004a58:	460c      	mov	r4, r1
 8004a5a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004a5c:	e002      	b.n	8004a64 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	76fb      	strb	r3, [r7, #27]
            break;
 8004a62:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a6a:	d308      	bcc.n	8004a7e <UART_SetConfig+0x4ca>
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a72:	d204      	bcs.n	8004a7e <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	60da      	str	r2, [r3, #12]
 8004a7c:	e100      	b.n	8004c80 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	76fb      	strb	r3, [r7, #27]
 8004a82:	e0fd      	b.n	8004c80 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8c:	f040 8084 	bne.w	8004b98 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004a90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d85f      	bhi.n	8004b58 <UART_SetConfig+0x5a4>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <UART_SetConfig+0x4ec>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004ac5 	.word	0x08004ac5
 8004aa4:	08004ae5 	.word	0x08004ae5
 8004aa8:	08004b05 	.word	0x08004b05
 8004aac:	08004b59 	.word	0x08004b59
 8004ab0:	08004b21 	.word	0x08004b21
 8004ab4:	08004b59 	.word	0x08004b59
 8004ab8:	08004b59 	.word	0x08004b59
 8004abc:	08004b59 	.word	0x08004b59
 8004ac0:	08004b41 	.word	0x08004b41
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac4:	f7fe fbce 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 8004ac8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	005a      	lsls	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	085b      	lsrs	r3, r3, #1
 8004ad4:	441a      	add	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ae2:	e03c      	b.n	8004b5e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae4:	f7fe fbd4 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 8004ae8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	005a      	lsls	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	441a      	add	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b02:	e02c      	b.n	8004b5e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004b0e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6852      	ldr	r2, [r2, #4]
 8004b16:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b1e:	e01e      	b.n	8004b5e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b20:	f7fe fb0a 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 8004b24:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	005a      	lsls	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	441a      	add	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b3e:	e00e      	b.n	8004b5e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b56:	e002      	b.n	8004b5e <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	76fb      	strb	r3, [r7, #27]
        break;
 8004b5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	2b0f      	cmp	r3, #15
 8004b62:	d916      	bls.n	8004b92 <UART_SetConfig+0x5de>
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6a:	d212      	bcs.n	8004b92 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f023 030f 	bic.w	r3, r3, #15
 8004b74:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	89fb      	ldrh	r3, [r7, #14]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	89fa      	ldrh	r2, [r7, #14]
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	e076      	b.n	8004c80 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	76fb      	strb	r3, [r7, #27]
 8004b96:	e073      	b.n	8004c80 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8004b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d85c      	bhi.n	8004c5a <UART_SetConfig+0x6a6>
 8004ba0:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <UART_SetConfig+0x5f4>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bcd 	.word	0x08004bcd
 8004bac:	08004beb 	.word	0x08004beb
 8004bb0:	08004c09 	.word	0x08004c09
 8004bb4:	08004c5b 	.word	0x08004c5b
 8004bb8:	08004c25 	.word	0x08004c25
 8004bbc:	08004c5b 	.word	0x08004c5b
 8004bc0:	08004c5b 	.word	0x08004c5b
 8004bc4:	08004c5b 	.word	0x08004c5b
 8004bc8:	08004c43 	.word	0x08004c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bcc:	f7fe fb4a 	bl	8003264 <HAL_RCC_GetPCLK1Freq>
 8004bd0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	085a      	lsrs	r2, r3, #1
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	441a      	add	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004be8:	e03a      	b.n	8004c60 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bea:	f7fe fb51 	bl	8003290 <HAL_RCC_GetPCLK2Freq>
 8004bee:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	085a      	lsrs	r2, r3, #1
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	441a      	add	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c06:	e02b      	b.n	8004c60 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004c12:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6852      	ldr	r2, [r2, #4]
 8004c1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c22:	e01d      	b.n	8004c60 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c24:	f7fe fa88 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 8004c28:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	085a      	lsrs	r2, r3, #1
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	441a      	add	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c40:	e00e      	b.n	8004c60 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c58:	e002      	b.n	8004c60 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	76fb      	strb	r3, [r7, #27]
        break;
 8004c5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b0f      	cmp	r3, #15
 8004c64:	d90a      	bls.n	8004c7c <UART_SetConfig+0x6c8>
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6c:	d206      	bcs.n	8004c7c <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	60da      	str	r2, [r3, #12]
 8004c76:	e003      	b.n	8004c80 <UART_SetConfig+0x6cc>
 8004c78:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c8c:	7efb      	ldrb	r3, [r7, #27]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3728      	adds	r7, #40	; 0x28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08004c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01a      	beq.n	8004dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d96:	d10a      	bne.n	8004dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004dea:	f7fd f895 	bl	8001f18 <HAL_GetTick>
 8004dee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d10e      	bne.n	8004e1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f82a 	bl	8004e66 <UART_WaitOnFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e020      	b.n	8004e5e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d10e      	bne.n	8004e48 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f814 	bl	8004e66 <UART_WaitOnFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e00a      	b.n	8004e5e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4613      	mov	r3, r2
 8004e74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e76:	e05d      	b.n	8004f34 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7e:	d059      	beq.n	8004f34 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e80:	f7fd f84a 	bl	8001f18 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d302      	bcc.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d11b      	bne.n	8004ece <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ea4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e042      	b.n	8004f54 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d02b      	beq.n	8004f34 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eea:	d123      	bne.n	8004f34 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ef4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f04:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e00f      	b.n	8004f54 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69da      	ldr	r2, [r3, #28]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	bf0c      	ite	eq
 8004f44:	2301      	moveq	r3, #1
 8004f46:	2300      	movne	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d092      	beq.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004f60:	bf00      	nop
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f72:	f3ef 8305 	mrs	r3, IPSR
 8004f76:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10f      	bne.n	8004f9e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f82:	607b      	str	r3, [r7, #4]
  return(result);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f8e:	603b      	str	r3, [r7, #0]
  return(result);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <osKernelInitialize+0x3a>
 8004f96:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <osKernelInitialize+0x64>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d103      	bne.n	8004fa6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004f9e:	f06f 0305 	mvn.w	r3, #5
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e00c      	b.n	8004fc0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <osKernelInitialize+0x64>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d105      	bne.n	8004fba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004fae:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <osKernelInitialize+0x64>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e002      	b.n	8004fc0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004fba:	f04f 33ff 	mov.w	r3, #4294967295
 8004fbe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	20000148 	.word	0x20000148

08004fd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fda:	f3ef 8305 	mrs	r3, IPSR
 8004fde:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10f      	bne.n	8005006 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fea:	607b      	str	r3, [r7, #4]
  return(result);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d105      	bne.n	8004ffe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ff2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <osKernelStart+0x3a>
 8004ffe:	4b0f      	ldr	r3, [pc, #60]	; (800503c <osKernelStart+0x68>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d103      	bne.n	800500e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005006:	f06f 0305 	mvn.w	r3, #5
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	e010      	b.n	8005030 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800500e:	4b0b      	ldr	r3, [pc, #44]	; (800503c <osKernelStart+0x68>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d109      	bne.n	800502a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005016:	f7ff ffa1 	bl	8004f5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800501a:	4b08      	ldr	r3, [pc, #32]	; (800503c <osKernelStart+0x68>)
 800501c:	2202      	movs	r2, #2
 800501e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005020:	f001 f870 	bl	8006104 <vTaskStartScheduler>
      stat = osOK;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	e002      	b.n	8005030 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800502a:	f04f 33ff 	mov.w	r3, #4294967295
 800502e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005030:	68fb      	ldr	r3, [r7, #12]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000148 	.word	0x20000148

08005040 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b090      	sub	sp, #64	; 0x40
 8005044:	af04      	add	r7, sp, #16
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005050:	f3ef 8305 	mrs	r3, IPSR
 8005054:	61fb      	str	r3, [r7, #28]
  return(result);
 8005056:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005058:	2b00      	cmp	r3, #0
 800505a:	f040 808f 	bne.w	800517c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800505e:	f3ef 8310 	mrs	r3, PRIMASK
 8005062:	61bb      	str	r3, [r7, #24]
  return(result);
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d105      	bne.n	8005076 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800506a:	f3ef 8311 	mrs	r3, BASEPRI
 800506e:	617b      	str	r3, [r7, #20]
  return(result);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <osThreadNew+0x3e>
 8005076:	4b44      	ldr	r3, [pc, #272]	; (8005188 <osThreadNew+0x148>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d07e      	beq.n	800517c <osThreadNew+0x13c>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d07b      	beq.n	800517c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005084:	2380      	movs	r3, #128	; 0x80
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005088:	2318      	movs	r3, #24
 800508a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800508c:	2300      	movs	r3, #0
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005090:	f04f 33ff 	mov.w	r3, #4294967295
 8005094:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d045      	beq.n	8005128 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <osThreadNew+0x6a>
        name = attr->name;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d008      	beq.n	80050d0 <osThreadNew+0x90>
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	2b38      	cmp	r3, #56	; 0x38
 80050c2:	d805      	bhi.n	80050d0 <osThreadNew+0x90>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <osThreadNew+0x94>
        return (NULL);
 80050d0:	2300      	movs	r3, #0
 80050d2:	e054      	b.n	800517e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	089b      	lsrs	r3, r3, #2
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00e      	beq.n	800510a <osThreadNew+0xca>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b5b      	cmp	r3, #91	; 0x5b
 80050f2:	d90a      	bls.n	800510a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d006      	beq.n	800510a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <osThreadNew+0xca>
        mem = 1;
 8005104:	2301      	movs	r3, #1
 8005106:	623b      	str	r3, [r7, #32]
 8005108:	e010      	b.n	800512c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10c      	bne.n	800512c <osThreadNew+0xec>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d108      	bne.n	800512c <osThreadNew+0xec>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <osThreadNew+0xec>
          mem = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	623b      	str	r3, [r7, #32]
 8005126:	e001      	b.n	800512c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d110      	bne.n	8005154 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800513a:	9202      	str	r2, [sp, #8]
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 fe09 	bl	8005d60 <xTaskCreateStatic>
 800514e:	4603      	mov	r3, r0
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	e013      	b.n	800517c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d110      	bne.n	800517c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	b29a      	uxth	r2, r3
 800515e:	f107 0310 	add.w	r3, r7, #16
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 fe51 	bl	8005e14 <xTaskCreate>
 8005172:	4603      	mov	r3, r0
 8005174:	2b01      	cmp	r3, #1
 8005176:	d001      	beq.n	800517c <osThreadNew+0x13c>
          hTask = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800517c:	693b      	ldr	r3, [r7, #16]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3730      	adds	r7, #48	; 0x30
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000148 	.word	0x20000148

0800518c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005194:	f3ef 8305 	mrs	r3, IPSR
 8005198:	613b      	str	r3, [r7, #16]
  return(result);
 800519a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10f      	bne.n	80051c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051a0:	f3ef 8310 	mrs	r3, PRIMASK
 80051a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d105      	bne.n	80051b8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051ac:	f3ef 8311 	mrs	r3, BASEPRI
 80051b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <osDelay+0x3c>
 80051b8:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <osDelay+0x58>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d103      	bne.n	80051c8 <osDelay+0x3c>
    stat = osErrorISR;
 80051c0:	f06f 0305 	mvn.w	r3, #5
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	e007      	b.n	80051d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 ff62 	bl	800609c <vTaskDelay>
    }
  }

  return (stat);
 80051d8:	697b      	ldr	r3, [r7, #20]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20000148 	.word	0x20000148

080051e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a07      	ldr	r2, [pc, #28]	; (8005214 <vApplicationGetIdleTaskMemory+0x2c>)
 80051f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4a06      	ldr	r2, [pc, #24]	; (8005218 <vApplicationGetIdleTaskMemory+0x30>)
 80051fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2280      	movs	r2, #128	; 0x80
 8005204:	601a      	str	r2, [r3, #0]
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	2000014c 	.word	0x2000014c
 8005218:	200001a8 	.word	0x200001a8

0800521c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4a07      	ldr	r2, [pc, #28]	; (8005248 <vApplicationGetTimerTaskMemory+0x2c>)
 800522c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4a06      	ldr	r2, [pc, #24]	; (800524c <vApplicationGetTimerTaskMemory+0x30>)
 8005232:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800523a:	601a      	str	r2, [r3, #0]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	200003a8 	.word	0x200003a8
 800524c:	20000404 	.word	0x20000404

08005250 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f103 0208 	add.w	r2, r3, #8
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f04f 32ff 	mov.w	r2, #4294967295
 8005268:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f103 0208 	add.w	r2, r3, #8
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f103 0208 	add.w	r2, r3, #8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	601a      	str	r2, [r3, #0]
}
 80052e6:	bf00      	nop
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052f2:	b480      	push	{r7}
 80052f4:	b085      	sub	sp, #20
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005308:	d103      	bne.n	8005312 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e00c      	b.n	800532c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3308      	adds	r3, #8
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	e002      	b.n	8005320 <vListInsert+0x2e>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	429a      	cmp	r2, r3
 800532a:	d2f6      	bcs.n	800531a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	601a      	str	r2, [r3, #0]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6892      	ldr	r2, [r2, #8]
 800537a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6852      	ldr	r2, [r2, #4]
 8005384:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	429a      	cmp	r2, r3
 800538e:	d103      	bne.n	8005398 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	1e5a      	subs	r2, r3, #1
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	e7fe      	b.n	80053de <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80053e0:	f002 f814 	bl	800740c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ec:	68f9      	ldr	r1, [r7, #12]
 80053ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	441a      	add	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005410:	3b01      	subs	r3, #1
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005416:	fb01 f303 	mul.w	r3, r1, r3
 800541a:	441a      	add	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	22ff      	movs	r2, #255	; 0xff
 8005424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	22ff      	movs	r2, #255	; 0xff
 800542c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d114      	bne.n	8005460 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01a      	beq.n	8005474 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3310      	adds	r3, #16
 8005442:	4618      	mov	r0, r3
 8005444:	f001 f8de 	bl	8006604 <xTaskRemoveFromEventList>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d012      	beq.n	8005474 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800544e:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <xQueueGenericReset+0xcc>)
 8005450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	e009      	b.n	8005474 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3310      	adds	r3, #16
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff fef3 	bl	8005250 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3324      	adds	r3, #36	; 0x24
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff feee 	bl	8005250 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005474:	f001 fff8 	bl	8007468 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005478:	2301      	movs	r3, #1
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	e000ed04 	.word	0xe000ed04

08005488 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08e      	sub	sp, #56	; 0x38
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d109      	bne.n	80054b0 <xQueueGenericCreateStatic+0x28>
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ae:	e7fe      	b.n	80054ae <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d109      	bne.n	80054ca <xQueueGenericCreateStatic+0x42>
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
 80054c8:	e7fe      	b.n	80054c8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <xQueueGenericCreateStatic+0x4e>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <xQueueGenericCreateStatic+0x52>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <xQueueGenericCreateStatic+0x54>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <xQueueGenericCreateStatic+0x6c>
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	623b      	str	r3, [r7, #32]
 80054f2:	e7fe      	b.n	80054f2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d102      	bne.n	8005500 <xQueueGenericCreateStatic+0x78>
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <xQueueGenericCreateStatic+0x7c>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <xQueueGenericCreateStatic+0x7e>
 8005504:	2300      	movs	r3, #0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <xQueueGenericCreateStatic+0x96>
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	61fb      	str	r3, [r7, #28]
 800551c:	e7fe      	b.n	800551c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800551e:	2350      	movs	r3, #80	; 0x50
 8005520:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b50      	cmp	r3, #80	; 0x50
 8005526:	d009      	beq.n	800553c <xQueueGenericCreateStatic+0xb4>
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	61bb      	str	r3, [r7, #24]
 800553a:	e7fe      	b.n	800553a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800553c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00d      	beq.n	8005564 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005550:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 f805 	bl	800556e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005566:	4618      	mov	r0, r3
 8005568:	3730      	adds	r7, #48	; 0x30
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	e002      	b.n	8005590 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800559c:	2101      	movs	r1, #1
 800559e:	69b8      	ldr	r0, [r7, #24]
 80055a0:	f7ff ff0a 	bl	80053b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	78fa      	ldrb	r2, [r7, #3]
 80055a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055ac:	bf00      	nop
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08e      	sub	sp, #56	; 0x38
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055c2:	2300      	movs	r3, #0
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d109      	bne.n	80055e4 <xQueueGenericSend+0x30>
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e2:	e7fe      	b.n	80055e2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d103      	bne.n	80055f2 <xQueueGenericSend+0x3e>
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <xQueueGenericSend+0x42>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <xQueueGenericSend+0x44>
 80055f6:	2300      	movs	r3, #0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d109      	bne.n	8005610 <xQueueGenericSend+0x5c>
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
 800560e:	e7fe      	b.n	800560e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d103      	bne.n	800561e <xQueueGenericSend+0x6a>
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <xQueueGenericSend+0x6e>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <xQueueGenericSend+0x70>
 8005622:	2300      	movs	r3, #0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d109      	bne.n	800563c <xQueueGenericSend+0x88>
 8005628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	e7fe      	b.n	800563a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800563c:	f001 f998 	bl	8006970 <xTaskGetSchedulerState>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <xQueueGenericSend+0x98>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <xQueueGenericSend+0x9c>
 800564c:	2301      	movs	r3, #1
 800564e:	e000      	b.n	8005652 <xQueueGenericSend+0x9e>
 8005650:	2300      	movs	r3, #0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d109      	bne.n	800566a <xQueueGenericSend+0xb6>
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	61fb      	str	r3, [r7, #28]
 8005668:	e7fe      	b.n	8005668 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800566a:	f001 fecf 	bl	800740c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005676:	429a      	cmp	r2, r3
 8005678:	d302      	bcc.n	8005680 <xQueueGenericSend+0xcc>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d129      	bne.n	80056d4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005686:	f000 f9ff 	bl	8005a88 <prvCopyDataToQueue>
 800568a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	2b00      	cmp	r3, #0
 8005692:	d010      	beq.n	80056b6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	3324      	adds	r3, #36	; 0x24
 8005698:	4618      	mov	r0, r3
 800569a:	f000 ffb3 	bl	8006604 <xTaskRemoveFromEventList>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d013      	beq.n	80056cc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056a4:	4b3f      	ldr	r3, [pc, #252]	; (80057a4 <xQueueGenericSend+0x1f0>)
 80056a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	e00a      	b.n	80056cc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d007      	beq.n	80056cc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056bc:	4b39      	ldr	r3, [pc, #228]	; (80057a4 <xQueueGenericSend+0x1f0>)
 80056be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056cc:	f001 fecc 	bl	8007468 <vPortExitCritical>
				return pdPASS;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e063      	b.n	800579c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d103      	bne.n	80056e2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056da:	f001 fec5 	bl	8007468 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	e05c      	b.n	800579c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d106      	bne.n	80056f6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056e8:	f107 0314 	add.w	r3, r7, #20
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 ffeb 	bl	80066c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056f2:	2301      	movs	r3, #1
 80056f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056f6:	f001 feb7 	bl	8007468 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056fa:	f000 fd67 	bl	80061cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056fe:	f001 fe85 	bl	800740c <vPortEnterCritical>
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005708:	b25b      	sxtb	r3, r3
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	d103      	bne.n	8005718 <xQueueGenericSend+0x164>
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800571e:	b25b      	sxtb	r3, r3
 8005720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005724:	d103      	bne.n	800572e <xQueueGenericSend+0x17a>
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800572e:	f001 fe9b 	bl	8007468 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005732:	1d3a      	adds	r2, r7, #4
 8005734:	f107 0314 	add.w	r3, r7, #20
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f000 ffda 	bl	80066f4 <xTaskCheckForTimeOut>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d124      	bne.n	8005790 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005748:	f000 fa96 	bl	8005c78 <prvIsQueueFull>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d018      	beq.n	8005784 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	3310      	adds	r3, #16
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	4611      	mov	r1, r2
 800575a:	4618      	mov	r0, r3
 800575c:	f000 ff04 	bl	8006568 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005762:	f000 fa21 	bl	8005ba8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005766:	f000 fd3f 	bl	80061e8 <xTaskResumeAll>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	f47f af7c 	bne.w	800566a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005772:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <xQueueGenericSend+0x1f0>)
 8005774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	e772      	b.n	800566a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005786:	f000 fa0f 	bl	8005ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800578a:	f000 fd2d 	bl	80061e8 <xTaskResumeAll>
 800578e:	e76c      	b.n	800566a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005792:	f000 fa09 	bl	8005ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005796:	f000 fd27 	bl	80061e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800579a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800579c:	4618      	mov	r0, r3
 800579e:	3738      	adds	r7, #56	; 0x38
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08e      	sub	sp, #56	; 0x38
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d109      	bne.n	80057d4 <xQueueGenericSendFromISR+0x2c>
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
 80057d2:	e7fe      	b.n	80057d2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d103      	bne.n	80057e2 <xQueueGenericSendFromISR+0x3a>
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <xQueueGenericSendFromISR+0x3e>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <xQueueGenericSendFromISR+0x40>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d109      	bne.n	8005800 <xQueueGenericSendFromISR+0x58>
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	623b      	str	r3, [r7, #32]
 80057fe:	e7fe      	b.n	80057fe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d103      	bne.n	800580e <xQueueGenericSendFromISR+0x66>
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <xQueueGenericSendFromISR+0x6a>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <xQueueGenericSendFromISR+0x6c>
 8005812:	2300      	movs	r3, #0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d109      	bne.n	800582c <xQueueGenericSendFromISR+0x84>
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	e7fe      	b.n	800582a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800582c:	f001 feca 	bl	80075c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005830:	f3ef 8211 	mrs	r2, BASEPRI
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	61ba      	str	r2, [r7, #24]
 8005846:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005848:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800584a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005854:	429a      	cmp	r2, r3
 8005856:	d302      	bcc.n	800585e <xQueueGenericSendFromISR+0xb6>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d12c      	bne.n	80058b8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800586e:	f000 f90b 	bl	8005a88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005872:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587a:	d112      	bne.n	80058a2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	2b00      	cmp	r3, #0
 8005882:	d016      	beq.n	80058b2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	3324      	adds	r3, #36	; 0x24
 8005888:	4618      	mov	r0, r3
 800588a:	f000 febb 	bl	8006604 <xTaskRemoveFromEventList>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00e      	beq.n	80058b2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	e007      	b.n	80058b2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058a6:	3301      	adds	r3, #1
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	b25a      	sxtb	r2, r3
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80058b2:	2301      	movs	r3, #1
 80058b4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80058b6:	e001      	b.n	80058bc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	637b      	str	r3, [r7, #52]	; 0x34
 80058bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058be:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3738      	adds	r7, #56	; 0x38
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08c      	sub	sp, #48	; 0x30
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058dc:	2300      	movs	r3, #0
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <xQueueReceive+0x2e>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	623b      	str	r3, [r7, #32]
 80058fc:	e7fe      	b.n	80058fc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d103      	bne.n	800590c <xQueueReceive+0x3c>
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <xQueueReceive+0x40>
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <xQueueReceive+0x42>
 8005910:	2300      	movs	r3, #0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d109      	bne.n	800592a <xQueueReceive+0x5a>
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	61fb      	str	r3, [r7, #28]
 8005928:	e7fe      	b.n	8005928 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800592a:	f001 f821 	bl	8006970 <xTaskGetSchedulerState>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d102      	bne.n	800593a <xQueueReceive+0x6a>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <xQueueReceive+0x6e>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <xQueueReceive+0x70>
 800593e:	2300      	movs	r3, #0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <xQueueReceive+0x88>
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	e7fe      	b.n	8005956 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005958:	f001 fd58 	bl	800740c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01f      	beq.n	80059a8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800596c:	f000 f8f6 	bl	8005b5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	1e5a      	subs	r2, r3, #1
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00f      	beq.n	80059a0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	3310      	adds	r3, #16
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fe3d 	bl	8006604 <xTaskRemoveFromEventList>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d007      	beq.n	80059a0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005990:	4b3c      	ldr	r3, [pc, #240]	; (8005a84 <xQueueReceive+0x1b4>)
 8005992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059a0:	f001 fd62 	bl	8007468 <vPortExitCritical>
				return pdPASS;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e069      	b.n	8005a7c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d103      	bne.n	80059b6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059ae:	f001 fd5b 	bl	8007468 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e062      	b.n	8005a7c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059bc:	f107 0310 	add.w	r3, r7, #16
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fe81 	bl	80066c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059c6:	2301      	movs	r3, #1
 80059c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059ca:	f001 fd4d 	bl	8007468 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059ce:	f000 fbfd 	bl	80061cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059d2:	f001 fd1b 	bl	800740c <vPortEnterCritical>
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059dc:	b25b      	sxtb	r3, r3
 80059de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e2:	d103      	bne.n	80059ec <xQueueReceive+0x11c>
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059f2:	b25b      	sxtb	r3, r3
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d103      	bne.n	8005a02 <xQueueReceive+0x132>
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a02:	f001 fd31 	bl	8007468 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a06:	1d3a      	adds	r2, r7, #4
 8005a08:	f107 0310 	add.w	r3, r7, #16
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fe70 	bl	80066f4 <xTaskCheckForTimeOut>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d123      	bne.n	8005a62 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a1c:	f000 f916 	bl	8005c4c <prvIsQueueEmpty>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d017      	beq.n	8005a56 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	3324      	adds	r3, #36	; 0x24
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fd9a 	bl	8006568 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a36:	f000 f8b7 	bl	8005ba8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a3a:	f000 fbd5 	bl	80061e8 <xTaskResumeAll>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d189      	bne.n	8005958 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005a44:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <xQueueReceive+0x1b4>)
 8005a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	e780      	b.n	8005958 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a58:	f000 f8a6 	bl	8005ba8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a5c:	f000 fbc4 	bl	80061e8 <xTaskResumeAll>
 8005a60:	e77a      	b.n	8005958 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a64:	f000 f8a0 	bl	8005ba8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a68:	f000 fbbe 	bl	80061e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a6e:	f000 f8ed 	bl	8005c4c <prvIsQueueEmpty>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f43f af6f 	beq.w	8005958 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3730      	adds	r7, #48	; 0x30
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	e000ed04 	.word	0xe000ed04

08005a88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a94:	2300      	movs	r3, #0
 8005a96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10d      	bne.n	8005ac2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d14d      	bne.n	8005b4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 ff7a 	bl	80069ac <xTaskPriorityDisinherit>
 8005ab8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	609a      	str	r2, [r3, #8]
 8005ac0:	e043      	b.n	8005b4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d119      	bne.n	8005afc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6858      	ldr	r0, [r3, #4]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	f001 ffb4 	bl	8007a40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	441a      	add	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d32b      	bcc.n	8005b4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	605a      	str	r2, [r3, #4]
 8005afa:	e026      	b.n	8005b4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	68d8      	ldr	r0, [r3, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b04:	461a      	mov	r2, r3
 8005b06:	68b9      	ldr	r1, [r7, #8]
 8005b08:	f001 ff9a 	bl	8007a40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	425b      	negs	r3, r3
 8005b16:	441a      	add	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d207      	bcs.n	8005b38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	425b      	negs	r3, r3
 8005b32:	441a      	add	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d105      	bne.n	8005b4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b52:	697b      	ldr	r3, [r7, #20]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d018      	beq.n	8005ba0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	441a      	add	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d303      	bcc.n	8005b90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68d9      	ldr	r1, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6838      	ldr	r0, [r7, #0]
 8005b9c:	f001 ff50 	bl	8007a40 <memcpy>
	}
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bb0:	f001 fc2c 	bl	800740c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bbc:	e011      	b.n	8005be2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d012      	beq.n	8005bec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3324      	adds	r3, #36	; 0x24
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fd1a 	bl	8006604 <xTaskRemoveFromEventList>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005bd6:	f000 fded 	bl	80067b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	dce9      	bgt.n	8005bbe <prvUnlockQueue+0x16>
 8005bea:	e000      	b.n	8005bee <prvUnlockQueue+0x46>
					break;
 8005bec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	22ff      	movs	r2, #255	; 0xff
 8005bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005bf6:	f001 fc37 	bl	8007468 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bfa:	f001 fc07 	bl	800740c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c06:	e011      	b.n	8005c2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d012      	beq.n	8005c36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3310      	adds	r3, #16
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 fcf5 	bl	8006604 <xTaskRemoveFromEventList>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c20:	f000 fdc8 	bl	80067b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c24:	7bbb      	ldrb	r3, [r7, #14]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	dce9      	bgt.n	8005c08 <prvUnlockQueue+0x60>
 8005c34:	e000      	b.n	8005c38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	22ff      	movs	r2, #255	; 0xff
 8005c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c40:	f001 fc12 	bl	8007468 <vPortExitCritical>
}
 8005c44:	bf00      	nop
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c54:	f001 fbda 	bl	800740c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d102      	bne.n	8005c66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c60:	2301      	movs	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	e001      	b.n	8005c6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c6a:	f001 fbfd 	bl	8007468 <vPortExitCritical>

	return xReturn;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c80:	f001 fbc4 	bl	800740c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d102      	bne.n	8005c96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	e001      	b.n	8005c9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c9a:	f001 fbe5 	bl	8007468 <vPortExitCritical>

	return xReturn;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	e014      	b.n	8005ce2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cb8:	4a0e      	ldr	r2, [pc, #56]	; (8005cf4 <vQueueAddToRegistry+0x4c>)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10b      	bne.n	8005cdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005cc4:	490b      	ldr	r1, [pc, #44]	; (8005cf4 <vQueueAddToRegistry+0x4c>)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005cce:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <vQueueAddToRegistry+0x4c>)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	4413      	add	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005cda:	e005      	b.n	8005ce8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b07      	cmp	r3, #7
 8005ce6:	d9e7      	bls.n	8005cb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ce8:	bf00      	nop
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20001cb4 	.word	0x20001cb4

08005cf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d08:	f001 fb80 	bl	800740c <vPortEnterCritical>
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d12:	b25b      	sxtb	r3, r3
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d103      	bne.n	8005d22 <vQueueWaitForMessageRestricted+0x2a>
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d28:	b25b      	sxtb	r3, r3
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2e:	d103      	bne.n	8005d38 <vQueueWaitForMessageRestricted+0x40>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d38:	f001 fb96 	bl	8007468 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	3324      	adds	r3, #36	; 0x24
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	68b9      	ldr	r1, [r7, #8]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 fc2f 	bl	80065b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d52:	6978      	ldr	r0, [r7, #20]
 8005d54:	f7ff ff28 	bl	8005ba8 <prvUnlockQueue>
	}
 8005d58:	bf00      	nop
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08e      	sub	sp, #56	; 0x38
 8005d64:	af04      	add	r7, sp, #16
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d109      	bne.n	8005d88 <xTaskCreateStatic+0x28>
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	623b      	str	r3, [r7, #32]
 8005d86:	e7fe      	b.n	8005d86 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <xTaskCreateStatic+0x42>
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	e7fe      	b.n	8005da0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005da2:	235c      	movs	r3, #92	; 0x5c
 8005da4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b5c      	cmp	r3, #92	; 0x5c
 8005daa:	d009      	beq.n	8005dc0 <xTaskCreateStatic+0x60>
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	e7fe      	b.n	8005dbe <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005dc0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01e      	beq.n	8005e06 <xTaskCreateStatic+0xa6>
 8005dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01b      	beq.n	8005e06 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005de0:	2300      	movs	r3, #0
 8005de2:	9303      	str	r3, [sp, #12]
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	9302      	str	r3, [sp, #8]
 8005de8:	f107 0314 	add.w	r3, r7, #20
 8005dec:	9301      	str	r3, [sp, #4]
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f850 	bl	8005e9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e00:	f000 f8dc 	bl	8005fbc <prvAddNewTaskToReadyList>
 8005e04:	e001      	b.n	8005e0a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e0a:	697b      	ldr	r3, [r7, #20]
	}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3728      	adds	r7, #40	; 0x28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08c      	sub	sp, #48	; 0x30
 8005e18:	af04      	add	r7, sp, #16
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	4613      	mov	r3, r2
 8005e22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e24:	88fb      	ldrh	r3, [r7, #6]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f001 fc09 	bl	8007640 <pvPortMalloc>
 8005e2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00e      	beq.n	8005e54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e36:	205c      	movs	r0, #92	; 0x5c
 8005e38:	f001 fc02 	bl	8007640 <pvPortMalloc>
 8005e3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	631a      	str	r2, [r3, #48]	; 0x30
 8005e4a:	e005      	b.n	8005e58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e4c:	6978      	ldr	r0, [r7, #20]
 8005e4e:	f001 fcb9 	bl	80077c4 <vPortFree>
 8005e52:	e001      	b.n	8005e58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d017      	beq.n	8005e8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e66:	88fa      	ldrh	r2, [r7, #6]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	9303      	str	r3, [sp, #12]
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	9302      	str	r3, [sp, #8]
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 f80e 	bl	8005e9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e82:	69f8      	ldr	r0, [r7, #28]
 8005e84:	f000 f89a 	bl	8005fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	61bb      	str	r3, [r7, #24]
 8005e8c:	e002      	b.n	8005e94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e94:	69bb      	ldr	r3, [r7, #24]
	}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3720      	adds	r7, #32
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b088      	sub	sp, #32
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	60f8      	str	r0, [r7, #12]
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
 8005eaa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	21a5      	movs	r1, #165	; 0xa5
 8005eb8:	f001 fdcd 	bl	8007a56 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	f023 0307 	bic.w	r3, r3, #7
 8005ed4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d009      	beq.n	8005ef4 <prvInitialiseNewTask+0x56>
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	e7fe      	b.n	8005ef2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01f      	beq.n	8005f3a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
 8005efe:	e012      	b.n	8005f26 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	7819      	ldrb	r1, [r3, #0]
 8005f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	3334      	adds	r3, #52	; 0x34
 8005f10:	460a      	mov	r2, r1
 8005f12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d006      	beq.n	8005f2e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	3301      	adds	r3, #1
 8005f24:	61fb      	str	r3, [r7, #28]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	2b0f      	cmp	r3, #15
 8005f2a:	d9e9      	bls.n	8005f00 <prvInitialiseNewTask+0x62>
 8005f2c:	e000      	b.n	8005f30 <prvInitialiseNewTask+0x92>
			{
				break;
 8005f2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f38:	e003      	b.n	8005f42 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	2b37      	cmp	r3, #55	; 0x37
 8005f46:	d901      	bls.n	8005f4c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f48:	2337      	movs	r3, #55	; 0x37
 8005f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f56:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	3304      	adds	r3, #4
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff f994 	bl	8005290 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	3318      	adds	r3, #24
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff f98f 	bl	8005290 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	68f9      	ldr	r1, [r7, #12]
 8005f9a:	69b8      	ldr	r0, [r7, #24]
 8005f9c:	f001 f90c 	bl	80071b8 <pxPortInitialiseStack>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fb2:	bf00      	nop
 8005fb4:	3720      	adds	r7, #32
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fc4:	f001 fa22 	bl	800740c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fc8:	4b2d      	ldr	r3, [pc, #180]	; (8006080 <prvAddNewTaskToReadyList+0xc4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	4a2c      	ldr	r2, [pc, #176]	; (8006080 <prvAddNewTaskToReadyList+0xc4>)
 8005fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fd2:	4b2c      	ldr	r3, [pc, #176]	; (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fda:	4a2a      	ldr	r2, [pc, #168]	; (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fe0:	4b27      	ldr	r3, [pc, #156]	; (8006080 <prvAddNewTaskToReadyList+0xc4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d110      	bne.n	800600a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fe8:	f000 fc08 	bl	80067fc <prvInitialiseTaskLists>
 8005fec:	e00d      	b.n	800600a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fee:	4b26      	ldr	r3, [pc, #152]	; (8006088 <prvAddNewTaskToReadyList+0xcc>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ff6:	4b23      	ldr	r3, [pc, #140]	; (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	429a      	cmp	r2, r3
 8006002:	d802      	bhi.n	800600a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006004:	4a1f      	ldr	r2, [pc, #124]	; (8006084 <prvAddNewTaskToReadyList+0xc8>)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800600a:	4b20      	ldr	r3, [pc, #128]	; (800608c <prvAddNewTaskToReadyList+0xd0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3301      	adds	r3, #1
 8006010:	4a1e      	ldr	r2, [pc, #120]	; (800608c <prvAddNewTaskToReadyList+0xd0>)
 8006012:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006014:	4b1d      	ldr	r3, [pc, #116]	; (800608c <prvAddNewTaskToReadyList+0xd0>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006020:	4b1b      	ldr	r3, [pc, #108]	; (8006090 <prvAddNewTaskToReadyList+0xd4>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d903      	bls.n	8006030 <prvAddNewTaskToReadyList+0x74>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	4a18      	ldr	r2, [pc, #96]	; (8006090 <prvAddNewTaskToReadyList+0xd4>)
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4a15      	ldr	r2, [pc, #84]	; (8006094 <prvAddNewTaskToReadyList+0xd8>)
 800603e:	441a      	add	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	4610      	mov	r0, r2
 8006048:	f7ff f92f 	bl	80052aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800604c:	f001 fa0c 	bl	8007468 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006050:	4b0d      	ldr	r3, [pc, #52]	; (8006088 <prvAddNewTaskToReadyList+0xcc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00e      	beq.n	8006076 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <prvAddNewTaskToReadyList+0xc8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006062:	429a      	cmp	r2, r3
 8006064:	d207      	bcs.n	8006076 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006066:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <prvAddNewTaskToReadyList+0xdc>)
 8006068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000cd8 	.word	0x20000cd8
 8006084:	20000804 	.word	0x20000804
 8006088:	20000ce4 	.word	0x20000ce4
 800608c:	20000cf4 	.word	0x20000cf4
 8006090:	20000ce0 	.word	0x20000ce0
 8006094:	20000808 	.word	0x20000808
 8006098:	e000ed04 	.word	0xe000ed04

0800609c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d016      	beq.n	80060dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060ae:	4b13      	ldr	r3, [pc, #76]	; (80060fc <vTaskDelay+0x60>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <vTaskDelay+0x2e>
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	60bb      	str	r3, [r7, #8]
 80060c8:	e7fe      	b.n	80060c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80060ca:	f000 f87f 	bl	80061cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060ce:	2100      	movs	r1, #0
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fcd7 	bl	8006a84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060d6:	f000 f887 	bl	80061e8 <xTaskResumeAll>
 80060da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d107      	bne.n	80060f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80060e2:	4b07      	ldr	r3, [pc, #28]	; (8006100 <vTaskDelay+0x64>)
 80060e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000d00 	.word	0x20000d00
 8006100:	e000ed04 	.word	0xe000ed04

08006104 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08a      	sub	sp, #40	; 0x28
 8006108:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800610e:	2300      	movs	r3, #0
 8006110:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006112:	463a      	mov	r2, r7
 8006114:	1d39      	adds	r1, r7, #4
 8006116:	f107 0308 	add.w	r3, r7, #8
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff f864 	bl	80051e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	9202      	str	r2, [sp, #8]
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	2300      	movs	r3, #0
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	2300      	movs	r3, #0
 8006130:	460a      	mov	r2, r1
 8006132:	4920      	ldr	r1, [pc, #128]	; (80061b4 <vTaskStartScheduler+0xb0>)
 8006134:	4820      	ldr	r0, [pc, #128]	; (80061b8 <vTaskStartScheduler+0xb4>)
 8006136:	f7ff fe13 	bl	8005d60 <xTaskCreateStatic>
 800613a:	4602      	mov	r2, r0
 800613c:	4b1f      	ldr	r3, [pc, #124]	; (80061bc <vTaskStartScheduler+0xb8>)
 800613e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006140:	4b1e      	ldr	r3, [pc, #120]	; (80061bc <vTaskStartScheduler+0xb8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006148:	2301      	movs	r3, #1
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	e001      	b.n	8006152 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d102      	bne.n	800615e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006158:	f000 fce8 	bl	8006b2c <xTimerCreateTimerTask>
 800615c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d115      	bne.n	8006190 <vTaskStartScheduler+0x8c>
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006176:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <vTaskStartScheduler+0xbc>)
 8006178:	f04f 32ff 	mov.w	r2, #4294967295
 800617c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800617e:	4b11      	ldr	r3, [pc, #68]	; (80061c4 <vTaskStartScheduler+0xc0>)
 8006180:	2201      	movs	r2, #1
 8006182:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006184:	4b10      	ldr	r3, [pc, #64]	; (80061c8 <vTaskStartScheduler+0xc4>)
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800618a:	f001 f8a1 	bl	80072d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800618e:	e00d      	b.n	80061ac <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006196:	d109      	bne.n	80061ac <vTaskStartScheduler+0xa8>
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	e7fe      	b.n	80061aa <vTaskStartScheduler+0xa6>
}
 80061ac:	bf00      	nop
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	08008350 	.word	0x08008350
 80061b8:	080067cd 	.word	0x080067cd
 80061bc:	20000cfc 	.word	0x20000cfc
 80061c0:	20000cf8 	.word	0x20000cf8
 80061c4:	20000ce4 	.word	0x20000ce4
 80061c8:	20000cdc 	.word	0x20000cdc

080061cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061d0:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <vTaskSuspendAll+0x18>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3301      	adds	r3, #1
 80061d6:	4a03      	ldr	r2, [pc, #12]	; (80061e4 <vTaskSuspendAll+0x18>)
 80061d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80061da:	bf00      	nop
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	20000d00 	.word	0x20000d00

080061e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061f6:	4b41      	ldr	r3, [pc, #260]	; (80062fc <xTaskResumeAll+0x114>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d109      	bne.n	8006212 <xTaskResumeAll+0x2a>
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	603b      	str	r3, [r7, #0]
 8006210:	e7fe      	b.n	8006210 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006212:	f001 f8fb 	bl	800740c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006216:	4b39      	ldr	r3, [pc, #228]	; (80062fc <xTaskResumeAll+0x114>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3b01      	subs	r3, #1
 800621c:	4a37      	ldr	r2, [pc, #220]	; (80062fc <xTaskResumeAll+0x114>)
 800621e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006220:	4b36      	ldr	r3, [pc, #216]	; (80062fc <xTaskResumeAll+0x114>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d162      	bne.n	80062ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006228:	4b35      	ldr	r3, [pc, #212]	; (8006300 <xTaskResumeAll+0x118>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d05e      	beq.n	80062ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006230:	e02f      	b.n	8006292 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006232:	4b34      	ldr	r3, [pc, #208]	; (8006304 <xTaskResumeAll+0x11c>)
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3318      	adds	r3, #24
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff f890 	bl	8005364 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3304      	adds	r3, #4
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff f88b 	bl	8005364 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006252:	4b2d      	ldr	r3, [pc, #180]	; (8006308 <xTaskResumeAll+0x120>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d903      	bls.n	8006262 <xTaskResumeAll+0x7a>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	4a2a      	ldr	r2, [pc, #168]	; (8006308 <xTaskResumeAll+0x120>)
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4a27      	ldr	r2, [pc, #156]	; (800630c <xTaskResumeAll+0x124>)
 8006270:	441a      	add	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3304      	adds	r3, #4
 8006276:	4619      	mov	r1, r3
 8006278:	4610      	mov	r0, r2
 800627a:	f7ff f816 	bl	80052aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006282:	4b23      	ldr	r3, [pc, #140]	; (8006310 <xTaskResumeAll+0x128>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	429a      	cmp	r2, r3
 800628a:	d302      	bcc.n	8006292 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800628c:	4b21      	ldr	r3, [pc, #132]	; (8006314 <xTaskResumeAll+0x12c>)
 800628e:	2201      	movs	r2, #1
 8006290:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006292:	4b1c      	ldr	r3, [pc, #112]	; (8006304 <xTaskResumeAll+0x11c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1cb      	bne.n	8006232 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062a0:	f000 fb46 	bl	8006930 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062a4:	4b1c      	ldr	r3, [pc, #112]	; (8006318 <xTaskResumeAll+0x130>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d010      	beq.n	80062d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062b0:	f000 f846 	bl	8006340 <xTaskIncrementTick>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80062ba:	4b16      	ldr	r3, [pc, #88]	; (8006314 <xTaskResumeAll+0x12c>)
 80062bc:	2201      	movs	r2, #1
 80062be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f1      	bne.n	80062b0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80062cc:	4b12      	ldr	r3, [pc, #72]	; (8006318 <xTaskResumeAll+0x130>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062d2:	4b10      	ldr	r3, [pc, #64]	; (8006314 <xTaskResumeAll+0x12c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062da:	2301      	movs	r3, #1
 80062dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062de:	4b0f      	ldr	r3, [pc, #60]	; (800631c <xTaskResumeAll+0x134>)
 80062e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062ee:	f001 f8bb 	bl	8007468 <vPortExitCritical>

	return xAlreadyYielded;
 80062f2:	68bb      	ldr	r3, [r7, #8]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	20000d00 	.word	0x20000d00
 8006300:	20000cd8 	.word	0x20000cd8
 8006304:	20000c98 	.word	0x20000c98
 8006308:	20000ce0 	.word	0x20000ce0
 800630c:	20000808 	.word	0x20000808
 8006310:	20000804 	.word	0x20000804
 8006314:	20000cec 	.word	0x20000cec
 8006318:	20000ce8 	.word	0x20000ce8
 800631c:	e000ed04 	.word	0xe000ed04

08006320 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006326:	4b05      	ldr	r3, [pc, #20]	; (800633c <xTaskGetTickCount+0x1c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800632c:	687b      	ldr	r3, [r7, #4]
}
 800632e:	4618      	mov	r0, r3
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000cdc 	.word	0x20000cdc

08006340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006346:	2300      	movs	r3, #0
 8006348:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800634a:	4b4e      	ldr	r3, [pc, #312]	; (8006484 <xTaskIncrementTick+0x144>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	f040 8088 	bne.w	8006464 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006354:	4b4c      	ldr	r3, [pc, #304]	; (8006488 <xTaskIncrementTick+0x148>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3301      	adds	r3, #1
 800635a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800635c:	4a4a      	ldr	r2, [pc, #296]	; (8006488 <xTaskIncrementTick+0x148>)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d11f      	bne.n	80063a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006368:	4b48      	ldr	r3, [pc, #288]	; (800648c <xTaskIncrementTick+0x14c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <xTaskIncrementTick+0x46>
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	e7fe      	b.n	8006384 <xTaskIncrementTick+0x44>
 8006386:	4b41      	ldr	r3, [pc, #260]	; (800648c <xTaskIncrementTick+0x14c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	4b40      	ldr	r3, [pc, #256]	; (8006490 <xTaskIncrementTick+0x150>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a3e      	ldr	r2, [pc, #248]	; (800648c <xTaskIncrementTick+0x14c>)
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	4a3e      	ldr	r2, [pc, #248]	; (8006490 <xTaskIncrementTick+0x150>)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	4b3e      	ldr	r3, [pc, #248]	; (8006494 <xTaskIncrementTick+0x154>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3301      	adds	r3, #1
 80063a0:	4a3c      	ldr	r2, [pc, #240]	; (8006494 <xTaskIncrementTick+0x154>)
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	f000 fac4 	bl	8006930 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063a8:	4b3b      	ldr	r3, [pc, #236]	; (8006498 <xTaskIncrementTick+0x158>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d349      	bcc.n	8006446 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063b2:	4b36      	ldr	r3, [pc, #216]	; (800648c <xTaskIncrementTick+0x14c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d104      	bne.n	80063c6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063bc:	4b36      	ldr	r3, [pc, #216]	; (8006498 <xTaskIncrementTick+0x158>)
 80063be:	f04f 32ff 	mov.w	r2, #4294967295
 80063c2:	601a      	str	r2, [r3, #0]
					break;
 80063c4:	e03f      	b.n	8006446 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c6:	4b31      	ldr	r3, [pc, #196]	; (800648c <xTaskIncrementTick+0x14c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d203      	bcs.n	80063e6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063de:	4a2e      	ldr	r2, [pc, #184]	; (8006498 <xTaskIncrementTick+0x158>)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80063e4:	e02f      	b.n	8006446 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	3304      	adds	r3, #4
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fe ffba 	bl	8005364 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d004      	beq.n	8006402 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	3318      	adds	r3, #24
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fe ffb1 	bl	8005364 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006406:	4b25      	ldr	r3, [pc, #148]	; (800649c <xTaskIncrementTick+0x15c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d903      	bls.n	8006416 <xTaskIncrementTick+0xd6>
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	4a22      	ldr	r2, [pc, #136]	; (800649c <xTaskIncrementTick+0x15c>)
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4a1f      	ldr	r2, [pc, #124]	; (80064a0 <xTaskIncrementTick+0x160>)
 8006424:	441a      	add	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	3304      	adds	r3, #4
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f7fe ff3c 	bl	80052aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006436:	4b1b      	ldr	r3, [pc, #108]	; (80064a4 <xTaskIncrementTick+0x164>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	429a      	cmp	r2, r3
 800643e:	d3b8      	bcc.n	80063b2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006440:	2301      	movs	r3, #1
 8006442:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006444:	e7b5      	b.n	80063b2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006446:	4b17      	ldr	r3, [pc, #92]	; (80064a4 <xTaskIncrementTick+0x164>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644c:	4914      	ldr	r1, [pc, #80]	; (80064a0 <xTaskIncrementTick+0x160>)
 800644e:	4613      	mov	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d907      	bls.n	800646e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800645e:	2301      	movs	r3, #1
 8006460:	617b      	str	r3, [r7, #20]
 8006462:	e004      	b.n	800646e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006464:	4b10      	ldr	r3, [pc, #64]	; (80064a8 <xTaskIncrementTick+0x168>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3301      	adds	r3, #1
 800646a:	4a0f      	ldr	r2, [pc, #60]	; (80064a8 <xTaskIncrementTick+0x168>)
 800646c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800646e:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <xTaskIncrementTick+0x16c>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006476:	2301      	movs	r3, #1
 8006478:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800647a:	697b      	ldr	r3, [r7, #20]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20000d00 	.word	0x20000d00
 8006488:	20000cdc 	.word	0x20000cdc
 800648c:	20000c90 	.word	0x20000c90
 8006490:	20000c94 	.word	0x20000c94
 8006494:	20000cf0 	.word	0x20000cf0
 8006498:	20000cf8 	.word	0x20000cf8
 800649c:	20000ce0 	.word	0x20000ce0
 80064a0:	20000808 	.word	0x20000808
 80064a4:	20000804 	.word	0x20000804
 80064a8:	20000ce8 	.word	0x20000ce8
 80064ac:	20000cec 	.word	0x20000cec

080064b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064b6:	4b27      	ldr	r3, [pc, #156]	; (8006554 <vTaskSwitchContext+0xa4>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064be:	4b26      	ldr	r3, [pc, #152]	; (8006558 <vTaskSwitchContext+0xa8>)
 80064c0:	2201      	movs	r2, #1
 80064c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064c4:	e040      	b.n	8006548 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80064c6:	4b24      	ldr	r3, [pc, #144]	; (8006558 <vTaskSwitchContext+0xa8>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064cc:	4b23      	ldr	r3, [pc, #140]	; (800655c <vTaskSwitchContext+0xac>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e00f      	b.n	80064f4 <vTaskSwitchContext+0x44>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d109      	bne.n	80064ee <vTaskSwitchContext+0x3e>
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	607b      	str	r3, [r7, #4]
 80064ec:	e7fe      	b.n	80064ec <vTaskSwitchContext+0x3c>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	491a      	ldr	r1, [pc, #104]	; (8006560 <vTaskSwitchContext+0xb0>)
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0e5      	beq.n	80064d4 <vTaskSwitchContext+0x24>
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4a13      	ldr	r2, [pc, #76]	; (8006560 <vTaskSwitchContext+0xb0>)
 8006514:	4413      	add	r3, r2
 8006516:	60bb      	str	r3, [r7, #8]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	605a      	str	r2, [r3, #4]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	3308      	adds	r3, #8
 800652a:	429a      	cmp	r2, r3
 800652c:	d104      	bne.n	8006538 <vTaskSwitchContext+0x88>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	605a      	str	r2, [r3, #4]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	4a09      	ldr	r2, [pc, #36]	; (8006564 <vTaskSwitchContext+0xb4>)
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	4a06      	ldr	r2, [pc, #24]	; (800655c <vTaskSwitchContext+0xac>)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6013      	str	r3, [r2, #0]
}
 8006548:	bf00      	nop
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	20000d00 	.word	0x20000d00
 8006558:	20000cec 	.word	0x20000cec
 800655c:	20000ce0 	.word	0x20000ce0
 8006560:	20000808 	.word	0x20000808
 8006564:	20000804 	.word	0x20000804

08006568 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d109      	bne.n	800658c <vTaskPlaceOnEventList+0x24>
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	e7fe      	b.n	800658a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800658c:	4b07      	ldr	r3, [pc, #28]	; (80065ac <vTaskPlaceOnEventList+0x44>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3318      	adds	r3, #24
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7fe feac 	bl	80052f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800659a:	2101      	movs	r1, #1
 800659c:	6838      	ldr	r0, [r7, #0]
 800659e:	f000 fa71 	bl	8006a84 <prvAddCurrentTaskToDelayedList>
}
 80065a2:	bf00      	nop
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000804 	.word	0x20000804

080065b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <vTaskPlaceOnEventListRestricted+0x26>
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	e7fe      	b.n	80065d4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065d6:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <vTaskPlaceOnEventListRestricted+0x50>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3318      	adds	r3, #24
 80065dc:	4619      	mov	r1, r3
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f7fe fe63 	bl	80052aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80065ea:	f04f 33ff 	mov.w	r3, #4294967295
 80065ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	68b8      	ldr	r0, [r7, #8]
 80065f4:	f000 fa46 	bl	8006a84 <prvAddCurrentTaskToDelayedList>
	}
 80065f8:	bf00      	nop
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20000804 	.word	0x20000804

08006604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <xTaskRemoveFromEventList+0x2a>
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	e7fe      	b.n	800662c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	3318      	adds	r3, #24
 8006632:	4618      	mov	r0, r3
 8006634:	f7fe fe96 	bl	8005364 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006638:	4b1d      	ldr	r3, [pc, #116]	; (80066b0 <xTaskRemoveFromEventList+0xac>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d11d      	bne.n	800667c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	3304      	adds	r3, #4
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fe8d 	bl	8005364 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664e:	4b19      	ldr	r3, [pc, #100]	; (80066b4 <xTaskRemoveFromEventList+0xb0>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d903      	bls.n	800665e <xTaskRemoveFromEventList+0x5a>
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	4a16      	ldr	r2, [pc, #88]	; (80066b4 <xTaskRemoveFromEventList+0xb0>)
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4a13      	ldr	r2, [pc, #76]	; (80066b8 <xTaskRemoveFromEventList+0xb4>)
 800666c:	441a      	add	r2, r3
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	3304      	adds	r3, #4
 8006672:	4619      	mov	r1, r3
 8006674:	4610      	mov	r0, r2
 8006676:	f7fe fe18 	bl	80052aa <vListInsertEnd>
 800667a:	e005      	b.n	8006688 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	3318      	adds	r3, #24
 8006680:	4619      	mov	r1, r3
 8006682:	480e      	ldr	r0, [pc, #56]	; (80066bc <xTaskRemoveFromEventList+0xb8>)
 8006684:	f7fe fe11 	bl	80052aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668c:	4b0c      	ldr	r3, [pc, #48]	; (80066c0 <xTaskRemoveFromEventList+0xbc>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	429a      	cmp	r2, r3
 8006694:	d905      	bls.n	80066a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006696:	2301      	movs	r3, #1
 8006698:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <xTaskRemoveFromEventList+0xc0>)
 800669c:	2201      	movs	r2, #1
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	e001      	b.n	80066a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80066a6:	697b      	ldr	r3, [r7, #20]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20000d00 	.word	0x20000d00
 80066b4:	20000ce0 	.word	0x20000ce0
 80066b8:	20000808 	.word	0x20000808
 80066bc:	20000c98 	.word	0x20000c98
 80066c0:	20000804 	.word	0x20000804
 80066c4:	20000cec 	.word	0x20000cec

080066c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066d0:	4b06      	ldr	r3, [pc, #24]	; (80066ec <vTaskInternalSetTimeOutState+0x24>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066d8:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <vTaskInternalSetTimeOutState+0x28>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	605a      	str	r2, [r3, #4]
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	20000cf0 	.word	0x20000cf0
 80066f0:	20000cdc 	.word	0x20000cdc

080066f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d109      	bne.n	8006718 <xTaskCheckForTimeOut+0x24>
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	e7fe      	b.n	8006716 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <xTaskCheckForTimeOut+0x3e>
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	e7fe      	b.n	8006730 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006732:	f000 fe6b 	bl	800740c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006736:	4b1d      	ldr	r3, [pc, #116]	; (80067ac <xTaskCheckForTimeOut+0xb8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674e:	d102      	bne.n	8006756 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006750:	2300      	movs	r3, #0
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	e023      	b.n	800679e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <xTaskCheckForTimeOut+0xbc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d007      	beq.n	8006772 <xTaskCheckForTimeOut+0x7e>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	429a      	cmp	r2, r3
 800676a:	d302      	bcc.n	8006772 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800676c:	2301      	movs	r3, #1
 800676e:	61fb      	str	r3, [r7, #28]
 8006770:	e015      	b.n	800679e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	429a      	cmp	r2, r3
 800677a:	d20b      	bcs.n	8006794 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	1ad2      	subs	r2, r2, r3
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7ff ff9d 	bl	80066c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800678e:	2300      	movs	r3, #0
 8006790:	61fb      	str	r3, [r7, #28]
 8006792:	e004      	b.n	800679e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800679a:	2301      	movs	r3, #1
 800679c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800679e:	f000 fe63 	bl	8007468 <vPortExitCritical>

	return xReturn;
 80067a2:	69fb      	ldr	r3, [r7, #28]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3720      	adds	r7, #32
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20000cdc 	.word	0x20000cdc
 80067b0:	20000cf0 	.word	0x20000cf0

080067b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067b8:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <vTaskMissedYield+0x14>)
 80067ba:	2201      	movs	r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
}
 80067be:	bf00      	nop
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	20000cec 	.word	0x20000cec

080067cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067d4:	f000 f852 	bl	800687c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067d8:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <prvIdleTask+0x28>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d9f9      	bls.n	80067d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80067e0:	4b05      	ldr	r3, [pc, #20]	; (80067f8 <prvIdleTask+0x2c>)
 80067e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067f0:	e7f0      	b.n	80067d4 <prvIdleTask+0x8>
 80067f2:	bf00      	nop
 80067f4:	20000808 	.word	0x20000808
 80067f8:	e000ed04 	.word	0xe000ed04

080067fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006802:	2300      	movs	r3, #0
 8006804:	607b      	str	r3, [r7, #4]
 8006806:	e00c      	b.n	8006822 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4a12      	ldr	r2, [pc, #72]	; (800685c <prvInitialiseTaskLists+0x60>)
 8006814:	4413      	add	r3, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe fd1a 	bl	8005250 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3301      	adds	r3, #1
 8006820:	607b      	str	r3, [r7, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b37      	cmp	r3, #55	; 0x37
 8006826:	d9ef      	bls.n	8006808 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006828:	480d      	ldr	r0, [pc, #52]	; (8006860 <prvInitialiseTaskLists+0x64>)
 800682a:	f7fe fd11 	bl	8005250 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800682e:	480d      	ldr	r0, [pc, #52]	; (8006864 <prvInitialiseTaskLists+0x68>)
 8006830:	f7fe fd0e 	bl	8005250 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006834:	480c      	ldr	r0, [pc, #48]	; (8006868 <prvInitialiseTaskLists+0x6c>)
 8006836:	f7fe fd0b 	bl	8005250 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800683a:	480c      	ldr	r0, [pc, #48]	; (800686c <prvInitialiseTaskLists+0x70>)
 800683c:	f7fe fd08 	bl	8005250 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006840:	480b      	ldr	r0, [pc, #44]	; (8006870 <prvInitialiseTaskLists+0x74>)
 8006842:	f7fe fd05 	bl	8005250 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006846:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <prvInitialiseTaskLists+0x78>)
 8006848:	4a05      	ldr	r2, [pc, #20]	; (8006860 <prvInitialiseTaskLists+0x64>)
 800684a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800684c:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <prvInitialiseTaskLists+0x7c>)
 800684e:	4a05      	ldr	r2, [pc, #20]	; (8006864 <prvInitialiseTaskLists+0x68>)
 8006850:	601a      	str	r2, [r3, #0]
}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000808 	.word	0x20000808
 8006860:	20000c68 	.word	0x20000c68
 8006864:	20000c7c 	.word	0x20000c7c
 8006868:	20000c98 	.word	0x20000c98
 800686c:	20000cac 	.word	0x20000cac
 8006870:	20000cc4 	.word	0x20000cc4
 8006874:	20000c90 	.word	0x20000c90
 8006878:	20000c94 	.word	0x20000c94

0800687c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006882:	e019      	b.n	80068b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006884:	f000 fdc2 	bl	800740c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006888:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <prvCheckTasksWaitingTermination+0x4c>)
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3304      	adds	r3, #4
 8006894:	4618      	mov	r0, r3
 8006896:	f7fe fd65 	bl	8005364 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800689a:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <prvCheckTasksWaitingTermination+0x50>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3b01      	subs	r3, #1
 80068a0:	4a0a      	ldr	r2, [pc, #40]	; (80068cc <prvCheckTasksWaitingTermination+0x50>)
 80068a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068a4:	4b0a      	ldr	r3, [pc, #40]	; (80068d0 <prvCheckTasksWaitingTermination+0x54>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	4a09      	ldr	r2, [pc, #36]	; (80068d0 <prvCheckTasksWaitingTermination+0x54>)
 80068ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068ae:	f000 fddb 	bl	8007468 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f80e 	bl	80068d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068b8:	4b05      	ldr	r3, [pc, #20]	; (80068d0 <prvCheckTasksWaitingTermination+0x54>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e1      	bne.n	8006884 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20000cac 	.word	0x20000cac
 80068cc:	20000cd8 	.word	0x20000cd8
 80068d0:	20000cc0 	.word	0x20000cc0

080068d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d108      	bne.n	80068f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 ff6a 	bl	80077c4 <vPortFree>
				vPortFree( pxTCB );
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 ff67 	bl	80077c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068f6:	e017      	b.n	8006928 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d103      	bne.n	800690a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 ff5e 	bl	80077c4 <vPortFree>
	}
 8006908:	e00e      	b.n	8006928 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006910:	2b02      	cmp	r3, #2
 8006912:	d009      	beq.n	8006928 <prvDeleteTCB+0x54>
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	e7fe      	b.n	8006926 <prvDeleteTCB+0x52>
	}
 8006928:	bf00      	nop
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006936:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <prvResetNextTaskUnblockTime+0x38>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006940:	4b0a      	ldr	r3, [pc, #40]	; (800696c <prvResetNextTaskUnblockTime+0x3c>)
 8006942:	f04f 32ff 	mov.w	r2, #4294967295
 8006946:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006948:	e008      	b.n	800695c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <prvResetNextTaskUnblockTime+0x38>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	4a04      	ldr	r2, [pc, #16]	; (800696c <prvResetNextTaskUnblockTime+0x3c>)
 800695a:	6013      	str	r3, [r2, #0]
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	20000c90 	.word	0x20000c90
 800696c:	20000cf8 	.word	0x20000cf8

08006970 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006976:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <xTaskGetSchedulerState+0x34>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800697e:	2301      	movs	r3, #1
 8006980:	607b      	str	r3, [r7, #4]
 8006982:	e008      	b.n	8006996 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006984:	4b08      	ldr	r3, [pc, #32]	; (80069a8 <xTaskGetSchedulerState+0x38>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800698c:	2302      	movs	r3, #2
 800698e:	607b      	str	r3, [r7, #4]
 8006990:	e001      	b.n	8006996 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006992:	2300      	movs	r3, #0
 8006994:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006996:	687b      	ldr	r3, [r7, #4]
	}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	20000ce4 	.word	0x20000ce4
 80069a8:	20000d00 	.word	0x20000d00

080069ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d054      	beq.n	8006a6c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069c2:	4b2d      	ldr	r3, [pc, #180]	; (8006a78 <xTaskPriorityDisinherit+0xcc>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d009      	beq.n	80069e0 <xTaskPriorityDisinherit+0x34>
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	e7fe      	b.n	80069de <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <xTaskPriorityDisinherit+0x50>
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	60bb      	str	r3, [r7, #8]
 80069fa:	e7fe      	b.n	80069fa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a00:	1e5a      	subs	r2, r3, #1
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d02c      	beq.n	8006a6c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d128      	bne.n	8006a6c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe fca0 	bl	8005364 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3c:	4b0f      	ldr	r3, [pc, #60]	; (8006a7c <xTaskPriorityDisinherit+0xd0>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d903      	bls.n	8006a4c <xTaskPriorityDisinherit+0xa0>
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	4a0c      	ldr	r2, [pc, #48]	; (8006a7c <xTaskPriorityDisinherit+0xd0>)
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a50:	4613      	mov	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4a09      	ldr	r2, [pc, #36]	; (8006a80 <xTaskPriorityDisinherit+0xd4>)
 8006a5a:	441a      	add	r2, r3
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4619      	mov	r1, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	f7fe fc21 	bl	80052aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a6c:	697b      	ldr	r3, [r7, #20]
	}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20000804 	.word	0x20000804
 8006a7c:	20000ce0 	.word	0x20000ce0
 8006a80:	20000808 	.word	0x20000808

08006a84 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a8e:	4b21      	ldr	r3, [pc, #132]	; (8006b14 <prvAddCurrentTaskToDelayedList+0x90>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a94:	4b20      	ldr	r3, [pc, #128]	; (8006b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fc62 	bl	8005364 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa6:	d10a      	bne.n	8006abe <prvAddCurrentTaskToDelayedList+0x3a>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d007      	beq.n	8006abe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aae:	4b1a      	ldr	r3, [pc, #104]	; (8006b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4819      	ldr	r0, [pc, #100]	; (8006b1c <prvAddCurrentTaskToDelayedList+0x98>)
 8006ab8:	f7fe fbf7 	bl	80052aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006abc:	e026      	b.n	8006b0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ac6:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d209      	bcs.n	8006aea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ad6:	4b12      	ldr	r3, [pc, #72]	; (8006b20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4b0f      	ldr	r3, [pc, #60]	; (8006b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	f7fe fc05 	bl	80052f2 <vListInsert>
}
 8006ae8:	e010      	b.n	8006b0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aea:	4b0e      	ldr	r3, [pc, #56]	; (8006b24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <prvAddCurrentTaskToDelayedList+0x94>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3304      	adds	r3, #4
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f7fe fbfb 	bl	80052f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006afc:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d202      	bcs.n	8006b0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b06:	4a08      	ldr	r2, [pc, #32]	; (8006b28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	6013      	str	r3, [r2, #0]
}
 8006b0c:	bf00      	nop
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	20000cdc 	.word	0x20000cdc
 8006b18:	20000804 	.word	0x20000804
 8006b1c:	20000cc4 	.word	0x20000cc4
 8006b20:	20000c94 	.word	0x20000c94
 8006b24:	20000c90 	.word	0x20000c90
 8006b28:	20000cf8 	.word	0x20000cf8

08006b2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b08a      	sub	sp, #40	; 0x28
 8006b30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b36:	f000 faff 	bl	8007138 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b3a:	4b1c      	ldr	r3, [pc, #112]	; (8006bac <xTimerCreateTimerTask+0x80>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d021      	beq.n	8006b86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b42:	2300      	movs	r3, #0
 8006b44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b4a:	1d3a      	adds	r2, r7, #4
 8006b4c:	f107 0108 	add.w	r1, r7, #8
 8006b50:	f107 030c 	add.w	r3, r7, #12
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7fe fb61 	bl	800521c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	9202      	str	r2, [sp, #8]
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	2302      	movs	r3, #2
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	460a      	mov	r2, r1
 8006b6c:	4910      	ldr	r1, [pc, #64]	; (8006bb0 <xTimerCreateTimerTask+0x84>)
 8006b6e:	4811      	ldr	r0, [pc, #68]	; (8006bb4 <xTimerCreateTimerTask+0x88>)
 8006b70:	f7ff f8f6 	bl	8005d60 <xTaskCreateStatic>
 8006b74:	4602      	mov	r2, r0
 8006b76:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <xTimerCreateTimerTask+0x8c>)
 8006b78:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b7a:	4b0f      	ldr	r3, [pc, #60]	; (8006bb8 <xTimerCreateTimerTask+0x8c>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b82:	2301      	movs	r3, #1
 8006b84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d109      	bne.n	8006ba0 <xTimerCreateTimerTask+0x74>
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	613b      	str	r3, [r7, #16]
 8006b9e:	e7fe      	b.n	8006b9e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006ba0:	697b      	ldr	r3, [r7, #20]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000d34 	.word	0x20000d34
 8006bb0:	08008358 	.word	0x08008358
 8006bb4:	08006ced 	.word	0x08006ced
 8006bb8:	20000d38 	.word	0x20000d38

08006bbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08a      	sub	sp, #40	; 0x28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d109      	bne.n	8006be8 <xTimerGenericCommand+0x2c>
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	623b      	str	r3, [r7, #32]
 8006be6:	e7fe      	b.n	8006be6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006be8:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <xTimerGenericCommand+0x94>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d02a      	beq.n	8006c46 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b05      	cmp	r3, #5
 8006c00:	dc18      	bgt.n	8006c34 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c02:	f7ff feb5 	bl	8006970 <xTaskGetSchedulerState>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d109      	bne.n	8006c20 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c0c:	4b10      	ldr	r3, [pc, #64]	; (8006c50 <xTimerGenericCommand+0x94>)
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	f107 0110 	add.w	r1, r7, #16
 8006c14:	2300      	movs	r3, #0
 8006c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c18:	f7fe fccc 	bl	80055b4 <xQueueGenericSend>
 8006c1c:	6278      	str	r0, [r7, #36]	; 0x24
 8006c1e:	e012      	b.n	8006c46 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c20:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <xTimerGenericCommand+0x94>)
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	f107 0110 	add.w	r1, r7, #16
 8006c28:	2300      	movs	r3, #0
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f7fe fcc2 	bl	80055b4 <xQueueGenericSend>
 8006c30:	6278      	str	r0, [r7, #36]	; 0x24
 8006c32:	e008      	b.n	8006c46 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <xTimerGenericCommand+0x94>)
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	f107 0110 	add.w	r1, r7, #16
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	f7fe fdb2 	bl	80057a8 <xQueueGenericSendFromISR>
 8006c44:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3728      	adds	r7, #40	; 0x28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20000d34 	.word	0x20000d34

08006c54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b088      	sub	sp, #32
 8006c58:	af02      	add	r7, sp, #8
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c5e:	4b22      	ldr	r3, [pc, #136]	; (8006ce8 <prvProcessExpiredTimer+0x94>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fe fb79 	bl	8005364 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c78:	f003 0304 	and.w	r3, r3, #4
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d021      	beq.n	8006cc4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	699a      	ldr	r2, [r3, #24]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	18d1      	adds	r1, r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	6978      	ldr	r0, [r7, #20]
 8006c8e:	f000 f8d1 	bl	8006e34 <prvInsertTimerInActiveList>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d01e      	beq.n	8006cd6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c98:	2300      	movs	r3, #0
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	6978      	ldr	r0, [r7, #20]
 8006ca4:	f7ff ff8a 	bl	8006bbc <xTimerGenericCommand>
 8006ca8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d112      	bne.n	8006cd6 <prvProcessExpiredTimer+0x82>
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	e7fe      	b.n	8006cc2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cca:	f023 0301 	bic.w	r3, r3, #1
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	6978      	ldr	r0, [r7, #20]
 8006cdc:	4798      	blx	r3
}
 8006cde:	bf00      	nop
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20000d2c 	.word	0x20000d2c

08006cec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cf4:	f107 0308 	add.w	r3, r7, #8
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 f857 	bl	8006dac <prvGetNextExpireTime>
 8006cfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4619      	mov	r1, r3
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 f803 	bl	8006d10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d0a:	f000 f8d5 	bl	8006eb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d0e:	e7f1      	b.n	8006cf4 <prvTimerTask+0x8>

08006d10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d1a:	f7ff fa57 	bl	80061cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d1e:	f107 0308 	add.w	r3, r7, #8
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 f866 	bl	8006df4 <prvSampleTimeNow>
 8006d28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d130      	bne.n	8006d92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <prvProcessTimerOrBlockTask+0x3c>
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d806      	bhi.n	8006d4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d3e:	f7ff fa53 	bl	80061e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d42:	68f9      	ldr	r1, [r7, #12]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7ff ff85 	bl	8006c54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d4a:	e024      	b.n	8006d96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d008      	beq.n	8006d64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d52:	4b13      	ldr	r3, [pc, #76]	; (8006da0 <prvProcessTimerOrBlockTask+0x90>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <prvProcessTimerOrBlockTask+0x50>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e000      	b.n	8006d62 <prvProcessTimerOrBlockTask+0x52>
 8006d60:	2300      	movs	r3, #0
 8006d62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d64:	4b0f      	ldr	r3, [pc, #60]	; (8006da4 <prvProcessTimerOrBlockTask+0x94>)
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	4619      	mov	r1, r3
 8006d72:	f7fe ffc1 	bl	8005cf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d76:	f7ff fa37 	bl	80061e8 <xTaskResumeAll>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10a      	bne.n	8006d96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d80:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <prvProcessTimerOrBlockTask+0x98>)
 8006d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
}
 8006d90:	e001      	b.n	8006d96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d92:	f7ff fa29 	bl	80061e8 <xTaskResumeAll>
}
 8006d96:	bf00      	nop
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000d30 	.word	0x20000d30
 8006da4:	20000d34 	.word	0x20000d34
 8006da8:	e000ed04 	.word	0xe000ed04

08006dac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006db4:	4b0e      	ldr	r3, [pc, #56]	; (8006df0 <prvGetNextExpireTime+0x44>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <prvGetNextExpireTime+0x16>
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	e000      	b.n	8006dc4 <prvGetNextExpireTime+0x18>
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d105      	bne.n	8006ddc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dd0:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <prvGetNextExpireTime+0x44>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	e001      	b.n	8006de0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006de0:	68fb      	ldr	r3, [r7, #12]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	20000d2c 	.word	0x20000d2c

08006df4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006dfc:	f7ff fa90 	bl	8006320 <xTaskGetTickCount>
 8006e00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e02:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <prvSampleTimeNow+0x3c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d205      	bcs.n	8006e18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e0c:	f000 f930 	bl	8007070 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	e002      	b.n	8006e1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e1e:	4a04      	ldr	r2, [pc, #16]	; (8006e30 <prvSampleTimeNow+0x3c>)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e24:	68fb      	ldr	r3, [r7, #12]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20000d3c 	.word	0x20000d3c

08006e34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d812      	bhi.n	8006e80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d302      	bcc.n	8006e6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	e01b      	b.n	8006ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e6e:	4b10      	ldr	r3, [pc, #64]	; (8006eb0 <prvInsertTimerInActiveList+0x7c>)
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3304      	adds	r3, #4
 8006e76:	4619      	mov	r1, r3
 8006e78:	4610      	mov	r0, r2
 8006e7a:	f7fe fa3a 	bl	80052f2 <vListInsert>
 8006e7e:	e012      	b.n	8006ea6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d206      	bcs.n	8006e96 <prvInsertTimerInActiveList+0x62>
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d302      	bcc.n	8006e96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e90:	2301      	movs	r3, #1
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	e007      	b.n	8006ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e96:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <prvInsertTimerInActiveList+0x80>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	f7fe fa26 	bl	80052f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ea6:	697b      	ldr	r3, [r7, #20]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	20000d30 	.word	0x20000d30
 8006eb4:	20000d2c 	.word	0x20000d2c

08006eb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08e      	sub	sp, #56	; 0x38
 8006ebc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ebe:	e0c6      	b.n	800704e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	da17      	bge.n	8006ef6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ec6:	1d3b      	adds	r3, r7, #4
 8006ec8:	3304      	adds	r3, #4
 8006eca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <prvProcessReceivedCommands+0x2e>
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	61fb      	str	r3, [r7, #28]
 8006ee4:	e7fe      	b.n	8006ee4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eec:	6850      	ldr	r0, [r2, #4]
 8006eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ef0:	6892      	ldr	r2, [r2, #8]
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f2c0 80a7 	blt.w	800704c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d004      	beq.n	8006f14 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fa28 	bl	8005364 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f14:	463b      	mov	r3, r7
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff ff6c 	bl	8006df4 <prvSampleTimeNow>
 8006f1c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b09      	cmp	r3, #9
 8006f22:	f200 8094 	bhi.w	800704e <prvProcessReceivedCommands+0x196>
 8006f26:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <prvProcessReceivedCommands+0x74>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006f55 	.word	0x08006f55
 8006f30:	08006f55 	.word	0x08006f55
 8006f34:	08006f55 	.word	0x08006f55
 8006f38:	08006fc7 	.word	0x08006fc7
 8006f3c:	08006fdb 	.word	0x08006fdb
 8006f40:	08007023 	.word	0x08007023
 8006f44:	08006f55 	.word	0x08006f55
 8006f48:	08006f55 	.word	0x08006f55
 8006f4c:	08006fc7 	.word	0x08006fc7
 8006f50:	08006fdb 	.word	0x08006fdb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f5a:	f043 0301 	orr.w	r3, r3, #1
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	18d1      	adds	r1, r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f74:	f7ff ff5e 	bl	8006e34 <prvInsertTimerInActiveList>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d067      	beq.n	800704e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d05c      	beq.n	800704e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	441a      	add	r2, r3
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa6:	f7ff fe09 	bl	8006bbc <xTimerGenericCommand>
 8006faa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d14d      	bne.n	800704e <prvProcessReceivedCommands+0x196>
 8006fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	61bb      	str	r3, [r7, #24]
 8006fc4:	e7fe      	b.n	8006fc4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fcc:	f023 0301 	bic.w	r3, r3, #1
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006fd8:	e039      	b.n	800704e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fe0:	f043 0301 	orr.w	r3, r3, #1
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d109      	bne.n	800700e <prvProcessReceivedCommands+0x156>
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	e7fe      	b.n	800700c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007010:	699a      	ldr	r2, [r3, #24]
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	18d1      	adds	r1, r2, r3
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800701c:	f7ff ff0a 	bl	8006e34 <prvInsertTimerInActiveList>
					break;
 8007020:	e015      	b.n	800704e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d103      	bne.n	8007038 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007032:	f000 fbc7 	bl	80077c4 <vPortFree>
 8007036:	e00a      	b.n	800704e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800703e:	f023 0301 	bic.w	r3, r3, #1
 8007042:	b2da      	uxtb	r2, r3
 8007044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800704a:	e000      	b.n	800704e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800704c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800704e:	4b07      	ldr	r3, [pc, #28]	; (800706c <prvProcessReceivedCommands+0x1b4>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	1d39      	adds	r1, r7, #4
 8007054:	2200      	movs	r2, #0
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fc3a 	bl	80058d0 <xQueueReceive>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	f47f af2e 	bne.w	8006ec0 <prvProcessReceivedCommands+0x8>
	}
}
 8007064:	bf00      	nop
 8007066:	3730      	adds	r7, #48	; 0x30
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20000d34 	.word	0x20000d34

08007070 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007076:	e047      	b.n	8007108 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007078:	4b2d      	ldr	r3, [pc, #180]	; (8007130 <prvSwitchTimerLists+0xc0>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007082:	4b2b      	ldr	r3, [pc, #172]	; (8007130 <prvSwitchTimerLists+0xc0>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3304      	adds	r3, #4
 8007090:	4618      	mov	r0, r3
 8007092:	f7fe f967 	bl	8005364 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d02d      	beq.n	8007108 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4413      	add	r3, r2
 80070b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d90e      	bls.n	80070dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070ca:	4b19      	ldr	r3, [pc, #100]	; (8007130 <prvSwitchTimerLists+0xc0>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3304      	adds	r3, #4
 80070d2:	4619      	mov	r1, r3
 80070d4:	4610      	mov	r0, r2
 80070d6:	f7fe f90c 	bl	80052f2 <vListInsert>
 80070da:	e015      	b.n	8007108 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070dc:	2300      	movs	r3, #0
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	2300      	movs	r3, #0
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	2100      	movs	r1, #0
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f7ff fd68 	bl	8006bbc <xTimerGenericCommand>
 80070ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d109      	bne.n	8007108 <prvSwitchTimerLists+0x98>
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	603b      	str	r3, [r7, #0]
 8007106:	e7fe      	b.n	8007106 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007108:	4b09      	ldr	r3, [pc, #36]	; (8007130 <prvSwitchTimerLists+0xc0>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1b2      	bne.n	8007078 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007112:	4b07      	ldr	r3, [pc, #28]	; (8007130 <prvSwitchTimerLists+0xc0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007118:	4b06      	ldr	r3, [pc, #24]	; (8007134 <prvSwitchTimerLists+0xc4>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a04      	ldr	r2, [pc, #16]	; (8007130 <prvSwitchTimerLists+0xc0>)
 800711e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007120:	4a04      	ldr	r2, [pc, #16]	; (8007134 <prvSwitchTimerLists+0xc4>)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	6013      	str	r3, [r2, #0]
}
 8007126:	bf00      	nop
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20000d2c 	.word	0x20000d2c
 8007134:	20000d30 	.word	0x20000d30

08007138 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800713e:	f000 f965 	bl	800740c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007142:	4b15      	ldr	r3, [pc, #84]	; (8007198 <prvCheckForValidListAndQueue+0x60>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d120      	bne.n	800718c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800714a:	4814      	ldr	r0, [pc, #80]	; (800719c <prvCheckForValidListAndQueue+0x64>)
 800714c:	f7fe f880 	bl	8005250 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007150:	4813      	ldr	r0, [pc, #76]	; (80071a0 <prvCheckForValidListAndQueue+0x68>)
 8007152:	f7fe f87d 	bl	8005250 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007156:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <prvCheckForValidListAndQueue+0x6c>)
 8007158:	4a10      	ldr	r2, [pc, #64]	; (800719c <prvCheckForValidListAndQueue+0x64>)
 800715a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800715c:	4b12      	ldr	r3, [pc, #72]	; (80071a8 <prvCheckForValidListAndQueue+0x70>)
 800715e:	4a10      	ldr	r2, [pc, #64]	; (80071a0 <prvCheckForValidListAndQueue+0x68>)
 8007160:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007162:	2300      	movs	r3, #0
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	4b11      	ldr	r3, [pc, #68]	; (80071ac <prvCheckForValidListAndQueue+0x74>)
 8007168:	4a11      	ldr	r2, [pc, #68]	; (80071b0 <prvCheckForValidListAndQueue+0x78>)
 800716a:	2110      	movs	r1, #16
 800716c:	200a      	movs	r0, #10
 800716e:	f7fe f98b 	bl	8005488 <xQueueGenericCreateStatic>
 8007172:	4602      	mov	r2, r0
 8007174:	4b08      	ldr	r3, [pc, #32]	; (8007198 <prvCheckForValidListAndQueue+0x60>)
 8007176:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007178:	4b07      	ldr	r3, [pc, #28]	; (8007198 <prvCheckForValidListAndQueue+0x60>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007180:	4b05      	ldr	r3, [pc, #20]	; (8007198 <prvCheckForValidListAndQueue+0x60>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	490b      	ldr	r1, [pc, #44]	; (80071b4 <prvCheckForValidListAndQueue+0x7c>)
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fd8e 	bl	8005ca8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800718c:	f000 f96c 	bl	8007468 <vPortExitCritical>
}
 8007190:	bf00      	nop
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000d34 	.word	0x20000d34
 800719c:	20000d04 	.word	0x20000d04
 80071a0:	20000d18 	.word	0x20000d18
 80071a4:	20000d2c 	.word	0x20000d2c
 80071a8:	20000d30 	.word	0x20000d30
 80071ac:	20000de0 	.word	0x20000de0
 80071b0:	20000d40 	.word	0x20000d40
 80071b4:	08008360 	.word	0x08008360

080071b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3b04      	subs	r3, #4
 80071c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3b04      	subs	r3, #4
 80071d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f023 0201 	bic.w	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3b04      	subs	r3, #4
 80071e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071e8:	4a0c      	ldr	r2, [pc, #48]	; (800721c <pxPortInitialiseStack+0x64>)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3b14      	subs	r3, #20
 80071f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3b04      	subs	r3, #4
 80071fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f06f 0202 	mvn.w	r2, #2
 8007206:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3b20      	subs	r3, #32
 800720c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800720e:	68fb      	ldr	r3, [r7, #12]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	08007221 	.word	0x08007221

08007220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007226:	2300      	movs	r3, #0
 8007228:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800722a:	4b11      	ldr	r3, [pc, #68]	; (8007270 <prvTaskExitError+0x50>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007232:	d009      	beq.n	8007248 <prvTaskExitError+0x28>
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	e7fe      	b.n	8007246 <prvTaskExitError+0x26>
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800725a:	bf00      	nop
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0fc      	beq.n	800725c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007262:	bf00      	nop
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	20000040 	.word	0x20000040
	...

08007280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <pxCurrentTCBConst2>)
 8007282:	6819      	ldr	r1, [r3, #0]
 8007284:	6808      	ldr	r0, [r1, #0]
 8007286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728a:	f380 8809 	msr	PSP, r0
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f04f 0000 	mov.w	r0, #0
 8007296:	f380 8811 	msr	BASEPRI, r0
 800729a:	4770      	bx	lr
 800729c:	f3af 8000 	nop.w

080072a0 <pxCurrentTCBConst2>:
 80072a0:	20000804 	.word	0x20000804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop

080072a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072a8:	4808      	ldr	r0, [pc, #32]	; (80072cc <prvPortStartFirstTask+0x24>)
 80072aa:	6800      	ldr	r0, [r0, #0]
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f380 8808 	msr	MSP, r0
 80072b2:	f04f 0000 	mov.w	r0, #0
 80072b6:	f380 8814 	msr	CONTROL, r0
 80072ba:	b662      	cpsie	i
 80072bc:	b661      	cpsie	f
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	df00      	svc	0
 80072c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ca:	bf00      	nop
 80072cc:	e000ed08 	.word	0xe000ed08

080072d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072d6:	4b44      	ldr	r3, [pc, #272]	; (80073e8 <xPortStartScheduler+0x118>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a44      	ldr	r2, [pc, #272]	; (80073ec <xPortStartScheduler+0x11c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d109      	bne.n	80072f4 <xPortStartScheduler+0x24>
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	613b      	str	r3, [r7, #16]
 80072f2:	e7fe      	b.n	80072f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072f4:	4b3c      	ldr	r3, [pc, #240]	; (80073e8 <xPortStartScheduler+0x118>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a3d      	ldr	r2, [pc, #244]	; (80073f0 <xPortStartScheduler+0x120>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d109      	bne.n	8007312 <xPortStartScheduler+0x42>
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	e7fe      	b.n	8007310 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007312:	4b38      	ldr	r3, [pc, #224]	; (80073f4 <xPortStartScheduler+0x124>)
 8007314:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	22ff      	movs	r2, #255	; 0xff
 8007322:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007334:	b2da      	uxtb	r2, r3
 8007336:	4b30      	ldr	r3, [pc, #192]	; (80073f8 <xPortStartScheduler+0x128>)
 8007338:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800733a:	4b30      	ldr	r3, [pc, #192]	; (80073fc <xPortStartScheduler+0x12c>)
 800733c:	2207      	movs	r2, #7
 800733e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007340:	e009      	b.n	8007356 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007342:	4b2e      	ldr	r3, [pc, #184]	; (80073fc <xPortStartScheduler+0x12c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3b01      	subs	r3, #1
 8007348:	4a2c      	ldr	r2, [pc, #176]	; (80073fc <xPortStartScheduler+0x12c>)
 800734a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	b2db      	uxtb	r3, r3
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	b2db      	uxtb	r3, r3
 8007354:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	d0ef      	beq.n	8007342 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007362:	4b26      	ldr	r3, [pc, #152]	; (80073fc <xPortStartScheduler+0x12c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f1c3 0307 	rsb	r3, r3, #7
 800736a:	2b04      	cmp	r3, #4
 800736c:	d009      	beq.n	8007382 <xPortStartScheduler+0xb2>
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	60bb      	str	r3, [r7, #8]
 8007380:	e7fe      	b.n	8007380 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007382:	4b1e      	ldr	r3, [pc, #120]	; (80073fc <xPortStartScheduler+0x12c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <xPortStartScheduler+0x12c>)
 800738a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800738c:	4b1b      	ldr	r3, [pc, #108]	; (80073fc <xPortStartScheduler+0x12c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007394:	4a19      	ldr	r2, [pc, #100]	; (80073fc <xPortStartScheduler+0x12c>)
 8007396:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	b2da      	uxtb	r2, r3
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073a0:	4b17      	ldr	r3, [pc, #92]	; (8007400 <xPortStartScheduler+0x130>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a16      	ldr	r2, [pc, #88]	; (8007400 <xPortStartScheduler+0x130>)
 80073a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073ac:	4b14      	ldr	r3, [pc, #80]	; (8007400 <xPortStartScheduler+0x130>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a13      	ldr	r2, [pc, #76]	; (8007400 <xPortStartScheduler+0x130>)
 80073b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80073b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073b8:	f000 f8d6 	bl	8007568 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073bc:	4b11      	ldr	r3, [pc, #68]	; (8007404 <xPortStartScheduler+0x134>)
 80073be:	2200      	movs	r2, #0
 80073c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073c2:	f000 f8f5 	bl	80075b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073c6:	4b10      	ldr	r3, [pc, #64]	; (8007408 <xPortStartScheduler+0x138>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a0f      	ldr	r2, [pc, #60]	; (8007408 <xPortStartScheduler+0x138>)
 80073cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073d2:	f7ff ff69 	bl	80072a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073d6:	f7ff f86b 	bl	80064b0 <vTaskSwitchContext>
	prvTaskExitError();
 80073da:	f7ff ff21 	bl	8007220 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	e000ed00 	.word	0xe000ed00
 80073ec:	410fc271 	.word	0x410fc271
 80073f0:	410fc270 	.word	0x410fc270
 80073f4:	e000e400 	.word	0xe000e400
 80073f8:	20000e30 	.word	0x20000e30
 80073fc:	20000e34 	.word	0x20000e34
 8007400:	e000ed20 	.word	0xe000ed20
 8007404:	20000040 	.word	0x20000040
 8007408:	e000ef34 	.word	0xe000ef34

0800740c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007424:	4b0e      	ldr	r3, [pc, #56]	; (8007460 <vPortEnterCritical+0x54>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3301      	adds	r3, #1
 800742a:	4a0d      	ldr	r2, [pc, #52]	; (8007460 <vPortEnterCritical+0x54>)
 800742c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800742e:	4b0c      	ldr	r3, [pc, #48]	; (8007460 <vPortEnterCritical+0x54>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d10e      	bne.n	8007454 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007436:	4b0b      	ldr	r3, [pc, #44]	; (8007464 <vPortEnterCritical+0x58>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	d009      	beq.n	8007454 <vPortEnterCritical+0x48>
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	603b      	str	r3, [r7, #0]
 8007452:	e7fe      	b.n	8007452 <vPortEnterCritical+0x46>
	}
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	20000040 	.word	0x20000040
 8007464:	e000ed04 	.word	0xe000ed04

08007468 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800746e:	4b11      	ldr	r3, [pc, #68]	; (80074b4 <vPortExitCritical+0x4c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d109      	bne.n	800748a <vPortExitCritical+0x22>
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	607b      	str	r3, [r7, #4]
 8007488:	e7fe      	b.n	8007488 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800748a:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <vPortExitCritical+0x4c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3b01      	subs	r3, #1
 8007490:	4a08      	ldr	r2, [pc, #32]	; (80074b4 <vPortExitCritical+0x4c>)
 8007492:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007494:	4b07      	ldr	r3, [pc, #28]	; (80074b4 <vPortExitCritical+0x4c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d104      	bne.n	80074a6 <vPortExitCritical+0x3e>
 800749c:	2300      	movs	r3, #0
 800749e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80074a6:	bf00      	nop
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	20000040 	.word	0x20000040
	...

080074c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074c0:	f3ef 8009 	mrs	r0, PSP
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	4b15      	ldr	r3, [pc, #84]	; (8007520 <pxCurrentTCBConst>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	f01e 0f10 	tst.w	lr, #16
 80074d0:	bf08      	it	eq
 80074d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	6010      	str	r0, [r2, #0]
 80074dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074e4:	f380 8811 	msr	BASEPRI, r0
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f7fe ffde 	bl	80064b0 <vTaskSwitchContext>
 80074f4:	f04f 0000 	mov.w	r0, #0
 80074f8:	f380 8811 	msr	BASEPRI, r0
 80074fc:	bc09      	pop	{r0, r3}
 80074fe:	6819      	ldr	r1, [r3, #0]
 8007500:	6808      	ldr	r0, [r1, #0]
 8007502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007506:	f01e 0f10 	tst.w	lr, #16
 800750a:	bf08      	it	eq
 800750c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007510:	f380 8809 	msr	PSP, r0
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	f3af 8000 	nop.w

08007520 <pxCurrentTCBConst>:
 8007520:	20000804 	.word	0x20000804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop

08007528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007540:	f7fe fefe 	bl	8006340 <xTaskIncrementTick>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800754a:	4b06      	ldr	r3, [pc, #24]	; (8007564 <SysTick_Handler+0x3c>)
 800754c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	2300      	movs	r3, #0
 8007554:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800755c:	bf00      	nop
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	e000ed04 	.word	0xe000ed04

08007568 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800756c:	4b0b      	ldr	r3, [pc, #44]	; (800759c <vPortSetupTimerInterrupt+0x34>)
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007572:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <vPortSetupTimerInterrupt+0x38>)
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007578:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <vPortSetupTimerInterrupt+0x3c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a0a      	ldr	r2, [pc, #40]	; (80075a8 <vPortSetupTimerInterrupt+0x40>)
 800757e:	fba2 2303 	umull	r2, r3, r2, r3
 8007582:	099b      	lsrs	r3, r3, #6
 8007584:	4a09      	ldr	r2, [pc, #36]	; (80075ac <vPortSetupTimerInterrupt+0x44>)
 8007586:	3b01      	subs	r3, #1
 8007588:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800758a:	4b04      	ldr	r3, [pc, #16]	; (800759c <vPortSetupTimerInterrupt+0x34>)
 800758c:	2207      	movs	r2, #7
 800758e:	601a      	str	r2, [r3, #0]
}
 8007590:	bf00      	nop
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	e000e010 	.word	0xe000e010
 80075a0:	e000e018 	.word	0xe000e018
 80075a4:	20000034 	.word	0x20000034
 80075a8:	10624dd3 	.word	0x10624dd3
 80075ac:	e000e014 	.word	0xe000e014

080075b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075c0 <vPortEnableVFP+0x10>
 80075b4:	6801      	ldr	r1, [r0, #0]
 80075b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80075ba:	6001      	str	r1, [r0, #0]
 80075bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075be:	bf00      	nop
 80075c0:	e000ed88 	.word	0xe000ed88

080075c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075ca:	f3ef 8305 	mrs	r3, IPSR
 80075ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b0f      	cmp	r3, #15
 80075d4:	d913      	bls.n	80075fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075d6:	4a16      	ldr	r2, [pc, #88]	; (8007630 <vPortValidateInterruptPriority+0x6c>)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075e0:	4b14      	ldr	r3, [pc, #80]	; (8007634 <vPortValidateInterruptPriority+0x70>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	7afa      	ldrb	r2, [r7, #11]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d209      	bcs.n	80075fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	607b      	str	r3, [r7, #4]
 80075fc:	e7fe      	b.n	80075fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075fe:	4b0e      	ldr	r3, [pc, #56]	; (8007638 <vPortValidateInterruptPriority+0x74>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007606:	4b0d      	ldr	r3, [pc, #52]	; (800763c <vPortValidateInterruptPriority+0x78>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d909      	bls.n	8007622 <vPortValidateInterruptPriority+0x5e>
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	e7fe      	b.n	8007620 <vPortValidateInterruptPriority+0x5c>
	}
 8007622:	bf00      	nop
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	e000e3f0 	.word	0xe000e3f0
 8007634:	20000e30 	.word	0x20000e30
 8007638:	e000ed0c 	.word	0xe000ed0c
 800763c:	20000e34 	.word	0x20000e34

08007640 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08a      	sub	sp, #40	; 0x28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007648:	2300      	movs	r3, #0
 800764a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800764c:	f7fe fdbe 	bl	80061cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007650:	4b57      	ldr	r3, [pc, #348]	; (80077b0 <pvPortMalloc+0x170>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007658:	f000 f90c 	bl	8007874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800765c:	4b55      	ldr	r3, [pc, #340]	; (80077b4 <pvPortMalloc+0x174>)
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4013      	ands	r3, r2
 8007664:	2b00      	cmp	r3, #0
 8007666:	f040 808c 	bne.w	8007782 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01c      	beq.n	80076aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007670:	2208      	movs	r2, #8
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4413      	add	r3, r2
 8007676:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f003 0307 	and.w	r3, r3, #7
 800767e:	2b00      	cmp	r3, #0
 8007680:	d013      	beq.n	80076aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f023 0307 	bic.w	r3, r3, #7
 8007688:	3308      	adds	r3, #8
 800768a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	2b00      	cmp	r3, #0
 8007694:	d009      	beq.n	80076aa <pvPortMalloc+0x6a>
 8007696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	e7fe      	b.n	80076a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d068      	beq.n	8007782 <pvPortMalloc+0x142>
 80076b0:	4b41      	ldr	r3, [pc, #260]	; (80077b8 <pvPortMalloc+0x178>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d863      	bhi.n	8007782 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076ba:	4b40      	ldr	r3, [pc, #256]	; (80077bc <pvPortMalloc+0x17c>)
 80076bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076be:	4b3f      	ldr	r3, [pc, #252]	; (80077bc <pvPortMalloc+0x17c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076c4:	e004      	b.n	80076d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d903      	bls.n	80076e2 <pvPortMalloc+0xa2>
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1f1      	bne.n	80076c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076e2:	4b33      	ldr	r3, [pc, #204]	; (80077b0 <pvPortMalloc+0x170>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d04a      	beq.n	8007782 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2208      	movs	r2, #8
 80076f2:	4413      	add	r3, r2
 80076f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	1ad2      	subs	r2, r2, r3
 8007706:	2308      	movs	r3, #8
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	429a      	cmp	r2, r3
 800770c:	d91e      	bls.n	800774c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800770e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4413      	add	r3, r2
 8007714:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	f003 0307 	and.w	r3, r3, #7
 800771c:	2b00      	cmp	r3, #0
 800771e:	d009      	beq.n	8007734 <pvPortMalloc+0xf4>
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	e7fe      	b.n	8007732 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	1ad2      	subs	r2, r2, r3
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007746:	69b8      	ldr	r0, [r7, #24]
 8007748:	f000 f8f6 	bl	8007938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800774c:	4b1a      	ldr	r3, [pc, #104]	; (80077b8 <pvPortMalloc+0x178>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	4a18      	ldr	r2, [pc, #96]	; (80077b8 <pvPortMalloc+0x178>)
 8007758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800775a:	4b17      	ldr	r3, [pc, #92]	; (80077b8 <pvPortMalloc+0x178>)
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	4b18      	ldr	r3, [pc, #96]	; (80077c0 <pvPortMalloc+0x180>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d203      	bcs.n	800776e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007766:	4b14      	ldr	r3, [pc, #80]	; (80077b8 <pvPortMalloc+0x178>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a15      	ldr	r2, [pc, #84]	; (80077c0 <pvPortMalloc+0x180>)
 800776c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	4b10      	ldr	r3, [pc, #64]	; (80077b4 <pvPortMalloc+0x174>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	431a      	orrs	r2, r3
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007782:	f7fe fd31 	bl	80061e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	2b00      	cmp	r3, #0
 800778e:	d009      	beq.n	80077a4 <pvPortMalloc+0x164>
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	e7fe      	b.n	80077a2 <pvPortMalloc+0x162>
	return pvReturn;
 80077a4:	69fb      	ldr	r3, [r7, #28]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3728      	adds	r7, #40	; 0x28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	200019f8 	.word	0x200019f8
 80077b4:	20001a04 	.word	0x20001a04
 80077b8:	200019fc 	.word	0x200019fc
 80077bc:	200019f0 	.word	0x200019f0
 80077c0:	20001a00 	.word	0x20001a00

080077c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d046      	beq.n	8007864 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077d6:	2308      	movs	r3, #8
 80077d8:	425b      	negs	r3, r3
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4413      	add	r3, r2
 80077de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	4b20      	ldr	r3, [pc, #128]	; (800786c <vPortFree+0xa8>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4013      	ands	r3, r2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d109      	bne.n	8007806 <vPortFree+0x42>
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	e7fe      	b.n	8007804 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d009      	beq.n	8007822 <vPortFree+0x5e>
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	60bb      	str	r3, [r7, #8]
 8007820:	e7fe      	b.n	8007820 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	4b11      	ldr	r3, [pc, #68]	; (800786c <vPortFree+0xa8>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4013      	ands	r3, r2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d019      	beq.n	8007864 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d115      	bne.n	8007864 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	4b0b      	ldr	r3, [pc, #44]	; (800786c <vPortFree+0xa8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	43db      	mvns	r3, r3
 8007842:	401a      	ands	r2, r3
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007848:	f7fe fcc0 	bl	80061cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <vPortFree+0xac>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4413      	add	r3, r2
 8007856:	4a06      	ldr	r2, [pc, #24]	; (8007870 <vPortFree+0xac>)
 8007858:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800785a:	6938      	ldr	r0, [r7, #16]
 800785c:	f000 f86c 	bl	8007938 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007860:	f7fe fcc2 	bl	80061e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007864:	bf00      	nop
 8007866:	3718      	adds	r7, #24
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	20001a04 	.word	0x20001a04
 8007870:	200019fc 	.word	0x200019fc

08007874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800787a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800787e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007880:	4b27      	ldr	r3, [pc, #156]	; (8007920 <prvHeapInit+0xac>)
 8007882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00c      	beq.n	80078a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3307      	adds	r3, #7
 8007892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0307 	bic.w	r3, r3, #7
 800789a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	4a1f      	ldr	r2, [pc, #124]	; (8007920 <prvHeapInit+0xac>)
 80078a4:	4413      	add	r3, r2
 80078a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078ac:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <prvHeapInit+0xb0>)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078b2:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <prvHeapInit+0xb0>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	4413      	add	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078c0:	2208      	movs	r2, #8
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	1a9b      	subs	r3, r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0307 	bic.w	r3, r3, #7
 80078ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4a15      	ldr	r2, [pc, #84]	; (8007928 <prvHeapInit+0xb4>)
 80078d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078d6:	4b14      	ldr	r3, [pc, #80]	; (8007928 <prvHeapInit+0xb4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2200      	movs	r2, #0
 80078dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078de:	4b12      	ldr	r3, [pc, #72]	; (8007928 <prvHeapInit+0xb4>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	1ad2      	subs	r2, r2, r3
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078f4:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <prvHeapInit+0xb4>)
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	4a0a      	ldr	r2, [pc, #40]	; (800792c <prvHeapInit+0xb8>)
 8007902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	4a09      	ldr	r2, [pc, #36]	; (8007930 <prvHeapInit+0xbc>)
 800790a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800790c:	4b09      	ldr	r3, [pc, #36]	; (8007934 <prvHeapInit+0xc0>)
 800790e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007912:	601a      	str	r2, [r3, #0]
}
 8007914:	bf00      	nop
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	20000e38 	.word	0x20000e38
 8007924:	200019f0 	.word	0x200019f0
 8007928:	200019f8 	.word	0x200019f8
 800792c:	20001a00 	.word	0x20001a00
 8007930:	200019fc 	.word	0x200019fc
 8007934:	20001a04 	.word	0x20001a04

08007938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007940:	4b28      	ldr	r3, [pc, #160]	; (80079e4 <prvInsertBlockIntoFreeList+0xac>)
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	e002      	b.n	800794c <prvInsertBlockIntoFreeList+0x14>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	429a      	cmp	r2, r3
 8007954:	d8f7      	bhi.n	8007946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	4413      	add	r3, r2
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	429a      	cmp	r2, r3
 8007966:	d108      	bne.n	800797a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	441a      	add	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	441a      	add	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d118      	bne.n	80079c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4b15      	ldr	r3, [pc, #84]	; (80079e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	429a      	cmp	r2, r3
 8007998:	d00d      	beq.n	80079b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	441a      	add	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	e008      	b.n	80079c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079b6:	4b0c      	ldr	r3, [pc, #48]	; (80079e8 <prvInsertBlockIntoFreeList+0xb0>)
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	e003      	b.n	80079c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d002      	beq.n	80079d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079d6:	bf00      	nop
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	200019f0 	.word	0x200019f0
 80079e8:	200019f8 	.word	0x200019f8

080079ec <__errno>:
 80079ec:	4b01      	ldr	r3, [pc, #4]	; (80079f4 <__errno+0x8>)
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	20000044 	.word	0x20000044

080079f8 <__libc_init_array>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	4e0d      	ldr	r6, [pc, #52]	; (8007a30 <__libc_init_array+0x38>)
 80079fc:	4c0d      	ldr	r4, [pc, #52]	; (8007a34 <__libc_init_array+0x3c>)
 80079fe:	1ba4      	subs	r4, r4, r6
 8007a00:	10a4      	asrs	r4, r4, #2
 8007a02:	2500      	movs	r5, #0
 8007a04:	42a5      	cmp	r5, r4
 8007a06:	d109      	bne.n	8007a1c <__libc_init_array+0x24>
 8007a08:	4e0b      	ldr	r6, [pc, #44]	; (8007a38 <__libc_init_array+0x40>)
 8007a0a:	4c0c      	ldr	r4, [pc, #48]	; (8007a3c <__libc_init_array+0x44>)
 8007a0c:	f000 fc38 	bl	8008280 <_init>
 8007a10:	1ba4      	subs	r4, r4, r6
 8007a12:	10a4      	asrs	r4, r4, #2
 8007a14:	2500      	movs	r5, #0
 8007a16:	42a5      	cmp	r5, r4
 8007a18:	d105      	bne.n	8007a26 <__libc_init_array+0x2e>
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a20:	4798      	blx	r3
 8007a22:	3501      	adds	r5, #1
 8007a24:	e7ee      	b.n	8007a04 <__libc_init_array+0xc>
 8007a26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a2a:	4798      	blx	r3
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	e7f2      	b.n	8007a16 <__libc_init_array+0x1e>
 8007a30:	08008438 	.word	0x08008438
 8007a34:	08008438 	.word	0x08008438
 8007a38:	08008438 	.word	0x08008438
 8007a3c:	0800843c 	.word	0x0800843c

08007a40 <memcpy>:
 8007a40:	b510      	push	{r4, lr}
 8007a42:	1e43      	subs	r3, r0, #1
 8007a44:	440a      	add	r2, r1
 8007a46:	4291      	cmp	r1, r2
 8007a48:	d100      	bne.n	8007a4c <memcpy+0xc>
 8007a4a:	bd10      	pop	{r4, pc}
 8007a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a54:	e7f7      	b.n	8007a46 <memcpy+0x6>

08007a56 <memset>:
 8007a56:	4402      	add	r2, r0
 8007a58:	4603      	mov	r3, r0
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d100      	bne.n	8007a60 <memset+0xa>
 8007a5e:	4770      	bx	lr
 8007a60:	f803 1b01 	strb.w	r1, [r3], #1
 8007a64:	e7f9      	b.n	8007a5a <memset+0x4>
	...

08007a68 <siprintf>:
 8007a68:	b40e      	push	{r1, r2, r3}
 8007a6a:	b500      	push	{lr}
 8007a6c:	b09c      	sub	sp, #112	; 0x70
 8007a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8007a70:	9002      	str	r0, [sp, #8]
 8007a72:	9006      	str	r0, [sp, #24]
 8007a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a78:	4809      	ldr	r0, [pc, #36]	; (8007aa0 <siprintf+0x38>)
 8007a7a:	9107      	str	r1, [sp, #28]
 8007a7c:	9104      	str	r1, [sp, #16]
 8007a7e:	4909      	ldr	r1, [pc, #36]	; (8007aa4 <siprintf+0x3c>)
 8007a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a84:	9105      	str	r1, [sp, #20]
 8007a86:	6800      	ldr	r0, [r0, #0]
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	a902      	add	r1, sp, #8
 8007a8c:	f000 f876 	bl	8007b7c <_svfiprintf_r>
 8007a90:	9b02      	ldr	r3, [sp, #8]
 8007a92:	2200      	movs	r2, #0
 8007a94:	701a      	strb	r2, [r3, #0]
 8007a96:	b01c      	add	sp, #112	; 0x70
 8007a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a9c:	b003      	add	sp, #12
 8007a9e:	4770      	bx	lr
 8007aa0:	20000044 	.word	0x20000044
 8007aa4:	ffff0208 	.word	0xffff0208

08007aa8 <strcat>:
 8007aa8:	b510      	push	{r4, lr}
 8007aaa:	4603      	mov	r3, r0
 8007aac:	781a      	ldrb	r2, [r3, #0]
 8007aae:	1c5c      	adds	r4, r3, #1
 8007ab0:	b93a      	cbnz	r2, 8007ac2 <strcat+0x1a>
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ab8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	d1f9      	bne.n	8007ab4 <strcat+0xc>
 8007ac0:	bd10      	pop	{r4, pc}
 8007ac2:	4623      	mov	r3, r4
 8007ac4:	e7f2      	b.n	8007aac <strcat+0x4>

08007ac6 <__ssputs_r>:
 8007ac6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aca:	688e      	ldr	r6, [r1, #8]
 8007acc:	429e      	cmp	r6, r3
 8007ace:	4682      	mov	sl, r0
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	4690      	mov	r8, r2
 8007ad4:	4699      	mov	r9, r3
 8007ad6:	d837      	bhi.n	8007b48 <__ssputs_r+0x82>
 8007ad8:	898a      	ldrh	r2, [r1, #12]
 8007ada:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ade:	d031      	beq.n	8007b44 <__ssputs_r+0x7e>
 8007ae0:	6825      	ldr	r5, [r4, #0]
 8007ae2:	6909      	ldr	r1, [r1, #16]
 8007ae4:	1a6f      	subs	r7, r5, r1
 8007ae6:	6965      	ldr	r5, [r4, #20]
 8007ae8:	2302      	movs	r3, #2
 8007aea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aee:	fb95 f5f3 	sdiv	r5, r5, r3
 8007af2:	f109 0301 	add.w	r3, r9, #1
 8007af6:	443b      	add	r3, r7
 8007af8:	429d      	cmp	r5, r3
 8007afa:	bf38      	it	cc
 8007afc:	461d      	movcc	r5, r3
 8007afe:	0553      	lsls	r3, r2, #21
 8007b00:	d530      	bpl.n	8007b64 <__ssputs_r+0x9e>
 8007b02:	4629      	mov	r1, r5
 8007b04:	f000 fb22 	bl	800814c <_malloc_r>
 8007b08:	4606      	mov	r6, r0
 8007b0a:	b950      	cbnz	r0, 8007b22 <__ssputs_r+0x5c>
 8007b0c:	230c      	movs	r3, #12
 8007b0e:	f8ca 3000 	str.w	r3, [sl]
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b22:	463a      	mov	r2, r7
 8007b24:	6921      	ldr	r1, [r4, #16]
 8007b26:	f7ff ff8b 	bl	8007a40 <memcpy>
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b34:	81a3      	strh	r3, [r4, #12]
 8007b36:	6126      	str	r6, [r4, #16]
 8007b38:	6165      	str	r5, [r4, #20]
 8007b3a:	443e      	add	r6, r7
 8007b3c:	1bed      	subs	r5, r5, r7
 8007b3e:	6026      	str	r6, [r4, #0]
 8007b40:	60a5      	str	r5, [r4, #8]
 8007b42:	464e      	mov	r6, r9
 8007b44:	454e      	cmp	r6, r9
 8007b46:	d900      	bls.n	8007b4a <__ssputs_r+0x84>
 8007b48:	464e      	mov	r6, r9
 8007b4a:	4632      	mov	r2, r6
 8007b4c:	4641      	mov	r1, r8
 8007b4e:	6820      	ldr	r0, [r4, #0]
 8007b50:	f000 fa94 	bl	800807c <memmove>
 8007b54:	68a3      	ldr	r3, [r4, #8]
 8007b56:	1b9b      	subs	r3, r3, r6
 8007b58:	60a3      	str	r3, [r4, #8]
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	441e      	add	r6, r3
 8007b5e:	6026      	str	r6, [r4, #0]
 8007b60:	2000      	movs	r0, #0
 8007b62:	e7dc      	b.n	8007b1e <__ssputs_r+0x58>
 8007b64:	462a      	mov	r2, r5
 8007b66:	f000 fb4b 	bl	8008200 <_realloc_r>
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	d1e2      	bne.n	8007b36 <__ssputs_r+0x70>
 8007b70:	6921      	ldr	r1, [r4, #16]
 8007b72:	4650      	mov	r0, sl
 8007b74:	f000 fa9c 	bl	80080b0 <_free_r>
 8007b78:	e7c8      	b.n	8007b0c <__ssputs_r+0x46>
	...

08007b7c <_svfiprintf_r>:
 8007b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b80:	461d      	mov	r5, r3
 8007b82:	898b      	ldrh	r3, [r1, #12]
 8007b84:	061f      	lsls	r7, r3, #24
 8007b86:	b09d      	sub	sp, #116	; 0x74
 8007b88:	4680      	mov	r8, r0
 8007b8a:	460c      	mov	r4, r1
 8007b8c:	4616      	mov	r6, r2
 8007b8e:	d50f      	bpl.n	8007bb0 <_svfiprintf_r+0x34>
 8007b90:	690b      	ldr	r3, [r1, #16]
 8007b92:	b96b      	cbnz	r3, 8007bb0 <_svfiprintf_r+0x34>
 8007b94:	2140      	movs	r1, #64	; 0x40
 8007b96:	f000 fad9 	bl	800814c <_malloc_r>
 8007b9a:	6020      	str	r0, [r4, #0]
 8007b9c:	6120      	str	r0, [r4, #16]
 8007b9e:	b928      	cbnz	r0, 8007bac <_svfiprintf_r+0x30>
 8007ba0:	230c      	movs	r3, #12
 8007ba2:	f8c8 3000 	str.w	r3, [r8]
 8007ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8007baa:	e0c8      	b.n	8007d3e <_svfiprintf_r+0x1c2>
 8007bac:	2340      	movs	r3, #64	; 0x40
 8007bae:	6163      	str	r3, [r4, #20]
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb4:	2320      	movs	r3, #32
 8007bb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bba:	2330      	movs	r3, #48	; 0x30
 8007bbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bc0:	9503      	str	r5, [sp, #12]
 8007bc2:	f04f 0b01 	mov.w	fp, #1
 8007bc6:	4637      	mov	r7, r6
 8007bc8:	463d      	mov	r5, r7
 8007bca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007bce:	b10b      	cbz	r3, 8007bd4 <_svfiprintf_r+0x58>
 8007bd0:	2b25      	cmp	r3, #37	; 0x25
 8007bd2:	d13e      	bne.n	8007c52 <_svfiprintf_r+0xd6>
 8007bd4:	ebb7 0a06 	subs.w	sl, r7, r6
 8007bd8:	d00b      	beq.n	8007bf2 <_svfiprintf_r+0x76>
 8007bda:	4653      	mov	r3, sl
 8007bdc:	4632      	mov	r2, r6
 8007bde:	4621      	mov	r1, r4
 8007be0:	4640      	mov	r0, r8
 8007be2:	f7ff ff70 	bl	8007ac6 <__ssputs_r>
 8007be6:	3001      	adds	r0, #1
 8007be8:	f000 80a4 	beq.w	8007d34 <_svfiprintf_r+0x1b8>
 8007bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bee:	4453      	add	r3, sl
 8007bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf2:	783b      	ldrb	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 809d 	beq.w	8007d34 <_svfiprintf_r+0x1b8>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8007c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c04:	9304      	str	r3, [sp, #16]
 8007c06:	9307      	str	r3, [sp, #28]
 8007c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8007c0e:	462f      	mov	r7, r5
 8007c10:	2205      	movs	r2, #5
 8007c12:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007c16:	4850      	ldr	r0, [pc, #320]	; (8007d58 <_svfiprintf_r+0x1dc>)
 8007c18:	f7f8 fae2 	bl	80001e0 <memchr>
 8007c1c:	9b04      	ldr	r3, [sp, #16]
 8007c1e:	b9d0      	cbnz	r0, 8007c56 <_svfiprintf_r+0xda>
 8007c20:	06d9      	lsls	r1, r3, #27
 8007c22:	bf44      	itt	mi
 8007c24:	2220      	movmi	r2, #32
 8007c26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c2a:	071a      	lsls	r2, r3, #28
 8007c2c:	bf44      	itt	mi
 8007c2e:	222b      	movmi	r2, #43	; 0x2b
 8007c30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c34:	782a      	ldrb	r2, [r5, #0]
 8007c36:	2a2a      	cmp	r2, #42	; 0x2a
 8007c38:	d015      	beq.n	8007c66 <_svfiprintf_r+0xea>
 8007c3a:	9a07      	ldr	r2, [sp, #28]
 8007c3c:	462f      	mov	r7, r5
 8007c3e:	2000      	movs	r0, #0
 8007c40:	250a      	movs	r5, #10
 8007c42:	4639      	mov	r1, r7
 8007c44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c48:	3b30      	subs	r3, #48	; 0x30
 8007c4a:	2b09      	cmp	r3, #9
 8007c4c:	d94d      	bls.n	8007cea <_svfiprintf_r+0x16e>
 8007c4e:	b1b8      	cbz	r0, 8007c80 <_svfiprintf_r+0x104>
 8007c50:	e00f      	b.n	8007c72 <_svfiprintf_r+0xf6>
 8007c52:	462f      	mov	r7, r5
 8007c54:	e7b8      	b.n	8007bc8 <_svfiprintf_r+0x4c>
 8007c56:	4a40      	ldr	r2, [pc, #256]	; (8007d58 <_svfiprintf_r+0x1dc>)
 8007c58:	1a80      	subs	r0, r0, r2
 8007c5a:	fa0b f000 	lsl.w	r0, fp, r0
 8007c5e:	4318      	orrs	r0, r3
 8007c60:	9004      	str	r0, [sp, #16]
 8007c62:	463d      	mov	r5, r7
 8007c64:	e7d3      	b.n	8007c0e <_svfiprintf_r+0x92>
 8007c66:	9a03      	ldr	r2, [sp, #12]
 8007c68:	1d11      	adds	r1, r2, #4
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	9103      	str	r1, [sp, #12]
 8007c6e:	2a00      	cmp	r2, #0
 8007c70:	db01      	blt.n	8007c76 <_svfiprintf_r+0xfa>
 8007c72:	9207      	str	r2, [sp, #28]
 8007c74:	e004      	b.n	8007c80 <_svfiprintf_r+0x104>
 8007c76:	4252      	negs	r2, r2
 8007c78:	f043 0302 	orr.w	r3, r3, #2
 8007c7c:	9207      	str	r2, [sp, #28]
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	783b      	ldrb	r3, [r7, #0]
 8007c82:	2b2e      	cmp	r3, #46	; 0x2e
 8007c84:	d10c      	bne.n	8007ca0 <_svfiprintf_r+0x124>
 8007c86:	787b      	ldrb	r3, [r7, #1]
 8007c88:	2b2a      	cmp	r3, #42	; 0x2a
 8007c8a:	d133      	bne.n	8007cf4 <_svfiprintf_r+0x178>
 8007c8c:	9b03      	ldr	r3, [sp, #12]
 8007c8e:	1d1a      	adds	r2, r3, #4
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	9203      	str	r2, [sp, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	bfb8      	it	lt
 8007c98:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c9c:	3702      	adds	r7, #2
 8007c9e:	9305      	str	r3, [sp, #20]
 8007ca0:	4d2e      	ldr	r5, [pc, #184]	; (8007d5c <_svfiprintf_r+0x1e0>)
 8007ca2:	7839      	ldrb	r1, [r7, #0]
 8007ca4:	2203      	movs	r2, #3
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f7f8 fa9a 	bl	80001e0 <memchr>
 8007cac:	b138      	cbz	r0, 8007cbe <_svfiprintf_r+0x142>
 8007cae:	2340      	movs	r3, #64	; 0x40
 8007cb0:	1b40      	subs	r0, r0, r5
 8007cb2:	fa03 f000 	lsl.w	r0, r3, r0
 8007cb6:	9b04      	ldr	r3, [sp, #16]
 8007cb8:	4303      	orrs	r3, r0
 8007cba:	3701      	adds	r7, #1
 8007cbc:	9304      	str	r3, [sp, #16]
 8007cbe:	7839      	ldrb	r1, [r7, #0]
 8007cc0:	4827      	ldr	r0, [pc, #156]	; (8007d60 <_svfiprintf_r+0x1e4>)
 8007cc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cc6:	2206      	movs	r2, #6
 8007cc8:	1c7e      	adds	r6, r7, #1
 8007cca:	f7f8 fa89 	bl	80001e0 <memchr>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d038      	beq.n	8007d44 <_svfiprintf_r+0x1c8>
 8007cd2:	4b24      	ldr	r3, [pc, #144]	; (8007d64 <_svfiprintf_r+0x1e8>)
 8007cd4:	bb13      	cbnz	r3, 8007d1c <_svfiprintf_r+0x1a0>
 8007cd6:	9b03      	ldr	r3, [sp, #12]
 8007cd8:	3307      	adds	r3, #7
 8007cda:	f023 0307 	bic.w	r3, r3, #7
 8007cde:	3308      	adds	r3, #8
 8007ce0:	9303      	str	r3, [sp, #12]
 8007ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce4:	444b      	add	r3, r9
 8007ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce8:	e76d      	b.n	8007bc6 <_svfiprintf_r+0x4a>
 8007cea:	fb05 3202 	mla	r2, r5, r2, r3
 8007cee:	2001      	movs	r0, #1
 8007cf0:	460f      	mov	r7, r1
 8007cf2:	e7a6      	b.n	8007c42 <_svfiprintf_r+0xc6>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	3701      	adds	r7, #1
 8007cf8:	9305      	str	r3, [sp, #20]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	250a      	movs	r5, #10
 8007cfe:	4638      	mov	r0, r7
 8007d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d04:	3a30      	subs	r2, #48	; 0x30
 8007d06:	2a09      	cmp	r2, #9
 8007d08:	d903      	bls.n	8007d12 <_svfiprintf_r+0x196>
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0c8      	beq.n	8007ca0 <_svfiprintf_r+0x124>
 8007d0e:	9105      	str	r1, [sp, #20]
 8007d10:	e7c6      	b.n	8007ca0 <_svfiprintf_r+0x124>
 8007d12:	fb05 2101 	mla	r1, r5, r1, r2
 8007d16:	2301      	movs	r3, #1
 8007d18:	4607      	mov	r7, r0
 8007d1a:	e7f0      	b.n	8007cfe <_svfiprintf_r+0x182>
 8007d1c:	ab03      	add	r3, sp, #12
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	4622      	mov	r2, r4
 8007d22:	4b11      	ldr	r3, [pc, #68]	; (8007d68 <_svfiprintf_r+0x1ec>)
 8007d24:	a904      	add	r1, sp, #16
 8007d26:	4640      	mov	r0, r8
 8007d28:	f3af 8000 	nop.w
 8007d2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d30:	4681      	mov	r9, r0
 8007d32:	d1d6      	bne.n	8007ce2 <_svfiprintf_r+0x166>
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	065b      	lsls	r3, r3, #25
 8007d38:	f53f af35 	bmi.w	8007ba6 <_svfiprintf_r+0x2a>
 8007d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d3e:	b01d      	add	sp, #116	; 0x74
 8007d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d44:	ab03      	add	r3, sp, #12
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	4622      	mov	r2, r4
 8007d4a:	4b07      	ldr	r3, [pc, #28]	; (8007d68 <_svfiprintf_r+0x1ec>)
 8007d4c:	a904      	add	r1, sp, #16
 8007d4e:	4640      	mov	r0, r8
 8007d50:	f000 f882 	bl	8007e58 <_printf_i>
 8007d54:	e7ea      	b.n	8007d2c <_svfiprintf_r+0x1b0>
 8007d56:	bf00      	nop
 8007d58:	080083fc 	.word	0x080083fc
 8007d5c:	08008402 	.word	0x08008402
 8007d60:	08008406 	.word	0x08008406
 8007d64:	00000000 	.word	0x00000000
 8007d68:	08007ac7 	.word	0x08007ac7

08007d6c <_printf_common>:
 8007d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d70:	4691      	mov	r9, r2
 8007d72:	461f      	mov	r7, r3
 8007d74:	688a      	ldr	r2, [r1, #8]
 8007d76:	690b      	ldr	r3, [r1, #16]
 8007d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	bfb8      	it	lt
 8007d80:	4613      	movlt	r3, r2
 8007d82:	f8c9 3000 	str.w	r3, [r9]
 8007d86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	b112      	cbz	r2, 8007d96 <_printf_common+0x2a>
 8007d90:	3301      	adds	r3, #1
 8007d92:	f8c9 3000 	str.w	r3, [r9]
 8007d96:	6823      	ldr	r3, [r4, #0]
 8007d98:	0699      	lsls	r1, r3, #26
 8007d9a:	bf42      	ittt	mi
 8007d9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007da0:	3302      	addmi	r3, #2
 8007da2:	f8c9 3000 	strmi.w	r3, [r9]
 8007da6:	6825      	ldr	r5, [r4, #0]
 8007da8:	f015 0506 	ands.w	r5, r5, #6
 8007dac:	d107      	bne.n	8007dbe <_printf_common+0x52>
 8007dae:	f104 0a19 	add.w	sl, r4, #25
 8007db2:	68e3      	ldr	r3, [r4, #12]
 8007db4:	f8d9 2000 	ldr.w	r2, [r9]
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	42ab      	cmp	r3, r5
 8007dbc:	dc28      	bgt.n	8007e10 <_printf_common+0xa4>
 8007dbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007dc2:	6822      	ldr	r2, [r4, #0]
 8007dc4:	3300      	adds	r3, #0
 8007dc6:	bf18      	it	ne
 8007dc8:	2301      	movne	r3, #1
 8007dca:	0692      	lsls	r2, r2, #26
 8007dcc:	d42d      	bmi.n	8007e2a <_printf_common+0xbe>
 8007dce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	47c0      	blx	r8
 8007dd8:	3001      	adds	r0, #1
 8007dda:	d020      	beq.n	8007e1e <_printf_common+0xb2>
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	68e5      	ldr	r5, [r4, #12]
 8007de0:	f8d9 2000 	ldr.w	r2, [r9]
 8007de4:	f003 0306 	and.w	r3, r3, #6
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	bf08      	it	eq
 8007dec:	1aad      	subeq	r5, r5, r2
 8007dee:	68a3      	ldr	r3, [r4, #8]
 8007df0:	6922      	ldr	r2, [r4, #16]
 8007df2:	bf0c      	ite	eq
 8007df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007df8:	2500      	movne	r5, #0
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	bfc4      	itt	gt
 8007dfe:	1a9b      	subgt	r3, r3, r2
 8007e00:	18ed      	addgt	r5, r5, r3
 8007e02:	f04f 0900 	mov.w	r9, #0
 8007e06:	341a      	adds	r4, #26
 8007e08:	454d      	cmp	r5, r9
 8007e0a:	d11a      	bne.n	8007e42 <_printf_common+0xd6>
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	e008      	b.n	8007e22 <_printf_common+0xb6>
 8007e10:	2301      	movs	r3, #1
 8007e12:	4652      	mov	r2, sl
 8007e14:	4639      	mov	r1, r7
 8007e16:	4630      	mov	r0, r6
 8007e18:	47c0      	blx	r8
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	d103      	bne.n	8007e26 <_printf_common+0xba>
 8007e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e26:	3501      	adds	r5, #1
 8007e28:	e7c3      	b.n	8007db2 <_printf_common+0x46>
 8007e2a:	18e1      	adds	r1, r4, r3
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	2030      	movs	r0, #48	; 0x30
 8007e30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e34:	4422      	add	r2, r4
 8007e36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e3e:	3302      	adds	r3, #2
 8007e40:	e7c5      	b.n	8007dce <_printf_common+0x62>
 8007e42:	2301      	movs	r3, #1
 8007e44:	4622      	mov	r2, r4
 8007e46:	4639      	mov	r1, r7
 8007e48:	4630      	mov	r0, r6
 8007e4a:	47c0      	blx	r8
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d0e6      	beq.n	8007e1e <_printf_common+0xb2>
 8007e50:	f109 0901 	add.w	r9, r9, #1
 8007e54:	e7d8      	b.n	8007e08 <_printf_common+0x9c>
	...

08007e58 <_printf_i>:
 8007e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e60:	460c      	mov	r4, r1
 8007e62:	7e09      	ldrb	r1, [r1, #24]
 8007e64:	b085      	sub	sp, #20
 8007e66:	296e      	cmp	r1, #110	; 0x6e
 8007e68:	4617      	mov	r7, r2
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	4698      	mov	r8, r3
 8007e6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e70:	f000 80b3 	beq.w	8007fda <_printf_i+0x182>
 8007e74:	d822      	bhi.n	8007ebc <_printf_i+0x64>
 8007e76:	2963      	cmp	r1, #99	; 0x63
 8007e78:	d036      	beq.n	8007ee8 <_printf_i+0x90>
 8007e7a:	d80a      	bhi.n	8007e92 <_printf_i+0x3a>
 8007e7c:	2900      	cmp	r1, #0
 8007e7e:	f000 80b9 	beq.w	8007ff4 <_printf_i+0x19c>
 8007e82:	2958      	cmp	r1, #88	; 0x58
 8007e84:	f000 8083 	beq.w	8007f8e <_printf_i+0x136>
 8007e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007e90:	e032      	b.n	8007ef8 <_printf_i+0xa0>
 8007e92:	2964      	cmp	r1, #100	; 0x64
 8007e94:	d001      	beq.n	8007e9a <_printf_i+0x42>
 8007e96:	2969      	cmp	r1, #105	; 0x69
 8007e98:	d1f6      	bne.n	8007e88 <_printf_i+0x30>
 8007e9a:	6820      	ldr	r0, [r4, #0]
 8007e9c:	6813      	ldr	r3, [r2, #0]
 8007e9e:	0605      	lsls	r5, r0, #24
 8007ea0:	f103 0104 	add.w	r1, r3, #4
 8007ea4:	d52a      	bpl.n	8007efc <_printf_i+0xa4>
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6011      	str	r1, [r2, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	da03      	bge.n	8007eb6 <_printf_i+0x5e>
 8007eae:	222d      	movs	r2, #45	; 0x2d
 8007eb0:	425b      	negs	r3, r3
 8007eb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007eb6:	486f      	ldr	r0, [pc, #444]	; (8008074 <_printf_i+0x21c>)
 8007eb8:	220a      	movs	r2, #10
 8007eba:	e039      	b.n	8007f30 <_printf_i+0xd8>
 8007ebc:	2973      	cmp	r1, #115	; 0x73
 8007ebe:	f000 809d 	beq.w	8007ffc <_printf_i+0x1a4>
 8007ec2:	d808      	bhi.n	8007ed6 <_printf_i+0x7e>
 8007ec4:	296f      	cmp	r1, #111	; 0x6f
 8007ec6:	d020      	beq.n	8007f0a <_printf_i+0xb2>
 8007ec8:	2970      	cmp	r1, #112	; 0x70
 8007eca:	d1dd      	bne.n	8007e88 <_printf_i+0x30>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	f043 0320 	orr.w	r3, r3, #32
 8007ed2:	6023      	str	r3, [r4, #0]
 8007ed4:	e003      	b.n	8007ede <_printf_i+0x86>
 8007ed6:	2975      	cmp	r1, #117	; 0x75
 8007ed8:	d017      	beq.n	8007f0a <_printf_i+0xb2>
 8007eda:	2978      	cmp	r1, #120	; 0x78
 8007edc:	d1d4      	bne.n	8007e88 <_printf_i+0x30>
 8007ede:	2378      	movs	r3, #120	; 0x78
 8007ee0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ee4:	4864      	ldr	r0, [pc, #400]	; (8008078 <_printf_i+0x220>)
 8007ee6:	e055      	b.n	8007f94 <_printf_i+0x13c>
 8007ee8:	6813      	ldr	r3, [r2, #0]
 8007eea:	1d19      	adds	r1, r3, #4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6011      	str	r1, [r2, #0]
 8007ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e08c      	b.n	8008016 <_printf_i+0x1be>
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6011      	str	r1, [r2, #0]
 8007f00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f04:	bf18      	it	ne
 8007f06:	b21b      	sxthne	r3, r3
 8007f08:	e7cf      	b.n	8007eaa <_printf_i+0x52>
 8007f0a:	6813      	ldr	r3, [r2, #0]
 8007f0c:	6825      	ldr	r5, [r4, #0]
 8007f0e:	1d18      	adds	r0, r3, #4
 8007f10:	6010      	str	r0, [r2, #0]
 8007f12:	0628      	lsls	r0, r5, #24
 8007f14:	d501      	bpl.n	8007f1a <_printf_i+0xc2>
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	e002      	b.n	8007f20 <_printf_i+0xc8>
 8007f1a:	0668      	lsls	r0, r5, #25
 8007f1c:	d5fb      	bpl.n	8007f16 <_printf_i+0xbe>
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	4854      	ldr	r0, [pc, #336]	; (8008074 <_printf_i+0x21c>)
 8007f22:	296f      	cmp	r1, #111	; 0x6f
 8007f24:	bf14      	ite	ne
 8007f26:	220a      	movne	r2, #10
 8007f28:	2208      	moveq	r2, #8
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f30:	6865      	ldr	r5, [r4, #4]
 8007f32:	60a5      	str	r5, [r4, #8]
 8007f34:	2d00      	cmp	r5, #0
 8007f36:	f2c0 8095 	blt.w	8008064 <_printf_i+0x20c>
 8007f3a:	6821      	ldr	r1, [r4, #0]
 8007f3c:	f021 0104 	bic.w	r1, r1, #4
 8007f40:	6021      	str	r1, [r4, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d13d      	bne.n	8007fc2 <_printf_i+0x16a>
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	f040 808e 	bne.w	8008068 <_printf_i+0x210>
 8007f4c:	4665      	mov	r5, ip
 8007f4e:	2a08      	cmp	r2, #8
 8007f50:	d10b      	bne.n	8007f6a <_printf_i+0x112>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	07db      	lsls	r3, r3, #31
 8007f56:	d508      	bpl.n	8007f6a <_printf_i+0x112>
 8007f58:	6923      	ldr	r3, [r4, #16]
 8007f5a:	6862      	ldr	r2, [r4, #4]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	bfde      	ittt	le
 8007f60:	2330      	movle	r3, #48	; 0x30
 8007f62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f6a:	ebac 0305 	sub.w	r3, ip, r5
 8007f6e:	6123      	str	r3, [r4, #16]
 8007f70:	f8cd 8000 	str.w	r8, [sp]
 8007f74:	463b      	mov	r3, r7
 8007f76:	aa03      	add	r2, sp, #12
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f7ff fef6 	bl	8007d6c <_printf_common>
 8007f80:	3001      	adds	r0, #1
 8007f82:	d14d      	bne.n	8008020 <_printf_i+0x1c8>
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295
 8007f88:	b005      	add	sp, #20
 8007f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f8e:	4839      	ldr	r0, [pc, #228]	; (8008074 <_printf_i+0x21c>)
 8007f90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007f94:	6813      	ldr	r3, [r2, #0]
 8007f96:	6821      	ldr	r1, [r4, #0]
 8007f98:	1d1d      	adds	r5, r3, #4
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6015      	str	r5, [r2, #0]
 8007f9e:	060a      	lsls	r2, r1, #24
 8007fa0:	d50b      	bpl.n	8007fba <_printf_i+0x162>
 8007fa2:	07ca      	lsls	r2, r1, #31
 8007fa4:	bf44      	itt	mi
 8007fa6:	f041 0120 	orrmi.w	r1, r1, #32
 8007faa:	6021      	strmi	r1, [r4, #0]
 8007fac:	b91b      	cbnz	r3, 8007fb6 <_printf_i+0x15e>
 8007fae:	6822      	ldr	r2, [r4, #0]
 8007fb0:	f022 0220 	bic.w	r2, r2, #32
 8007fb4:	6022      	str	r2, [r4, #0]
 8007fb6:	2210      	movs	r2, #16
 8007fb8:	e7b7      	b.n	8007f2a <_printf_i+0xd2>
 8007fba:	064d      	lsls	r5, r1, #25
 8007fbc:	bf48      	it	mi
 8007fbe:	b29b      	uxthmi	r3, r3
 8007fc0:	e7ef      	b.n	8007fa2 <_printf_i+0x14a>
 8007fc2:	4665      	mov	r5, ip
 8007fc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fc8:	fb02 3311 	mls	r3, r2, r1, r3
 8007fcc:	5cc3      	ldrb	r3, [r0, r3]
 8007fce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	2900      	cmp	r1, #0
 8007fd6:	d1f5      	bne.n	8007fc4 <_printf_i+0x16c>
 8007fd8:	e7b9      	b.n	8007f4e <_printf_i+0xf6>
 8007fda:	6813      	ldr	r3, [r2, #0]
 8007fdc:	6825      	ldr	r5, [r4, #0]
 8007fde:	6961      	ldr	r1, [r4, #20]
 8007fe0:	1d18      	adds	r0, r3, #4
 8007fe2:	6010      	str	r0, [r2, #0]
 8007fe4:	0628      	lsls	r0, r5, #24
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	d501      	bpl.n	8007fee <_printf_i+0x196>
 8007fea:	6019      	str	r1, [r3, #0]
 8007fec:	e002      	b.n	8007ff4 <_printf_i+0x19c>
 8007fee:	066a      	lsls	r2, r5, #25
 8007ff0:	d5fb      	bpl.n	8007fea <_printf_i+0x192>
 8007ff2:	8019      	strh	r1, [r3, #0]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	6123      	str	r3, [r4, #16]
 8007ff8:	4665      	mov	r5, ip
 8007ffa:	e7b9      	b.n	8007f70 <_printf_i+0x118>
 8007ffc:	6813      	ldr	r3, [r2, #0]
 8007ffe:	1d19      	adds	r1, r3, #4
 8008000:	6011      	str	r1, [r2, #0]
 8008002:	681d      	ldr	r5, [r3, #0]
 8008004:	6862      	ldr	r2, [r4, #4]
 8008006:	2100      	movs	r1, #0
 8008008:	4628      	mov	r0, r5
 800800a:	f7f8 f8e9 	bl	80001e0 <memchr>
 800800e:	b108      	cbz	r0, 8008014 <_printf_i+0x1bc>
 8008010:	1b40      	subs	r0, r0, r5
 8008012:	6060      	str	r0, [r4, #4]
 8008014:	6863      	ldr	r3, [r4, #4]
 8008016:	6123      	str	r3, [r4, #16]
 8008018:	2300      	movs	r3, #0
 800801a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800801e:	e7a7      	b.n	8007f70 <_printf_i+0x118>
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	462a      	mov	r2, r5
 8008024:	4639      	mov	r1, r7
 8008026:	4630      	mov	r0, r6
 8008028:	47c0      	blx	r8
 800802a:	3001      	adds	r0, #1
 800802c:	d0aa      	beq.n	8007f84 <_printf_i+0x12c>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	079b      	lsls	r3, r3, #30
 8008032:	d413      	bmi.n	800805c <_printf_i+0x204>
 8008034:	68e0      	ldr	r0, [r4, #12]
 8008036:	9b03      	ldr	r3, [sp, #12]
 8008038:	4298      	cmp	r0, r3
 800803a:	bfb8      	it	lt
 800803c:	4618      	movlt	r0, r3
 800803e:	e7a3      	b.n	8007f88 <_printf_i+0x130>
 8008040:	2301      	movs	r3, #1
 8008042:	464a      	mov	r2, r9
 8008044:	4639      	mov	r1, r7
 8008046:	4630      	mov	r0, r6
 8008048:	47c0      	blx	r8
 800804a:	3001      	adds	r0, #1
 800804c:	d09a      	beq.n	8007f84 <_printf_i+0x12c>
 800804e:	3501      	adds	r5, #1
 8008050:	68e3      	ldr	r3, [r4, #12]
 8008052:	9a03      	ldr	r2, [sp, #12]
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	42ab      	cmp	r3, r5
 8008058:	dcf2      	bgt.n	8008040 <_printf_i+0x1e8>
 800805a:	e7eb      	b.n	8008034 <_printf_i+0x1dc>
 800805c:	2500      	movs	r5, #0
 800805e:	f104 0919 	add.w	r9, r4, #25
 8008062:	e7f5      	b.n	8008050 <_printf_i+0x1f8>
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1ac      	bne.n	8007fc2 <_printf_i+0x16a>
 8008068:	7803      	ldrb	r3, [r0, #0]
 800806a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800806e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008072:	e76c      	b.n	8007f4e <_printf_i+0xf6>
 8008074:	0800840d 	.word	0x0800840d
 8008078:	0800841e 	.word	0x0800841e

0800807c <memmove>:
 800807c:	4288      	cmp	r0, r1
 800807e:	b510      	push	{r4, lr}
 8008080:	eb01 0302 	add.w	r3, r1, r2
 8008084:	d807      	bhi.n	8008096 <memmove+0x1a>
 8008086:	1e42      	subs	r2, r0, #1
 8008088:	4299      	cmp	r1, r3
 800808a:	d00a      	beq.n	80080a2 <memmove+0x26>
 800808c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008090:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008094:	e7f8      	b.n	8008088 <memmove+0xc>
 8008096:	4283      	cmp	r3, r0
 8008098:	d9f5      	bls.n	8008086 <memmove+0xa>
 800809a:	1881      	adds	r1, r0, r2
 800809c:	1ad2      	subs	r2, r2, r3
 800809e:	42d3      	cmn	r3, r2
 80080a0:	d100      	bne.n	80080a4 <memmove+0x28>
 80080a2:	bd10      	pop	{r4, pc}
 80080a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80080ac:	e7f7      	b.n	800809e <memmove+0x22>
	...

080080b0 <_free_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4605      	mov	r5, r0
 80080b4:	2900      	cmp	r1, #0
 80080b6:	d045      	beq.n	8008144 <_free_r+0x94>
 80080b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080bc:	1f0c      	subs	r4, r1, #4
 80080be:	2b00      	cmp	r3, #0
 80080c0:	bfb8      	it	lt
 80080c2:	18e4      	addlt	r4, r4, r3
 80080c4:	f000 f8d2 	bl	800826c <__malloc_lock>
 80080c8:	4a1f      	ldr	r2, [pc, #124]	; (8008148 <_free_r+0x98>)
 80080ca:	6813      	ldr	r3, [r2, #0]
 80080cc:	4610      	mov	r0, r2
 80080ce:	b933      	cbnz	r3, 80080de <_free_r+0x2e>
 80080d0:	6063      	str	r3, [r4, #4]
 80080d2:	6014      	str	r4, [r2, #0]
 80080d4:	4628      	mov	r0, r5
 80080d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080da:	f000 b8c8 	b.w	800826e <__malloc_unlock>
 80080de:	42a3      	cmp	r3, r4
 80080e0:	d90c      	bls.n	80080fc <_free_r+0x4c>
 80080e2:	6821      	ldr	r1, [r4, #0]
 80080e4:	1862      	adds	r2, r4, r1
 80080e6:	4293      	cmp	r3, r2
 80080e8:	bf04      	itt	eq
 80080ea:	681a      	ldreq	r2, [r3, #0]
 80080ec:	685b      	ldreq	r3, [r3, #4]
 80080ee:	6063      	str	r3, [r4, #4]
 80080f0:	bf04      	itt	eq
 80080f2:	1852      	addeq	r2, r2, r1
 80080f4:	6022      	streq	r2, [r4, #0]
 80080f6:	6004      	str	r4, [r0, #0]
 80080f8:	e7ec      	b.n	80080d4 <_free_r+0x24>
 80080fa:	4613      	mov	r3, r2
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	b10a      	cbz	r2, 8008104 <_free_r+0x54>
 8008100:	42a2      	cmp	r2, r4
 8008102:	d9fa      	bls.n	80080fa <_free_r+0x4a>
 8008104:	6819      	ldr	r1, [r3, #0]
 8008106:	1858      	adds	r0, r3, r1
 8008108:	42a0      	cmp	r0, r4
 800810a:	d10b      	bne.n	8008124 <_free_r+0x74>
 800810c:	6820      	ldr	r0, [r4, #0]
 800810e:	4401      	add	r1, r0
 8008110:	1858      	adds	r0, r3, r1
 8008112:	4282      	cmp	r2, r0
 8008114:	6019      	str	r1, [r3, #0]
 8008116:	d1dd      	bne.n	80080d4 <_free_r+0x24>
 8008118:	6810      	ldr	r0, [r2, #0]
 800811a:	6852      	ldr	r2, [r2, #4]
 800811c:	605a      	str	r2, [r3, #4]
 800811e:	4401      	add	r1, r0
 8008120:	6019      	str	r1, [r3, #0]
 8008122:	e7d7      	b.n	80080d4 <_free_r+0x24>
 8008124:	d902      	bls.n	800812c <_free_r+0x7c>
 8008126:	230c      	movs	r3, #12
 8008128:	602b      	str	r3, [r5, #0]
 800812a:	e7d3      	b.n	80080d4 <_free_r+0x24>
 800812c:	6820      	ldr	r0, [r4, #0]
 800812e:	1821      	adds	r1, r4, r0
 8008130:	428a      	cmp	r2, r1
 8008132:	bf04      	itt	eq
 8008134:	6811      	ldreq	r1, [r2, #0]
 8008136:	6852      	ldreq	r2, [r2, #4]
 8008138:	6062      	str	r2, [r4, #4]
 800813a:	bf04      	itt	eq
 800813c:	1809      	addeq	r1, r1, r0
 800813e:	6021      	streq	r1, [r4, #0]
 8008140:	605c      	str	r4, [r3, #4]
 8008142:	e7c7      	b.n	80080d4 <_free_r+0x24>
 8008144:	bd38      	pop	{r3, r4, r5, pc}
 8008146:	bf00      	nop
 8008148:	20001a08 	.word	0x20001a08

0800814c <_malloc_r>:
 800814c:	b570      	push	{r4, r5, r6, lr}
 800814e:	1ccd      	adds	r5, r1, #3
 8008150:	f025 0503 	bic.w	r5, r5, #3
 8008154:	3508      	adds	r5, #8
 8008156:	2d0c      	cmp	r5, #12
 8008158:	bf38      	it	cc
 800815a:	250c      	movcc	r5, #12
 800815c:	2d00      	cmp	r5, #0
 800815e:	4606      	mov	r6, r0
 8008160:	db01      	blt.n	8008166 <_malloc_r+0x1a>
 8008162:	42a9      	cmp	r1, r5
 8008164:	d903      	bls.n	800816e <_malloc_r+0x22>
 8008166:	230c      	movs	r3, #12
 8008168:	6033      	str	r3, [r6, #0]
 800816a:	2000      	movs	r0, #0
 800816c:	bd70      	pop	{r4, r5, r6, pc}
 800816e:	f000 f87d 	bl	800826c <__malloc_lock>
 8008172:	4a21      	ldr	r2, [pc, #132]	; (80081f8 <_malloc_r+0xac>)
 8008174:	6814      	ldr	r4, [r2, #0]
 8008176:	4621      	mov	r1, r4
 8008178:	b991      	cbnz	r1, 80081a0 <_malloc_r+0x54>
 800817a:	4c20      	ldr	r4, [pc, #128]	; (80081fc <_malloc_r+0xb0>)
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	b91b      	cbnz	r3, 8008188 <_malloc_r+0x3c>
 8008180:	4630      	mov	r0, r6
 8008182:	f000 f863 	bl	800824c <_sbrk_r>
 8008186:	6020      	str	r0, [r4, #0]
 8008188:	4629      	mov	r1, r5
 800818a:	4630      	mov	r0, r6
 800818c:	f000 f85e 	bl	800824c <_sbrk_r>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	d124      	bne.n	80081de <_malloc_r+0x92>
 8008194:	230c      	movs	r3, #12
 8008196:	6033      	str	r3, [r6, #0]
 8008198:	4630      	mov	r0, r6
 800819a:	f000 f868 	bl	800826e <__malloc_unlock>
 800819e:	e7e4      	b.n	800816a <_malloc_r+0x1e>
 80081a0:	680b      	ldr	r3, [r1, #0]
 80081a2:	1b5b      	subs	r3, r3, r5
 80081a4:	d418      	bmi.n	80081d8 <_malloc_r+0x8c>
 80081a6:	2b0b      	cmp	r3, #11
 80081a8:	d90f      	bls.n	80081ca <_malloc_r+0x7e>
 80081aa:	600b      	str	r3, [r1, #0]
 80081ac:	50cd      	str	r5, [r1, r3]
 80081ae:	18cc      	adds	r4, r1, r3
 80081b0:	4630      	mov	r0, r6
 80081b2:	f000 f85c 	bl	800826e <__malloc_unlock>
 80081b6:	f104 000b 	add.w	r0, r4, #11
 80081ba:	1d23      	adds	r3, r4, #4
 80081bc:	f020 0007 	bic.w	r0, r0, #7
 80081c0:	1ac3      	subs	r3, r0, r3
 80081c2:	d0d3      	beq.n	800816c <_malloc_r+0x20>
 80081c4:	425a      	negs	r2, r3
 80081c6:	50e2      	str	r2, [r4, r3]
 80081c8:	e7d0      	b.n	800816c <_malloc_r+0x20>
 80081ca:	428c      	cmp	r4, r1
 80081cc:	684b      	ldr	r3, [r1, #4]
 80081ce:	bf16      	itet	ne
 80081d0:	6063      	strne	r3, [r4, #4]
 80081d2:	6013      	streq	r3, [r2, #0]
 80081d4:	460c      	movne	r4, r1
 80081d6:	e7eb      	b.n	80081b0 <_malloc_r+0x64>
 80081d8:	460c      	mov	r4, r1
 80081da:	6849      	ldr	r1, [r1, #4]
 80081dc:	e7cc      	b.n	8008178 <_malloc_r+0x2c>
 80081de:	1cc4      	adds	r4, r0, #3
 80081e0:	f024 0403 	bic.w	r4, r4, #3
 80081e4:	42a0      	cmp	r0, r4
 80081e6:	d005      	beq.n	80081f4 <_malloc_r+0xa8>
 80081e8:	1a21      	subs	r1, r4, r0
 80081ea:	4630      	mov	r0, r6
 80081ec:	f000 f82e 	bl	800824c <_sbrk_r>
 80081f0:	3001      	adds	r0, #1
 80081f2:	d0cf      	beq.n	8008194 <_malloc_r+0x48>
 80081f4:	6025      	str	r5, [r4, #0]
 80081f6:	e7db      	b.n	80081b0 <_malloc_r+0x64>
 80081f8:	20001a08 	.word	0x20001a08
 80081fc:	20001a0c 	.word	0x20001a0c

08008200 <_realloc_r>:
 8008200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008202:	4607      	mov	r7, r0
 8008204:	4614      	mov	r4, r2
 8008206:	460e      	mov	r6, r1
 8008208:	b921      	cbnz	r1, 8008214 <_realloc_r+0x14>
 800820a:	4611      	mov	r1, r2
 800820c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008210:	f7ff bf9c 	b.w	800814c <_malloc_r>
 8008214:	b922      	cbnz	r2, 8008220 <_realloc_r+0x20>
 8008216:	f7ff ff4b 	bl	80080b0 <_free_r>
 800821a:	4625      	mov	r5, r4
 800821c:	4628      	mov	r0, r5
 800821e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008220:	f000 f826 	bl	8008270 <_malloc_usable_size_r>
 8008224:	42a0      	cmp	r0, r4
 8008226:	d20f      	bcs.n	8008248 <_realloc_r+0x48>
 8008228:	4621      	mov	r1, r4
 800822a:	4638      	mov	r0, r7
 800822c:	f7ff ff8e 	bl	800814c <_malloc_r>
 8008230:	4605      	mov	r5, r0
 8008232:	2800      	cmp	r0, #0
 8008234:	d0f2      	beq.n	800821c <_realloc_r+0x1c>
 8008236:	4631      	mov	r1, r6
 8008238:	4622      	mov	r2, r4
 800823a:	f7ff fc01 	bl	8007a40 <memcpy>
 800823e:	4631      	mov	r1, r6
 8008240:	4638      	mov	r0, r7
 8008242:	f7ff ff35 	bl	80080b0 <_free_r>
 8008246:	e7e9      	b.n	800821c <_realloc_r+0x1c>
 8008248:	4635      	mov	r5, r6
 800824a:	e7e7      	b.n	800821c <_realloc_r+0x1c>

0800824c <_sbrk_r>:
 800824c:	b538      	push	{r3, r4, r5, lr}
 800824e:	4c06      	ldr	r4, [pc, #24]	; (8008268 <_sbrk_r+0x1c>)
 8008250:	2300      	movs	r3, #0
 8008252:	4605      	mov	r5, r0
 8008254:	4608      	mov	r0, r1
 8008256:	6023      	str	r3, [r4, #0]
 8008258:	f7f9 fda0 	bl	8001d9c <_sbrk>
 800825c:	1c43      	adds	r3, r0, #1
 800825e:	d102      	bne.n	8008266 <_sbrk_r+0x1a>
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	b103      	cbz	r3, 8008266 <_sbrk_r+0x1a>
 8008264:	602b      	str	r3, [r5, #0]
 8008266:	bd38      	pop	{r3, r4, r5, pc}
 8008268:	20001cf4 	.word	0x20001cf4

0800826c <__malloc_lock>:
 800826c:	4770      	bx	lr

0800826e <__malloc_unlock>:
 800826e:	4770      	bx	lr

08008270 <_malloc_usable_size_r>:
 8008270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008274:	1f18      	subs	r0, r3, #4
 8008276:	2b00      	cmp	r3, #0
 8008278:	bfbc      	itt	lt
 800827a:	580b      	ldrlt	r3, [r1, r0]
 800827c:	18c0      	addlt	r0, r0, r3
 800827e:	4770      	bx	lr

08008280 <_init>:
 8008280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008282:	bf00      	nop
 8008284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008286:	bc08      	pop	{r3}
 8008288:	469e      	mov	lr, r3
 800828a:	4770      	bx	lr

0800828c <_fini>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	bf00      	nop
 8008290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008292:	bc08      	pop	{r3}
 8008294:	469e      	mov	lr, r3
 8008296:	4770      	bx	lr
